const { contextBridge, ipcRenderer } = require('electron');

/* Fonction pour injecter les paramètres BetterXcloud
function injectBetterXcloudSettings() {
  try {
    console.log("Injection des paramètres BetterXcloud");
    
    // Définir les paramètres principaux pour BetterXcloud
    const settings = {
      "ui.imageQuality": 10,
      "ui.gameCard.waitTime.show": true,
      "ui.layout": "default",
      "game.fortnite.forceConsole": false,
      "block.tracking": true,
      "xhome.enabled": false,
      "block.features": [],
      "ui.hideSections": [],
      "audio.volume.booster.enabled": false,
      "ui.feedbackDialog.disabled": true,
      "stream.video.combineAudio": false,
      "nativeMkb.mode": "default",
      "loadingScreen.gameArt.show": false,
      "nativeMkb.forcedGames": [],
      "stream.video.codecProfile": "low",
      "ui.splashVideo.skip": true,
      "ui.reduceAnimations": true,
      "ui.systemMenu.hideHandle": true,
      "ui.streamMenu.simplify": false,
      "ui.hideScrollbar": false,
      "version.current": "6.4.6",
      "version.lastCheck": 1742417945,
      "mkb.enabled": false,
      "ui.controllerStatus.show": true,
      "version.latest": "6.4.6",
      "bx.locale": "en-US",
      "ui.controllerFriendly": false,
      "stream.locale": "default",
      "server.ipv6.prefer": false,
      "screenshot.applyFilters": false,
      "audio.mic.onPlaying": false,
      "mkb.cursor.hideIdle": false,
      "gameBar.position": "off",
      "loadingScreen.waitTime.show": true,
      "loadingScreen.rocket": "hide",
      "userAgent.profile": "default",
      "ui.theme": "default"
    };

    // Définir les paramètres spécifiques pour BetterXcloud.Stream
    const streamSettings = {
      "controller.pollingRate": 4,
      "deviceVibration.mode": "off",
      "mkb.p1.preset.mappingId": -1,
      "keyboardShortcuts.preset.inGameId": -1,
      "audio.volume": 100,
      "video.player.type": "default",
      "video.maxFps": 10,
      "video.player.powerPreference": "default",
      "video.processing": "usm",
      "video.ratio": "16:9",
      "video.position": "center",
      "video.processing.sharpness": 0,
      "video.saturation": 100,
      "video.contrast": 100,
      "video.brightness": 100,
      "localCoOp.enabled": false,
      "deviceVibration.intensity": 50,
      "stats.showWhenPlaying": false,
      "stats.quickGlance.enabled": true,
      "stats.items": ["ping", "fps", "btr"],
      "stats.position": "top-right",
      "stats.textSize": "0.9rem",
      "stats.opacity.all": 60,
      "stats.opacity.background": 60,
      "stats.colors": false,
      "mkb.p1.slot": 1
    };

    // Sauvegarder les paramètres dans le localStorage
    localStorage.setItem("BetterXcloud", JSON.stringify(settings));
    localStorage.setItem("BetterXcloud.Stream", JSON.stringify(streamSettings));
    console.log("Paramètres injectés dans le localStorage:", settings);
  } catch (error) {
    console.error("Erreur lors de l'injection des paramètres BetterXcloud:", error);
  }
}

// Injecter Better X Cloud dès que possible
window.addEventListener('DOMContentLoaded', () => {
  console.log('DOMContentLoaded déclenché, injection forcée');
  
  try {
    // Injecter le script si nous sommes sur une page appropriée
    const url = window.location.href;
    if (url.includes('xbox.com') || url.includes('play')) {
      // Supprimer toute ancienne instance du script si elle existe
      const oldScript = document.getElementById('better-x-cloud-script');
      if (oldScript) {
        console.log("Ancien script BetterXcloud trouvé, suppression...");
        oldScript.remove();
      }
      
      // Version corrigée de l'URL
      const scriptSrc = "https://cdn.jsdelivr.net/gh/redphx/better-x-cloud@latest/dist/better-x-cloud.min.js";
      
      // Injecter le script
      const scriptElem = document.createElement('script');
      scriptElem.id = 'better-x-cloud-script';
      scriptElem.src = scriptSrc;
      document.head.appendChild(scriptElem);
      
      console.log("Script BetterXcloud injecté, ID de vue: " + (window.viewId || 'inconnue'));
      
      // Ajouter un gestionnaire d'erreur
      scriptElem.onerror = function() {
        console.error("Erreur lors du chargement du script BetterXcloud. URL incorrecte ?");
      };
      
      // Injecter les paramètres après le chargement du script
      scriptElem.onload = function() {
        console.log("Script BetterXcloud chargé, injection des paramètres");
        injectBetterXcloudSettings();
      };
    }
  } catch (error) {
    console.error("Erreur lors de l'injection du script BetterXcloud:", error);
  }
});

// Ajouter un écouteur d'événements pour les rechargements de page ou les navigations
window.addEventListener('load', () => {
  console.log('Page complètement chargée, vérification de l\'injection');
  
  // Timeout pour s'assurer que tout est bien chargé
  setTimeout(() => {
    const script = document.getElementById('better-x-cloud-script');
    if (!script) {
      console.log("Script BetterXcloud non trouvé après chargement complet, réinjection...");
      // Déclencher à nouveau l'injection
      const event = new Event('DOMContentLoaded');
      window.dispatchEvent(event);
    }
  }, 2000);
});

console.log("betterxcloudpreload.js est chargé");*/
window.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded déclenché, injection immédiate');
    
    try {
      // Injecter le script seulement si nous sommes sur une page appropriée
      const url = window.location.href;
      if (url.includes('xbox.com') || url.includes('play')) {
        // Injecter le script
        const scriptElem = document.createElement('script');
        scriptElem.id = 'better-x-cloud-script';
        scriptElem.textContent = "// ==UserScript==\r\n// @name         Better xCloud\r\n// @namespace    https://github.com/redphx\r\n// @version      6.4.5\r\n// @description  Improve Xbox Cloud Gaming (xCloud) experience\r\n// @author       redphx\r\n// @license      MIT\r\n// @match        https://www.xbox.com/*/play*\r\n// @match        https://www.xbox.com/*/auth/msa?*loggedIn*\r\n// @run-at       document-start\r\n// @grant        none\r\n// @updateURL    https://raw.githubusercontent.com/redphx/better-xcloud/typescript/dist/better-xcloud.meta.js\r\n// @downloadURL  https://github.com/redphx/better-xcloud/releases/latest/download/better-xcloud.user.js\r\n// ==/UserScript==\r\nconsole.log(\"Script chargé dans Xbox Cloud Gaming\");\r\n\r\n(\"use strict\");\r\nclass BxLogger {\r\n  static info = (tag, ...args) =>\r\n    BX_FLAGS.Debug && BxLogger.log(\"#008746\", tag, ...args);\r\n  static warning = (tag, ...args) =>\r\n    BX_FLAGS.Debug && BxLogger.log(\"#c1a404\", tag, ...args);\r\n  static error = (tag, ...args) => BxLogger.log(\"#c10404\", tag, ...args);\r\n  static log(color, tag, ...args) {\r\n    console.log(\r\n      \"%c[BxC]\",\r\n      `color:${color};font-weight:bold;`,\r\n      tag,\r\n      \"//\",\r\n      ...args\r\n    );\r\n  }\r\n}\r\nwindow.BxLogger = BxLogger;\r\n/* ADDITIONAL CODE */\r\nvar DEFAULT_FLAGS = {\r\n    Debug: !1,\r\n    CheckForUpdate: !0,\r\n    EnableXcloudLogging: !1,\r\n    SafariWorkaround: !0,\r\n    EnableWebGPURenderer: !1,\r\n    ForceNativeMkbTitles: [],\r\n    FeatureGates: null,\r\n    DeviceInfo: { deviceType: \"unknown\" },\r\n  },\r\n  BX_FLAGS = Object.assign(DEFAULT_FLAGS, window.BX_FLAGS || {});\r\ntry {\r\n  delete window.BX_FLAGS;\r\n} catch (e) {}\r\nif (!BX_FLAGS.DeviceInfo.userAgent)\r\n  BX_FLAGS.DeviceInfo.userAgent = window.navigator.userAgent;\r\nBxLogger.info(\"BxFlags\", BX_FLAGS);\r\nvar NATIVE_FETCH = window.fetch;\r\nvar ALL_PREFS = {\r\n  global: [\r\n    \"audio.mic.onPlaying\",\r\n    \"audio.volume.booster.enabled\",\r\n    \"block.features\",\r\n    \"block.tracking\",\r\n    \"gameBar.position\",\r\n    \"game.fortnite.forceConsole\",\r\n    \"loadingScreen.gameArt.show\",\r\n    \"loadingScreen.rocket\",\r\n    \"loadingScreen.waitTime.show\",\r\n    \"mkb.enabled\",\r\n    \"mkb.cursor.hideIdle\",\r\n    \"nativeMkb.forcedGames\",\r\n    \"nativeMkb.mode\",\r\n    \"xhome.enabled\",\r\n    \"xhome.video.resolution\",\r\n    \"screenshot.applyFilters\",\r\n    \"server.bypassRestriction\",\r\n    \"server.ipv6.prefer\",\r\n    \"server.region\",\r\n    \"stream.video.codecProfile\",\r\n    \"stream.video.combineAudio\",\r\n    \"stream.video.maxBitrate\",\r\n    \"stream.locale\",\r\n    \"stream.video.resolution\",\r\n    \"touchController.autoOff\",\r\n    \"touchController.opacity.default\",\r\n    \"touchController.mode\",\r\n    \"touchController.style.custom\",\r\n    \"touchController.style.standard\",\r\n    \"ui.controllerFriendly\",\r\n    \"ui.controllerStatus.show\",\r\n    \"ui.feedbackDialog.disabled\",\r\n    \"ui.gameCard.waitTime.show\",\r\n    \"ui.hideSections\",\r\n    \"ui.systemMenu.hideHandle\",\r\n    \"ui.imageQuality\",\r\n    \"ui.layout\",\r\n    \"ui.reduceAnimations\",\r\n    \"ui.hideScrollbar\",\r\n    \"ui.streamMenu.simplify\",\r\n    \"ui.splashVideo.skip\",\r\n    \"ui.theme\",\r\n    \"version.current\",\r\n    \"version.lastCheck\",\r\n    \"version.latest\",\r\n    \"bx.locale\",\r\n    \"userAgent.profile\",\r\n  ],\r\n  stream: [\r\n    \"audio.volume\",\r\n    \"controller.pollingRate\",\r\n    \"controller.settings\",\r\n    \"deviceVibration.intensity\",\r\n    \"deviceVibration.mode\",\r\n    \"keyboardShortcuts.preset.inGameId\",\r\n    \"localCoOp.enabled\",\r\n    \"mkb.p1.preset.mappingId\",\r\n    \"mkb.p1.slot\",\r\n    \"mkb.p2.preset.mappingId\",\r\n    \"mkb.p2.slot\",\r\n    \"nativeMkb.scroll.sensitivityX\",\r\n    \"nativeMkb.scroll.sensitivityY\",\r\n    \"stats.colors\",\r\n    \"stats.items\",\r\n    \"stats.opacity.all\",\r\n    \"stats.opacity.background\",\r\n    \"stats.position\",\r\n    \"stats.quickGlance.enabled\",\r\n    \"stats.showWhenPlaying\",\r\n    \"stats.textSize\",\r\n    \"video.brightness\",\r\n    \"video.contrast\",\r\n    \"video.maxFps\",\r\n    \"video.player.type\",\r\n    \"video.position\",\r\n    \"video.player.powerPreference\",\r\n    \"video.processing\",\r\n    \"video.ratio\",\r\n    \"video.saturation\",\r\n    \"video.processing.sharpness\",\r\n  ],\r\n};\r\nvar SMART_TV_UNIQUE_ID = \"FC4A1DA2-711C-4E9C-BC7F-047AF8A672EA\",\r\n  CHROMIUM_VERSION = \"125.0.0.0\";\r\nif (!!window.chrome || window.navigator.userAgent.includes(\"Chrome\")) {\r\n  let match = window.navigator.userAgent.match(/\\s(?:Chrome|Edg)\\/([\\d\\.]+)/);\r\n  if (match) CHROMIUM_VERSION = match[1];\r\n}\r\nclass UserAgent {\r\n  static STORAGE_KEY = \"BetterXcloud.UserAgent\";\r\n  static #config;\r\n  static #isMobile = null;\r\n  static #isSafari = null;\r\n  static #isSafariMobile = null;\r\n  static #USER_AGENTS = {\r\n    \"windows-edge\": `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${CHROMIUM_VERSION} Safari/537.36 Edg/${CHROMIUM_VERSION}`,\r\n    \"macos-safari\":\r\n      \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5.2 Safari/605.1.1\",\r\n    \"smarttv-generic\": `${window.navigator.userAgent} Smart-TV`,\r\n    \"smarttv-tizen\": `Mozilla/5.0 (SMART-TV; LINUX; Tizen 7.0) AppleWebKit/537.36 (KHTML, like Gecko) ${CHROMIUM_VERSION}/7.0 TV Safari/537.36 ${SMART_TV_UNIQUE_ID}`,\r\n    \"vr-oculus\": window.navigator.userAgent + \" OculusBrowser VR\",\r\n  };\r\n  static init() {\r\n    if (\r\n      ((UserAgent.#config = JSON.parse(\r\n        window.localStorage.getItem(UserAgent.STORAGE_KEY) || \"{}\"\r\n      )),\r\n      !UserAgent.#config.profile)\r\n    )\r\n      UserAgent.#config.profile =\r\n        BX_FLAGS.DeviceInfo.deviceType === \"android-tv\" ||\r\n        BX_FLAGS.DeviceInfo.deviceType === \"webos\"\r\n          ? \"vr-oculus\"\r\n          : \"default\";\r\n    if (!UserAgent.#config.custom) UserAgent.#config.custom = \"\";\r\n    UserAgent.spoof();\r\n  }\r\n  static updateStorage(profile, custom) {\r\n    let config = UserAgent.#config;\r\n    if (\r\n      ((config.profile = profile),\r\n      profile === \"custom\" && typeof custom !== \"undefined\")\r\n    )\r\n      config.custom = custom;\r\n    window.localStorage.setItem(UserAgent.STORAGE_KEY, JSON.stringify(config));\r\n  }\r\n  static getDefault() {\r\n    return window.navigator.orgUserAgent || window.navigator.userAgent;\r\n  }\r\n  static get(profile) {\r\n    let defaultUserAgent = window.navigator.userAgent;\r\n    switch (profile) {\r\n      case \"default\":\r\n        return defaultUserAgent;\r\n      case \"custom\":\r\n        return UserAgent.#config.custom || defaultUserAgent;\r\n      default:\r\n        return UserAgent.#USER_AGENTS[profile] || defaultUserAgent;\r\n    }\r\n  }\r\n  static isSafari() {\r\n    if (this.#isSafari !== null) return this.#isSafari;\r\n    let userAgent = UserAgent.getDefault().toLowerCase(),\r\n      result = userAgent.includes(\"safari\") && !userAgent.includes(\"chrom\");\r\n    return (this.#isSafari = result), result;\r\n  }\r\n  static isSafariMobile() {\r\n    if (this.#isSafariMobile !== null) return this.#isSafariMobile;\r\n    let userAgent = UserAgent.getDefault().toLowerCase(),\r\n      result = this.isSafari() && userAgent.includes(\"mobile\");\r\n    return (this.#isSafariMobile = result), result;\r\n  }\r\n  static isMobile() {\r\n    if (this.#isMobile !== null) return this.#isMobile;\r\n    let userAgent = UserAgent.getDefault().toLowerCase(),\r\n      result = /iphone|ipad|android/.test(userAgent);\r\n    return (this.#isMobile = result), result;\r\n  }\r\n  static spoof() {\r\n    let profile = UserAgent.#config.profile;\r\n    if (profile === \"default\") return;\r\n    let newUserAgent = UserAgent.get(profile);\r\n    if (\"userAgentData\" in window.navigator)\r\n      (window.navigator.orgUserAgentData = window.navigator.userAgentData),\r\n        Object.defineProperty(window.navigator, \"userAgentData\", {});\r\n    (window.navigator.orgUserAgent = window.navigator.userAgent),\r\n      Object.defineProperty(window.navigator, \"userAgent\", {\r\n        value: newUserAgent,\r\n      });\r\n  }\r\n}\r\nvar SCRIPT_VERSION = \"6.4.5\",\r\n  SCRIPT_VARIANT = \"full\",\r\n  AppInterface = window.AppInterface;\r\nUserAgent.init();\r\nvar userAgent = window.navigator.userAgent.toLowerCase(),\r\n  isTv =\r\n    userAgent.includes(\"smart-tv\") ||\r\n    userAgent.includes(\"smarttv\") ||\r\n    /\\baft.*\\b/.test(userAgent),\r\n  isVr =\r\n    window.navigator.userAgent.includes(\"VR\") &&\r\n    window.navigator.userAgent.includes(\"OculusBrowser\"),\r\n  browserHasTouchSupport =\r\n    \"ontouchstart\" in window || navigator.maxTouchPoints > 0,\r\n  userAgentHasTouchSupport = !isTv && !isVr && browserHasTouchSupport,\r\n  STATES = {\r\n    supportedRegion: !0,\r\n    serverRegions: {},\r\n    selectedRegion: {},\r\n    gsToken: \"\",\r\n    isSignedIn: !1,\r\n    isPlaying: !1,\r\n    browser: {\r\n      capabilities: {\r\n        touch: browserHasTouchSupport,\r\n        batteryApi: \"getBattery\" in window.navigator,\r\n        deviceVibration: !!window.navigator.vibrate,\r\n        mkb:\r\n          AppInterface ||\r\n          !UserAgent.getDefault()\r\n            .toLowerCase()\r\n            .match(/(android|iphone|ipad)/),\r\n        emulatedNativeMkb: !!AppInterface,\r\n      },\r\n    },\r\n    userAgent: {\r\n      isTv,\r\n      capabilities: {\r\n        touch: userAgentHasTouchSupport,\r\n        mkb: AppInterface || !userAgent.match(/(android|iphone|ipad)/),\r\n      },\r\n    },\r\n    currentStream: {},\r\n    remotePlay: {},\r\n    pointerServerPort: 9269,\r\n  };\r\nfunction deepClone(obj) {\r\n  if (!obj) return {};\r\n  if (\"structuredClone\" in window) return structuredClone(obj);\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\nvar BxEvent;\r\n((BxEvent) => {\r\n  (BxEvent.POPSTATE = \"bx-popstate\"),\r\n    (BxEvent.STREAM_SESSION_READY = \"bx-stream-session-ready\"),\r\n    (BxEvent.CUSTOM_TOUCH_LAYOUTS_LOADED = \"bx-custom-touch-layouts-loaded\"),\r\n    (BxEvent.TOUCH_LAYOUT_MANAGER_READY = \"bx-touch-layout-manager-ready\"),\r\n    (BxEvent.REMOTE_PLAY_READY = \"bx-remote-play-ready\"),\r\n    (BxEvent.REMOTE_PLAY_FAILED = \"bx-remote-play-failed\"),\r\n    (BxEvent.CAPTURE_SCREENSHOT = \"bx-capture-screenshot\"),\r\n    (BxEvent.POINTER_LOCK_REQUESTED = \"bx-pointer-lock-requested\"),\r\n    (BxEvent.POINTER_LOCK_EXITED = \"bx-pointer-lock-exited\"),\r\n    (BxEvent.NAVIGATION_FOCUS_CHANGED = \"bx-nav-focus-changed\"),\r\n    (BxEvent.XCLOUD_GUIDE_MENU_SHOWN = \"bx-xcloud-guide-menu-shown\"),\r\n    (BxEvent.XCLOUD_POLLING_MODE_CHANGED = \"bx-xcloud-polling-mode-changed\"),\r\n    (BxEvent.XCLOUD_RENDERING_COMPONENT = \"bx-xcloud-rendering-component\"),\r\n    (BxEvent.XCLOUD_ROUTER_HISTORY_READY = \"bx-xcloud-router-history-ready\");\r\n  function dispatch(target, eventName, data) {\r\n    if (!target) return;\r\n    if (!eventName) {\r\n      alert(\"BxEvent.dispatch(): eventName is null\");\r\n      return;\r\n    }\r\n    let event = new Event(eventName);\r\n    if (data) for (let key in data) event[key] = data[key];\r\n    target.dispatchEvent(event),\r\n      AppInterface && AppInterface.onEvent(eventName),\r\n      BX_FLAGS.Debug &&\r\n        BxLogger.warning(\"BxEvent\", \"dispatch\", target, eventName, data);\r\n  }\r\n  BxEvent.dispatch = dispatch;\r\n})((BxEvent ||= {}));\r\nwindow.BxEvent = BxEvent;\r\nvar GamepadKeyName = {\r\n  0: [\"A\", \"⇓\"],\r\n  1: [\"B\", \"⇒\"],\r\n  2: [\"X\", \"⇐\"],\r\n  3: [\"Y\", \"⇑\"],\r\n  4: [\"LB\", \"↘\"],\r\n  5: [\"RB\", \"↙\"],\r\n  6: [\"LT\", \"↖\"],\r\n  7: [\"RT\", \"↗\"],\r\n  8: [\"Select\", \"⇺\"],\r\n  9: [\"Start\", \"⇻\"],\r\n  16: [\"Home\", \"\"],\r\n  12: [\"D-Pad Up\", \"≻\"],\r\n  13: [\"D-Pad Down\", \"≽\"],\r\n  14: [\"D-Pad Left\", \"≺\"],\r\n  15: [\"D-Pad Right\", \"≼\"],\r\n  10: [\"L3\", \"↺\"],\r\n  100: [\"Left Stick Up\", \"↾\"],\r\n  101: [\"Left Stick Down\", \"⇂\"],\r\n  102: [\"Left Stick Left\", \"↼\"],\r\n  103: [\"Left Stick Right\", \"⇀\"],\r\n  104: [\"Left Stick\", \"⇱\"],\r\n  11: [\"R3\", \"↻\"],\r\n  200: [\"Right Stick Up\", \"↿\"],\r\n  201: [\"Right Stick Down\", \"⇃\"],\r\n  202: [\"Right Stick Left\", \"↽\"],\r\n  203: [\"Right Stick Right\", \"⇁\"],\r\n  204: [\"Right Stick\", \"⇲\"],\r\n  17: [\"Screenshot\", \"⇧\"],\r\n};\r\nclass BxEventBus {\r\n  listeners = new Map();\r\n  group;\r\n  appJsInterfaces;\r\n  static Script = new BxEventBus(\"script\", {\r\n    \"dialog.shown\": \"onDialogShown\",\r\n    \"dialog.dismissed\": \"onDialogDismissed\",\r\n  });\r\n  static Stream = new BxEventBus(\"stream\", {\r\n    \"state.loading\": \"onStreamPlaying\",\r\n    \"state.playing\": \"onStreamPlaying\",\r\n    \"state.stopped\": \"onStreamStopped\",\r\n  });\r\n  constructor(group, appJsInterfaces) {\r\n    (this.group = group), (this.appJsInterfaces = appJsInterfaces);\r\n  }\r\n  on(event, callback) {\r\n    if (!this.listeners.has(event)) this.listeners.set(event, new Set());\r\n    this.listeners.get(event).add(callback),\r\n      BX_FLAGS.Debug && BxLogger.warning(\"EventBus\", \"on\", event, callback);\r\n  }\r\n  once(event, callback) {\r\n    let wrapper = (...args) => {\r\n      callback(...args), this.off(event, wrapper);\r\n    };\r\n    this.on(event, wrapper);\r\n  }\r\n  off(event, callback) {\r\n    if (\r\n      (BX_FLAGS.Debug && BxLogger.warning(\"EventBus\", \"off\", event, callback),\r\n      !callback)\r\n    ) {\r\n      this.listeners.delete(event);\r\n      return;\r\n    }\r\n    let callbacks = this.listeners.get(event);\r\n    if (!callbacks) return;\r\n    if ((callbacks.delete(callback), callbacks.size === 0))\r\n      this.listeners.delete(event);\r\n  }\r\n  offAll() {\r\n    this.listeners.clear();\r\n  }\r\n  emit(event, payload) {\r\n    let callbacks = this.listeners.get(event) || [];\r\n    for (let callback of callbacks) callback(payload);\r\n    if (AppInterface)\r\n      try {\r\n        if (event in this.appJsInterfaces) {\r\n          let method = this.appJsInterfaces[event];\r\n          AppInterface[method] && AppInterface[method]();\r\n        } else AppInterface.onEventBus(this.group + \".\" + event);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    BX_FLAGS.Debug &&\r\n      BxLogger.warning(\"EventBus\", \"emit\", `${this.group}.${event}`, payload);\r\n  }\r\n}\r\nwindow.BxEventBus = BxEventBus;\r\nclass GhPagesUtils {\r\n  static fetchLatestCommit() {\r\n    NATIVE_FETCH(\r\n      \"https://api.github.com/repos/redphx/better-xcloud/branches/gh-pages\",\r\n      { method: \"GET\", headers: { Accept: \"application/vnd.github.v3+json\" } }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let latestCommitHash = data.commit.sha;\r\n        window.localStorage.setItem(\r\n          \"BetterXcloud.GhPages.CommitHash\",\r\n          latestCommitHash\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        BxLogger.error(\r\n          \"GhPagesUtils\",\r\n          \"Error fetching the latest commit:\",\r\n          error\r\n        );\r\n      });\r\n  }\r\n  static getUrl(path) {\r\n    if (path[0] === \"/\") alert('`path` must not starts with \"/\"');\r\n    let prefix = \"https://raw.githubusercontent.com/redphx/better-xcloud\",\r\n      latestCommitHash = window.localStorage.getItem(\r\n        \"BetterXcloud.GhPages.CommitHash\"\r\n      );\r\n    if (latestCommitHash) return `${prefix}/${latestCommitHash}/${path}`;\r\n    else return `${prefix}/refs/heads/gh-pages/${path}`;\r\n  }\r\n  static getNativeMkbCustomList(update = !1) {\r\n    let key = \"BetterXcloud.GhPages.ForceNativeMkb\";\r\n    update &&\r\n      NATIVE_FETCH(GhPagesUtils.getUrl(\"native-mkb/ids.json\"))\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          if (json.$schemaVersion === 1)\r\n            window.localStorage.setItem(key, JSON.stringify(json)),\r\n              BxEventBus.Script.emit(\"list.forcedNativeMkb.updated\", {\r\n                data: json,\r\n              });\r\n          else window.localStorage.removeItem(key);\r\n        });\r\n    let info = JSON.parse(window.localStorage.getItem(key) || \"{}\");\r\n    if (info.$schemaVersion !== 1)\r\n      return window.localStorage.removeItem(key), {};\r\n    return info.data;\r\n  }\r\n  static getTouchControlCustomList() {\r\n    let key = \"BetterXcloud.GhPages.CustomTouchLayouts\";\r\n    return (\r\n      NATIVE_FETCH(GhPagesUtils.getUrl(\"touch-layouts/ids.json\"))\r\n        .then((response) => response.json())\r\n        .then((json) => {\r\n          if (Array.isArray(json))\r\n            window.localStorage.setItem(key, JSON.stringify(json));\r\n        }),\r\n      JSON.parse(window.localStorage.getItem(key) || \"[]\")\r\n    );\r\n  }\r\n  static getLocalCoOpList() {\r\n    let key = \"BetterXcloud.GhPages.LocalCoOp\";\r\n    NATIVE_FETCH(GhPagesUtils.getUrl(\"local-co-op/ids.json\"))\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        if (json.$schemaVersion === 1) {\r\n          window.localStorage.setItem(key, JSON.stringify(json));\r\n          let ids = new Set(Object.keys(json.data));\r\n          BxEventBus.Script.emit(\"list.localCoOp.updated\", { ids });\r\n        } else\r\n          window.localStorage.removeItem(key),\r\n            BxEventBus.Script.emit(\"list.localCoOp.updated\", {\r\n              ids: new Set(),\r\n            });\r\n      });\r\n    let info = JSON.parse(window.localStorage.getItem(key) || \"{}\");\r\n    if (info.$schemaVersion !== 1)\r\n      return window.localStorage.removeItem(key), new Set();\r\n    return new Set(Object.keys(info.data || {}));\r\n  }\r\n}\r\nvar SUPPORTED_LANGUAGES = {\r\n    \"en-US\": \"English (US)\",\r\n    \"ca-CA\": \"Català\",\r\n    \"da-DK\": \"dansk\",\r\n    \"de-DE\": \"Deutsch\",\r\n    \"en-ID\": \"Bahasa Indonesia\",\r\n    \"es-ES\": \"español (España)\",\r\n    \"fr-FR\": \"français\",\r\n    \"it-IT\": \"italiano\",\r\n    \"ja-JP\": \"日本語\",\r\n    \"ko-KR\": \"한국어\",\r\n    \"pl-PL\": \"polski\",\r\n    \"pt-BR\": \"português (Brasil)\",\r\n    \"ru-RU\": \"русский\",\r\n    \"th-TH\": \"ภาษาไทย\",\r\n    \"tr-TR\": \"Türkçe\",\r\n    \"uk-UA\": \"українська\",\r\n    \"vi-VN\": \"Tiếng Việt\",\r\n    \"zh-CN\": \"中文(简体)\",\r\n    \"zh-TW\": \"中文(繁體)\",\r\n  },\r\n  Texts = {\r\n    achievements: \"Achievements\",\r\n    activate: \"Activate\",\r\n    activated: \"Activated\",\r\n    active: \"Active\",\r\n    advanced: \"Advanced\",\r\n    \"all-games\": \"All games\",\r\n    \"always-off\": \"Always off\",\r\n    \"always-on\": \"Always on\",\r\n    \"amd-fidelity-cas\": \"AMD FidelityFX CAS\",\r\n    \"app-settings\": \"App settings\",\r\n    apply: \"Apply\",\r\n    \"aspect-ratio\": \"Aspect ratio\",\r\n    \"aspect-ratio-note\": \"Don't use with native touch games\",\r\n    audio: \"Audio\",\r\n    auto: \"Auto\",\r\n    availability: \"Availability\",\r\n    \"back-to-home\": \"Back to home\",\r\n    \"back-to-home-confirm\":\r\n      \"Do you want to go back to the home page (without disconnecting)?\",\r\n    \"background-opacity\": \"Background opacity\",\r\n    battery: \"Battery\",\r\n    \"battery-saving\": \"Battery saving\",\r\n    \"better-xcloud\": \"Better xCloud\",\r\n    \"bitrate-audio-maximum\": \"Maximum audio bitrate\",\r\n    \"bitrate-video-maximum\": \"Maximum video bitrate\",\r\n    bottom: \"Bottom\",\r\n    \"bottom-half\": \"Bottom half\",\r\n    \"bottom-left\": \"Bottom-left\",\r\n    \"bottom-right\": \"Bottom-right\",\r\n    brazil: \"Brazil\",\r\n    brightness: \"Brightness\",\r\n    \"browser-unsupported-feature\": \"Your browser doesn't support this feature\",\r\n    \"button-xbox\": \"Xbox button\",\r\n    \"bypass-region-restriction\": \"Bypass region restriction\",\r\n    \"can-stream-xbox-360-games\": \"Can stream Xbox 360 games\",\r\n    cancel: \"Cancel\",\r\n    \"cant-stream-xbox-360-games\": \"Can't stream Xbox 360 games\",\r\n    center: \"Center\",\r\n    chat: \"Chat\",\r\n    \"clarity-boost\": \"Clarity boost\",\r\n    \"clarity-boost-warning\":\r\n      \"These settings don't work when the Clarity Boost mode is ON\",\r\n    clear: \"Clear\",\r\n    \"clear-data\": \"Clear data\",\r\n    \"clear-data-confirm\":\r\n      \"Do you want to clear all Better xCloud settings and data?\",\r\n    \"clear-data-success\":\r\n      \"Data cleared! Refresh the page to apply the changes.\",\r\n    clock: \"Clock\",\r\n    close: \"Close\",\r\n    \"close-app\": \"Close app\",\r\n    \"combine-audio-video-streams\": \"Combine audio & video streams\",\r\n    \"combine-audio-video-streams-summary\": \"May fix the laggy audio problem\",\r\n    \"conditional-formatting\": \"Conditional formatting text color\",\r\n    \"confirm-delete-preset\": \"Do you want to delete this preset?\",\r\n    \"confirm-reload-stream\": \"Do you want to refresh the stream?\",\r\n    connected: \"Connected\",\r\n    \"console-connect\": \"Connect\",\r\n    \"continent-asia\": \"Asia\",\r\n    \"continent-australia\": \"Australia\",\r\n    \"continent-europe\": \"Europe\",\r\n    \"continent-north-america\": \"North America\",\r\n    \"continent-south-america\": \"South America\",\r\n    contrast: \"Contrast\",\r\n    controller: \"Controller\",\r\n    \"controller-customization\": \"Controller customization\",\r\n    \"controller-customization-input-latency-note\":\r\n      \"May slightly increase input latency\",\r\n    \"controller-friendly-ui\": \"Controller-friendly UI\",\r\n    \"controller-shortcuts\": \"Controller shortcuts\",\r\n    \"controller-shortcuts-connect-note\":\r\n      \"Connect a controller to use this feature\",\r\n    \"controller-shortcuts-xbox-note\": \"Button to open the Guide menu\",\r\n    \"controller-vibration\": \"Controller vibration\",\r\n    copy: \"Copy\",\r\n    \"create-shortcut\": \"Shortcut\",\r\n    custom: \"Custom\",\r\n    \"deadzone-counterweight\": \"Deadzone counterweight\",\r\n    decrease: \"Decrease\",\r\n    default: \"Default\",\r\n    \"default-opacity\": \"Default opacity\",\r\n    \"default-preset-note\":\r\n      \"You can't modify default presets. Create a new one to customize it.\",\r\n    delete: \"Delete\",\r\n    \"detect-controller-button\": \"Detect controller button\",\r\n    device: \"Device\",\r\n    \"device-unsupported-touch\": \"Your device doesn't have touch support\",\r\n    \"device-vibration\": \"Device vibration\",\r\n    \"device-vibration-not-using-gamepad\": \"On when not using gamepad\",\r\n    disable: \"Disable\",\r\n    \"disable-features\": \"Disable features\",\r\n    \"disable-home-context-menu\": \"Disable context menu in Home page\",\r\n    \"disable-post-stream-feedback-dialog\":\r\n      \"Disable post-stream feedback dialog\",\r\n    \"disable-social-features\": \"Disable social features\",\r\n    \"disable-xcloud-analytics\": \"Disable xCloud analytics\",\r\n    disabled: \"Disabled\",\r\n    disconnected: \"Disconnected\",\r\n    download: \"Download\",\r\n    downloaded: \"Downloaded\",\r\n    edit: \"Edit\",\r\n    \"enable-controller-shortcuts\": \"Enable controller shortcuts\",\r\n    \"enable-local-co-op-support\": \"Enable local co-op support\",\r\n    \"enable-local-co-op-support-note\": \"Only works with some games\",\r\n    \"enable-mic-on-startup\": \"Enable microphone on game launch\",\r\n    \"enable-mkb\": \"Emulate controller with Mouse & Keyboard\",\r\n    \"enable-quick-glance-mode\": 'Enable \"Quick Glance\" mode',\r\n    \"enable-remote-play-feature\": 'Enable the \"Remote Play\" feature',\r\n    \"enable-volume-control\": \"Enable volume control feature\",\r\n    enabled: \"Enabled\",\r\n    experimental: \"Experimental\",\r\n    export: \"Export\",\r\n    fast: \"Fast\",\r\n    \"force-native-mkb-games\": \"Force native Mouse & Keyboard for these games\",\r\n    \"fortnite-allow-stw-mode\": 'Allows playing \"Save the World\" mode on mobile',\r\n    \"fortnite-force-console-version\": \"Fortnite: force console version\",\r\n    \"friends-followers\": \"Friends and followers\",\r\n    \"game-bar\": \"Game Bar\",\r\n    \"getting-consoles-list\": \"Getting the list of consoles...\",\r\n    guide: \"Guide\",\r\n    help: \"Help\",\r\n    hide: \"Hide\",\r\n    \"hide-idle-cursor\": \"Hide mouse cursor on idle\",\r\n    \"hide-scrollbar\": \"Hide web page's scrollbar\",\r\n    \"hide-sections\": \"Hide sections\",\r\n    \"hide-system-menu-icon\": \"Hide System menu's icon\",\r\n    \"hide-touch-controller\": \"Hide touch controller\",\r\n    \"high-performance\": \"High performance\",\r\n    \"highest-quality\": \"Highest quality\",\r\n    \"highest-quality-note\":\r\n      \"Your device may not be powerful enough to use these settings\",\r\n    \"horizontal-scroll-sensitivity\": \"Horizontal scroll sensitivity\",\r\n    \"horizontal-sensitivity\": \"Horizontal sensitivity\",\r\n    \"how-to-fix\": \"How to fix\",\r\n    \"how-to-improve-app-performance\": \"How to improve app's performance\",\r\n    ignore: \"Ignore\",\r\n    \"image-quality\": \"Website's image quality\",\r\n    import: \"Import\",\r\n    \"in-game-controller-customization\": \"In-game controller customization\",\r\n    \"in-game-controller-shortcuts\": \"In-game controller shortcuts\",\r\n    \"in-game-keyboard-shortcuts\": \"In-game keyboard shortcuts\",\r\n    \"in-game-shortcuts\": \"In-game shortcuts\",\r\n    increase: \"Increase\",\r\n    \"install-android\": \"Better xCloud app for Android\",\r\n    invites: \"Invites\",\r\n    japan: \"Japan\",\r\n    jitter: \"Jitter\",\r\n    \"keyboard-key\": \"Keyboard key\",\r\n    \"keyboard-shortcuts\": \"Keyboard shortcuts\",\r\n    korea: \"Korea\",\r\n    language: \"Language\",\r\n    large: \"Large\",\r\n    layout: \"Layout\",\r\n    \"left-stick\": \"Left stick\",\r\n    \"left-stick-deadzone\": \"Left stick deadzone\",\r\n    \"left-trigger-range\": \"Left trigger range\",\r\n    \"limit-fps\": \"Limit FPS\",\r\n    \"load-failed-message\": \"Failed to run Better xCloud\",\r\n    \"loading-screen\": \"Loading screen\",\r\n    \"local-co-op\": \"Local co-op\",\r\n    \"lowest-quality\": \"Lowest quality\",\r\n    manage: \"Manage\",\r\n    \"map-mouse-to\": \"Map mouse to\",\r\n    \"may-not-work-properly\": \"May not work properly!\",\r\n    menu: \"Menu\",\r\n    microphone: \"Microphone\",\r\n    \"mkb-adjust-ingame-settings\":\r\n      \"You may also need to adjust the in-game sensitivity & deadzone settings\",\r\n    \"mkb-click-to-activate\": \"Click to activate\",\r\n    \"mkb-disclaimer\": \"This could be viewed as cheating when playing online\",\r\n    \"modifiers-note\":\r\n      \"To use more than one key, include Ctrl, Alt or Shift in your shortcut. Command key is not allowed.\",\r\n    \"mouse-and-keyboard\": \"Mouse & Keyboard\",\r\n    \"mouse-click\": \"Mouse click\",\r\n    \"mouse-wheel\": \"Mouse wheel\",\r\n    muted: \"Muted\",\r\n    name: \"Name\",\r\n    \"native-mkb\": \"Native Mouse & Keyboard\",\r\n    new: \"New\",\r\n    \"new-version-available\": [\r\n      (e) => `Version ${e.version} available`,\r\n      (e) => `Versió ${e.version} disponible`,\r\n      ,\r\n      (e) => `Version ${e.version} verfügbar`,\r\n      (e) => `Versi ${e.version} tersedia`,\r\n      (e) => `Versión ${e.version} disponible`,\r\n      (e) => `Version ${e.version} disponible`,\r\n      (e) => `Disponibile la versione ${e.version}`,\r\n      (e) => `Ver ${e.version} が利用可能です`,\r\n      (e) => `${e.version} 버전 사용가능`,\r\n      (e) => `Dostępna jest nowa wersja ${e.version}`,\r\n      (e) => `Versão ${e.version} disponível`,\r\n      (e) => `Версия ${e.version} доступна`,\r\n      (e) => `เวอร์ชัน ${e.version} พร้อมใช้งานแล้ว`,\r\n      (e) => `${e.version} sayılı yeni sürüm mevcut`,\r\n      (e) => `Доступна версія ${e.version}`,\r\n      (e) => `Đã có phiên bản ${e.version}`,\r\n      (e) => `版本 ${e.version} 可供更新`,\r\n      (e) => `已可更新為 ${e.version} 版`,\r\n    ],\r\n    \"no-consoles-found\": \"No consoles found\",\r\n    \"no-controllers-connected\": \"No controllers connected\",\r\n    normal: \"Normal\",\r\n    notifications: \"Notifications\",\r\n    off: \"Off\",\r\n    official: \"Official\",\r\n    oled: \"OLED\",\r\n    on: \"On\",\r\n    \"only-supports-some-games\": \"Only supports some games\",\r\n    opacity: \"Opacity\",\r\n    other: \"Other\",\r\n    playing: \"Playing\",\r\n    playtime: \"Playtime\",\r\n    poland: \"Poland\",\r\n    \"polling-rate\": \"Polling rate\",\r\n    position: \"Position\",\r\n    \"powered-off\": \"Powered off\",\r\n    \"powered-on\": \"Powered on\",\r\n    \"prefer-ipv6-server\": \"Prefer IPv6 server\",\r\n    \"preferred-game-language\": \"Preferred game's language\",\r\n    preset: \"Preset\",\r\n    press: \"Press\",\r\n    \"press-any-button\": \"Press any button...\",\r\n    \"press-esc-to-cancel\": \"Press Esc to cancel\",\r\n    \"press-key-to-toggle-mkb\": [\r\n      (e) => `Press ${e.key} to toggle this feature`,\r\n      (e) => `Premeu ${e.key} per alternar aquesta funció`,\r\n      (e) => `Tryk på ${e.key} for at slå denne funktion til`,\r\n      (e) => `${e.key}: Funktion an-/ausschalten`,\r\n      (e) => `Tekan ${e.key} untuk mengaktifkan fitur ini`,\r\n      (e) => `Pulsa ${e.key} para alternar esta función`,\r\n      (e) => `Appuyez sur ${e.key} pour activer cette fonctionnalité`,\r\n      (e) => `Premi ${e.key} per attivare questa funzionalità`,\r\n      (e) => `${e.key} でこの機能を切替`,\r\n      (e) => `${e.key} 키를 눌러 이 기능을 켜고 끄세요`,\r\n      (e) => `Naciśnij ${e.key} aby przełączyć tę funkcję`,\r\n      (e) => `Pressione ${e.key} para alternar este recurso`,\r\n      (e) => `Нажмите ${e.key} для переключения этой функции`,\r\n      (e) => `กด ${e.key} เพื่อสลับคุณสมบัตินี้`,\r\n      (e) => `Etkinleştirmek için ${e.key} tuşuna basın`,\r\n      (e) => `Натисніть ${e.key} щоб перемкнути цю функцію`,\r\n      (e) => `Nhấn ${e.key} để bật/tắt tính năng này`,\r\n      (e) => `按下 ${e.key} 来切换此功能`,\r\n      (e) => `按下 ${e.key} 來啟用此功能`,\r\n    ],\r\n    \"press-to-bind\": \"Press a key or do a mouse click to bind...\",\r\n    \"prompt-preset-name\": \"Preset's name:\",\r\n    recommended: \"Recommended\",\r\n    \"recommended-settings-for-device\": [\r\n      (e) => `Recommended settings for ${e.device}`,\r\n      (e) => `Configuració recomanada per a ${e.device}`,\r\n      ,\r\n      (e) => `Empfohlene Einstellungen für ${e.device}`,\r\n      (e) => `Rekomendasi pengaturan untuk ${e.device}`,\r\n      (e) => `Ajustes recomendados para ${e.device}`,\r\n      (e) => `Paramètres recommandés pour ${e.device}`,\r\n      (e) => `Configurazioni consigliate per ${e.device}`,\r\n      (e) => `${e.device} の推奨設定`,\r\n      (e) => `다음 기기에서 권장되는 설정: ${e.device}`,\r\n      (e) => `Zalecane ustawienia dla ${e.device}`,\r\n      (e) => `Configurações recomendadas para ${e.device}`,\r\n      (e) => `Рекомендуемые настройки для ${e.device}`,\r\n      (e) => `การตั้งค่าที่แนะนำสำหรับ ${e.device}`,\r\n      (e) => `${e.device} için önerilen ayarlar`,\r\n      (e) => `Рекомендовані налаштування для ${e.device}`,\r\n      (e) => `Cấu hình được đề xuất cho ${e.device}`,\r\n      (e) => `${e.device} 的推荐设置`,\r\n      (e) => `${e.device} 推薦的設定`,\r\n    ],\r\n    \"reduce-animations\": \"Reduce UI animations\",\r\n    region: \"Region\",\r\n    \"reload-page\": \"Reload page\",\r\n    \"remote-play\": \"Remote Play\",\r\n    rename: \"Rename\",\r\n    renderer: \"Renderer\",\r\n    \"renderer-configuration\": \"Renderer configuration\",\r\n    \"reset-highlighted-setting\": \"Reset highlighted setting\",\r\n    \"right-click-to-unbind\": \"Right-click on a key to unbind it\",\r\n    \"right-stick\": \"Right stick\",\r\n    \"right-stick-deadzone\": \"Right stick deadzone\",\r\n    \"right-trigger-range\": \"Right trigger range\",\r\n    \"rocket-always-hide\": \"Always hide\",\r\n    \"rocket-always-show\": \"Always show\",\r\n    \"rocket-animation\": \"Rocket animation\",\r\n    \"rocket-hide-queue\": \"Hide when queuing\",\r\n    saturation: \"Saturation\",\r\n    save: \"Save\",\r\n    screen: \"Screen\",\r\n    \"screenshot-apply-filters\": \"Apply video filters to screenshots\",\r\n    \"section-all-games\": \"All games\",\r\n    \"section-genres\": \"Genres\",\r\n    \"section-leaving-soon\": \"Leaving soon\",\r\n    \"section-most-popular\": \"Most popular\",\r\n    \"section-native-mkb\": \"Play with mouse & keyboard\",\r\n    \"section-news\": \"News\",\r\n    \"section-play-with-friends\": \"Play with friends\",\r\n    \"section-recently-added\": \"Recently added\",\r\n    \"section-touch\": \"Play with touch\",\r\n    \"separate-touch-controller\": \"Separate Touch controller & Controller #1\",\r\n    \"separate-touch-controller-note\":\r\n      \"Touch controller is Player 1, Controller #1 is Player 2\",\r\n    server: \"Server\",\r\n    \"server-locations\": \"Server locations\",\r\n    settings: \"Settings\",\r\n    \"settings-for\": \"Settings for\",\r\n    \"settings-reload\": \"Reload page to reflect changes\",\r\n    \"settings-reload-note\":\r\n      \"Settings in this tab only go into effect on the next page load\",\r\n    \"settings-reloading\": \"Reloading...\",\r\n    sharpness: \"Sharpness\",\r\n    \"shortcut-keys\": \"Shortcut keys\",\r\n    show: \"Show\",\r\n    \"show-controller-connection-status\": \"Show controller connection status\",\r\n    \"show-game-art\": \"Show game art\",\r\n    \"show-hide\": \"Show/hide\",\r\n    \"show-stats-on-startup\": \"Show stats when starting the game\",\r\n    \"show-touch-controller\": \"Show touch controller\",\r\n    \"show-wait-time\": \"Show the estimated wait time\",\r\n    \"show-wait-time-in-game-card\": \"Show wait time in game card\",\r\n    \"simplify-stream-menu\": \"Simplify Stream's menu\",\r\n    \"skip-splash-video\": \"Skip Xbox splash video\",\r\n    slow: \"Slow\",\r\n    small: \"Small\",\r\n    \"smart-tv\": \"Smart TV\",\r\n    sound: \"Sound\",\r\n    standard: \"Standard\",\r\n    standby: \"Standby\",\r\n    \"stat-bitrate\": \"Bitrate\",\r\n    \"stat-decode-time\": \"Decode time\",\r\n    \"stat-fps\": \"FPS\",\r\n    \"stat-frames-lost\": \"Frames lost\",\r\n    \"stat-packets-lost\": \"Packets lost\",\r\n    \"stat-ping\": \"Ping\",\r\n    stats: \"Stats\",\r\n    \"stick-decay-minimum\": \"Stick decay minimum\",\r\n    \"stick-decay-strength\": \"Stick decay strength\",\r\n    stream: \"Stream\",\r\n    \"stream-settings\": \"Stream settings\",\r\n    \"stream-stats\": \"Stream stats\",\r\n    \"stream-your-own-game\": \"Stream your own game\",\r\n    stretch: \"Stretch\",\r\n    \"suggest-settings\": \"Suggest settings\",\r\n    \"suggest-settings-link\": \"Suggest recommended settings for this device\",\r\n    \"support-better-xcloud\": \"Support Better xCloud\",\r\n    \"swap-buttons\": \"Swap buttons\",\r\n    \"take-screenshot\": \"Take screenshot\",\r\n    \"target-resolution\": \"Target resolution\",\r\n    \"tc-all-white\": \"All white\",\r\n    \"tc-auto-off\": \"Off when controller found\",\r\n    \"tc-custom-layout-style\": \"Custom layout's button style\",\r\n    \"tc-muted-colors\": \"Muted colors\",\r\n    \"tc-standard-layout-style\": \"Standard layout's button style\",\r\n    \"text-size\": \"Text size\",\r\n    theme: \"Theme\",\r\n    toggle: \"Toggle\",\r\n    top: \"Top\",\r\n    \"top-center\": \"Top-center\",\r\n    \"top-half\": \"Top half\",\r\n    \"top-left\": \"Top-left\",\r\n    \"top-right\": \"Top-right\",\r\n    \"touch-control-layout\": \"Touch control layout\",\r\n    \"touch-control-layout-by\": [\r\n      (e) => `Touch control layout by ${e.name}`,\r\n      (e) => `Format del control tàctil per ${e.name}`,\r\n      (e) => `Touch-kontrol layout af ${e.name}`,\r\n      (e) => `Touch-Steuerungslayout von ${e.name}`,\r\n      (e) => `Tata letak Sentuhan layar oleh ${e.name}`,\r\n      (e) => `Disposición del control táctil por ${e.nombre}`,\r\n      (e) => `Disposition du contrôleur tactile par ${e.name}`,\r\n      (e) => `Configurazione dei comandi su schermo creata da ${e.name}`,\r\n      (e) => `タッチ操作レイアウト作成者: ${e.name}`,\r\n      (e) => `${e.name} 제작, 터치 컨트롤 레이아웃`,\r\n      (e) => `Układ sterowania dotykowego stworzony przez ${e.name}`,\r\n      (e) => `Disposição de controle por toque feito por ${e.name}`,\r\n      (e) => `Сенсорная раскладка по ${e.name}`,\r\n      (e) => `รูปแบบการควบคุมแบบสัมผัสโดย ${e.name}`,\r\n      (e) => `${e.name} kişisinin dokunmatik kontrolcü tuş şeması`,\r\n      (e) => `Розташування сенсорного керування від ${e.name}`,\r\n      (e) => `Bố cục điều khiển cảm ứng tạo bởi ${e.name}`,\r\n      (e) => `由 ${e.name} 提供的虚拟按键样式`,\r\n      (e) => `觸控遊玩佈局由 ${e.name} 提供`,\r\n    ],\r\n    \"touch-controller\": \"Touch controller\",\r\n    \"true-achievements\": \"TrueAchievements\",\r\n    ui: \"UI\",\r\n    \"unexpected-behavior\": \"May cause unexpected behavior\",\r\n    \"united-states\": \"United States\",\r\n    unknown: \"Unknown\",\r\n    unlimited: \"Unlimited\",\r\n    unmuted: \"Unmuted\",\r\n    unofficial: \"Unofficial\",\r\n    \"unofficial-game-list\": \"Unofficial game list\",\r\n    \"unsharp-masking\": \"Unsharp masking\",\r\n    upload: \"Upload\",\r\n    uploaded: \"Uploaded\",\r\n    \"use-mouse-absolute-position\": \"Use mouse's absolute position\",\r\n    \"use-this-at-your-own-risk\": \"Use this at your own risk\",\r\n    \"user-agent-profile\": \"User-Agent profile\",\r\n    \"vertical-scroll-sensitivity\": \"Vertical scroll sensitivity\",\r\n    \"vertical-sensitivity\": \"Vertical sensitivity\",\r\n    \"vibration-intensity\": \"Vibration intensity\",\r\n    \"vibration-status\": \"Vibration\",\r\n    video: \"Video\",\r\n    \"virtual-controller\": \"Virtual controller\",\r\n    \"virtual-controller-slot\": \"Virtual controller slot\",\r\n    \"visual-quality\": \"Visual quality\",\r\n    \"visual-quality-high\": \"High\",\r\n    \"visual-quality-low\": \"Low\",\r\n    \"visual-quality-normal\": \"Normal\",\r\n    volume: \"Volume\",\r\n    \"wait-time-countdown\": \"Countdown\",\r\n    \"wait-time-estimated\": \"Estimated finish time\",\r\n    \"waiting-for-input\": \"Waiting for input...\",\r\n    wallpaper: \"Wallpaper\",\r\n    webgl2: \"WebGL2\",\r\n    webgpu: \"WebGPU\",\r\n  };\r\nclass Translations {\r\n  static EN_US = \"en-US\";\r\n  static KEY_LOCALE = \"BetterXcloud.Locale\";\r\n  static KEY_TRANSLATIONS = \"BetterXcloud.Locale.Translations\";\r\n  static selectedLocaleIndex = -1;\r\n  static selectedLocale = \"en-US\";\r\n  static supportedLocales = Object.keys(SUPPORTED_LANGUAGES);\r\n  static foreignTranslations = {};\r\n  static enUsIndex = Translations.supportedLocales.indexOf(Translations.EN_US);\r\n  static async init() {\r\n    Translations.refreshLocale(), await Translations.loadTranslations();\r\n  }\r\n  static refreshLocale(newLocale) {\r\n    let locale;\r\n    if (newLocale)\r\n      localStorage.setItem(Translations.KEY_LOCALE, newLocale),\r\n        (locale = newLocale);\r\n    else locale = localStorage.getItem(Translations.KEY_LOCALE);\r\n    let supportedLocales = Translations.supportedLocales;\r\n    if (!locale) {\r\n      if (\r\n        ((locale = window.navigator.language || Translations.EN_US),\r\n        supportedLocales.indexOf(locale) === -1)\r\n      )\r\n        locale = Translations.EN_US;\r\n      localStorage.setItem(Translations.KEY_LOCALE, locale);\r\n    }\r\n    (Translations.selectedLocale = locale),\r\n      (Translations.selectedLocaleIndex = supportedLocales.indexOf(locale));\r\n  }\r\n  static get(key, values) {\r\n    let text = null;\r\n    if (\r\n      Translations.foreignTranslations &&\r\n      Translations.selectedLocale !== Translations.EN_US\r\n    )\r\n      text = Translations.foreignTranslations[key];\r\n    if (!text) text = Texts[key] || alert(`Missing translation key: ${key}`);\r\n    let translation;\r\n    if (Array.isArray(text))\r\n      return (\r\n        (translation =\r\n          text[Translations.selectedLocaleIndex] ||\r\n          text[Translations.enUsIndex]),\r\n        translation(values)\r\n      );\r\n    return (translation = text), translation;\r\n  }\r\n  static async loadTranslations() {\r\n    if (Translations.selectedLocale === Translations.EN_US) return;\r\n    try {\r\n      Translations.foreignTranslations = JSON.parse(\r\n        window.localStorage.getItem(Translations.KEY_TRANSLATIONS)\r\n      );\r\n    } catch (e) {}\r\n    if (!Translations.foreignTranslations)\r\n      await this.downloadTranslations(Translations.selectedLocale);\r\n  }\r\n  static async updateTranslations(async = !1) {\r\n    if (Translations.selectedLocale === Translations.EN_US) {\r\n      localStorage.removeItem(Translations.KEY_TRANSLATIONS);\r\n      return;\r\n    }\r\n    if (async)\r\n      Translations.downloadTranslationsAsync(Translations.selectedLocale);\r\n    else await Translations.downloadTranslations(Translations.selectedLocale);\r\n  }\r\n  static async downloadTranslations(locale) {\r\n    try {\r\n      let translations = await (\r\n        await NATIVE_FETCH(GhPagesUtils.getUrl(`translations/${locale}.json`))\r\n      ).json();\r\n      if (localStorage.getItem(Translations.KEY_LOCALE) === locale)\r\n        window.localStorage.setItem(\r\n          Translations.KEY_TRANSLATIONS,\r\n          JSON.stringify(translations)\r\n        ),\r\n          (Translations.foreignTranslations = translations);\r\n      return !0;\r\n    } catch (e) {\r\n      debugger;\r\n    }\r\n    return !1;\r\n  }\r\n  static downloadTranslationsAsync(locale) {\r\n    NATIVE_FETCH(GhPagesUtils.getUrl(`translations/${locale}.json`))\r\n      .then((resp) => resp.json())\r\n      .then((translations) => {\r\n        window.localStorage.setItem(\r\n          Translations.KEY_TRANSLATIONS,\r\n          JSON.stringify(translations)\r\n        ),\r\n          (Translations.foreignTranslations = translations);\r\n      });\r\n  }\r\n  static switchLocale(locale) {\r\n    localStorage.setItem(Translations.KEY_LOCALE, locale);\r\n  }\r\n}\r\nvar t = Translations.get;\r\nTranslations.init();\r\nclass NavigationUtils {\r\n  static setNearby($elm, nearby) {\r\n    $elm.nearby = $elm.nearby || {};\r\n    let key;\r\n    for (key in nearby) $elm.nearby[key] = nearby[key];\r\n  }\r\n}\r\nvar setNearby = NavigationUtils.setNearby;\r\nvar ButtonStyleClass = {\r\n  1: \"bx-primary\",\r\n  2: \"bx-warning\",\r\n  4: \"bx-danger\",\r\n  8: \"bx-ghost\",\r\n  16: \"bx-frosted\",\r\n  32: \"bx-drop-shadow\",\r\n  64: \"bx-focusable\",\r\n  128: \"bx-full-width\",\r\n  256: \"bx-full-height\",\r\n  512: \"bx-auto-height\",\r\n  1024: \"bx-tall\",\r\n  2048: \"bx-circular\",\r\n  4096: \"bx-normal-case\",\r\n  8192: \"bx-normal-link\",\r\n};\r\nfunction createElement(elmName, props, ..._) {\r\n  let $elm,\r\n    hasNs = props && \"xmlns\" in props;\r\n  if (hasNs)\r\n    ($elm = document.createElementNS(props.xmlns, elmName)), delete props.xmlns;\r\n  else $elm = document.createElement(elmName);\r\n  if (props) {\r\n    if (props._nearby) setNearby($elm, props._nearby), delete props._nearby;\r\n    if (props._on) {\r\n      for (let name in props._on) $elm.addEventListener(name, props._on[name]);\r\n      delete props._on;\r\n    }\r\n    if (props._dataset) {\r\n      for (let name in props._dataset)\r\n        $elm.dataset[name] = props._dataset[name];\r\n      delete props._dataset;\r\n    }\r\n    for (let key in props) {\r\n      if ($elm.hasOwnProperty(key)) continue;\r\n      let value = props[key];\r\n      if (hasNs) $elm.setAttributeNS(null, key, value);\r\n      else $elm.setAttribute(key, value);\r\n    }\r\n  }\r\n  for (let i = 2, size = arguments.length; i < size; i++) {\r\n    let arg = arguments[i];\r\n    if (arg !== null && arg !== !1 && typeof arg !== \"undefined\")\r\n      $elm.append(arg);\r\n  }\r\n  return $elm;\r\n}\r\nvar domParser = new DOMParser();\r\nfunction createSvgIcon(icon) {\r\n  return domParser.parseFromString(icon, \"image/svg+xml\").documentElement;\r\n}\r\nvar ButtonStyleIndices = Object.keys(ButtonStyleClass).map((i) => parseInt(i));\r\nfunction createButton(options) {\r\n  let $btn;\r\n  if (options.url)\r\n    $btn = CE(\"a\", { class: \"bx-button\", href: options.url, target: \"_blank\" });\r\n  else\r\n    ($btn = CE(\"button\", { class: \"bx-button\", type: \"button\" })),\r\n      options.disabled && ($btn.disabled = !0);\r\n  let style = options.style || 0;\r\n  if (style) {\r\n    let index;\r\n    for (index of ButtonStyleIndices)\r\n      style & index && $btn.classList.add(ButtonStyleClass[index]);\r\n  }\r\n  if (\r\n    (options.classes && $btn.classList.add(...options.classes),\r\n    options.icon && $btn.appendChild(createSvgIcon(options.icon)),\r\n    options.label && $btn.appendChild(CE(\"span\", !1, options.label)),\r\n    options.title && $btn.setAttribute(\"title\", options.title),\r\n    options.onClick && $btn.addEventListener(\"click\", options.onClick),\r\n    ($btn.tabIndex =\r\n      typeof options.tabIndex === \"number\" ? options.tabIndex : 0),\r\n    options.secondaryText)\r\n  )\r\n    $btn.classList.add(\"bx-button-multi-lines\"),\r\n      $btn.appendChild(CE(\"span\", !1, options.secondaryText));\r\n  for (let key in options.attributes)\r\n    if (!$btn.hasOwnProperty(key))\r\n      $btn.setAttribute(key, options.attributes[key]);\r\n  return $btn;\r\n}\r\nfunction createSettingRow(label, $control, options = {}) {\r\n  let $label,\r\n    $row = CE(\r\n      \"label\",\r\n      { class: \"bx-settings-row\" },\r\n      ($label = CE(\r\n        \"span\",\r\n        { class: \"bx-settings-label\" },\r\n        options.icon && createSvgIcon(options.icon),\r\n        label,\r\n        options.$note\r\n      )),\r\n      $control\r\n    );\r\n  if (options.pref) $row.prefKey = options.pref;\r\n  if (options.onContextMenu)\r\n    $row.addEventListener(\"contextmenu\", options.onContextMenu);\r\n  let $link = $label.querySelector(\"a\");\r\n  if ($link)\r\n    $link.classList.add(\"bx-focusable\"), setNearby($label, { focus: $link });\r\n  if (\r\n    (setNearby($row, {\r\n      orientation: options.multiLines ? \"vertical\" : \"horizontal\",\r\n    }),\r\n    options.multiLines)\r\n  )\r\n    $row.dataset.multiLines = \"true\";\r\n  if ($control instanceof HTMLElement && $control.id)\r\n    $row.htmlFor = $control.id;\r\n  return $row;\r\n}\r\nfunction getReactProps($elm) {\r\n  for (let key in $elm) if (key.startsWith(\"__reactProps\")) return $elm[key];\r\n  return null;\r\n}\r\nfunction escapeHtml(html) {\r\n  let text = document.createTextNode(html),\r\n    $span = document.createElement(\"span\");\r\n  return $span.appendChild(text), $span.innerHTML;\r\n}\r\nfunction isElementVisible($elm) {\r\n  let rect = $elm.getBoundingClientRect();\r\n  return (rect.x >= 0 || rect.y >= 0) && !!rect.width && !!rect.height;\r\n}\r\nfunction removeChildElements($parent) {\r\n  if (\r\n    $parent instanceof HTMLDivElement &&\r\n    $parent.classList.contains(\"bx-select\")\r\n  )\r\n    $parent = $parent.querySelector(\"select\");\r\n  while ($parent.firstElementChild) $parent.firstElementChild.remove();\r\n}\r\nfunction clearDataSet($elm) {\r\n  Object.keys($elm.dataset).forEach((key) => {\r\n    delete $elm.dataset[key];\r\n  });\r\n}\r\nfunction renderPresetsList($select, allPresets, selectedValue, options = {}) {\r\n  if ((removeChildElements($select), options.addOffValue)) {\r\n    let $option = CE(\"option\", { value: 0 }, t(\"off\"));\r\n    ($option.selected = selectedValue === 0), $select.appendChild($option);\r\n  }\r\n  let groups = { default: t(\"default\") + \" 🔒\", custom: t(\"custom\") },\r\n    key;\r\n  for (key in groups) {\r\n    let $optGroup = CE(\"optgroup\", { label: groups[key] });\r\n    for (let id of allPresets[key]) {\r\n      let record = allPresets.data[id],\r\n        selected = selectedValue === record.id,\r\n        name =\r\n          options.selectedIndicator && selected\r\n            ? \"✅ \" + record.name\r\n            : record.name,\r\n        $option = CE(\"option\", { value: record.id }, name);\r\n      if (selected) $option.selected = !0;\r\n      $optGroup.appendChild($option);\r\n    }\r\n    if ($optGroup.hasChildNodes()) $select.appendChild($optGroup);\r\n  }\r\n}\r\nfunction calculateSelectBoxes($root) {\r\n  let selects = Array.from(\r\n    $root.querySelectorAll(\"div.bx-select:not([data-calculated]) select\")\r\n  );\r\n  for (let $select of selects) {\r\n    let $parent = $select.parentElement;\r\n    if ($parent.classList.contains(\"bx-full-width\")) {\r\n      $parent.dataset.calculated = \"true\";\r\n      continue;\r\n    }\r\n    let rect = $select.getBoundingClientRect(),\r\n      $label,\r\n      width = Math.ceil(rect.width);\r\n    if (!width) continue;\r\n    if (\r\n      (($label = $parent.querySelector(\r\n        $select.multiple ? \".bx-select-value\" : \"div\"\r\n      )),\r\n      $parent.isControllerFriendly)\r\n    ) {\r\n      if ($select.multiple) width += 20;\r\n      if ($select.querySelector(\"optgroup\")) width -= 15;\r\n    } else width += 10;\r\n    ($select.style.left = \"0\"),\r\n      ($label.style.minWidth = width + \"px\"),\r\n      ($parent.dataset.calculated = \"true\");\r\n  }\r\n}\r\nvar FILE_SIZE_UNITS = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\nfunction humanFileSize(size) {\r\n  let i = size == 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024));\r\n  return (size / Math.pow(1024, i)).toFixed(1) + \" \" + FILE_SIZE_UNITS[i];\r\n}\r\nfunction secondsToHm(seconds) {\r\n  let h = Math.floor(seconds / 3600),\r\n    m = Math.floor((seconds % 3600) / 60) + 1;\r\n  if (m === 60) (h += 1), (m = 0);\r\n  let output = [];\r\n  return (\r\n    h > 0 && output.push(`${h}h`),\r\n    m > 0 && output.push(`${m}m`),\r\n    output.join(\" \")\r\n  );\r\n}\r\nfunction escapeCssSelector(name) {\r\n  return name.replaceAll(\".\", \"-\");\r\n}\r\nvar CE = createElement;\r\nwindow.BX_CE = createElement;\r\nclass Toast {\r\n  static instance;\r\n  static getInstance = () => Toast.instance ?? (Toast.instance = new Toast());\r\n  LOG_TAG = \"Toast\";\r\n  $wrapper;\r\n  $msg;\r\n  $status;\r\n  stack = [];\r\n  isShowing = !1;\r\n  timeoutId;\r\n  DURATION = 3000;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.$wrapper = CE(\r\n        \"div\",\r\n        { class: \"bx-toast bx-offscreen\" },\r\n        (this.$msg = CE(\"span\", { class: \"bx-toast-msg\" })),\r\n        (this.$status = CE(\"span\", { class: \"bx-toast-status\" }))\r\n      )),\r\n      this.$wrapper.addEventListener(\"transitionend\", (e) => {\r\n        let classList = this.$wrapper.classList;\r\n        if (classList.contains(\"bx-hide\"))\r\n          classList.remove(\"bx-offscreen\", \"bx-hide\"),\r\n            classList.add(\"bx-offscreen\"),\r\n            this.showNext();\r\n      }),\r\n      document.documentElement.appendChild(this.$wrapper);\r\n  }\r\n  show(msg, status, options = {}) {\r\n    options = options || {};\r\n    let args = Array.from(arguments);\r\n    if (options.instant) (this.stack = [args]), this.showNext();\r\n    else this.stack.push(args), !this.isShowing && this.showNext();\r\n  }\r\n  showNext() {\r\n    if (!this.stack.length) {\r\n      this.isShowing = !1;\r\n      return;\r\n    }\r\n    (this.isShowing = !0),\r\n      this.timeoutId && clearTimeout(this.timeoutId),\r\n      (this.timeoutId = window.setTimeout(this.hide, this.DURATION));\r\n    let [msg, status, options] = this.stack.shift();\r\n    if (options && options.html) this.$msg.innerHTML = msg;\r\n    else this.$msg.textContent = msg;\r\n    if (status)\r\n      this.$status.classList.remove(\"bx-gone\"),\r\n        (this.$status.textContent = status);\r\n    else this.$status.classList.add(\"bx-gone\");\r\n    let classList = this.$wrapper.classList;\r\n    classList.remove(\"bx-offscreen\", \"bx-hide\"), classList.add(\"bx-show\");\r\n  }\r\n  hide = () => {\r\n    this.timeoutId = null;\r\n    let classList = this.$wrapper.classList;\r\n    classList.remove(\"bx-show\"), classList.add(\"bx-hide\");\r\n  };\r\n  static show(msg, status, options = {}) {\r\n    Toast.getInstance().show(msg, status, options);\r\n  }\r\n  static showNext() {\r\n    Toast.getInstance().showNext();\r\n  }\r\n}\r\nclass MicrophoneShortcut {\r\n  static toggle(showToast = !0) {\r\n    if (!window.BX_EXPOSED.streamSession) return !1;\r\n    let enableMic =\r\n      window.BX_EXPOSED.streamSession._microphoneState === \"Enabled\" ? !1 : !0;\r\n    try {\r\n      return (\r\n        window.BX_EXPOSED.streamSession.tryEnableChatAsync(enableMic),\r\n        showToast &&\r\n          Toast.show(t(\"microphone\"), t(enableMic ? \"unmuted\" : \"muted\"), {\r\n            instant: !0,\r\n          }),\r\n        enableMic\r\n      );\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n    return !1;\r\n  }\r\n}\r\nclass LocalDb {\r\n  static instance;\r\n  static getInstance = () =>\r\n    LocalDb.instance ?? (LocalDb.instance = new LocalDb());\r\n  static DB_NAME = \"BetterXcloud\";\r\n  static DB_VERSION = 4;\r\n  static TABLE_VIRTUAL_CONTROLLERS = \"virtual_controllers\";\r\n  static TABLE_CONTROLLER_SHORTCUTS = \"controller_shortcuts\";\r\n  static TABLE_CONTROLLER_CUSTOMIZATIONS = \"controller_customizations\";\r\n  static TABLE_CONTROLLER_SETTINGS = \"controller_settings\";\r\n  static TABLE_KEYBOARD_SHORTCUTS = \"keyboard_shortcuts\";\r\n  db;\r\n  open() {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.db) {\r\n        resolve(this.db);\r\n        return;\r\n      }\r\n      let request = window.indexedDB.open(LocalDb.DB_NAME, LocalDb.DB_VERSION);\r\n      (request.onupgradeneeded = (e) => {\r\n        let db = e.target.result;\r\n        if (db.objectStoreNames.contains(\"undefined\"))\r\n          db.deleteObjectStore(\"undefined\");\r\n        if (!db.objectStoreNames.contains(LocalDb.TABLE_VIRTUAL_CONTROLLERS))\r\n          db.createObjectStore(LocalDb.TABLE_VIRTUAL_CONTROLLERS, {\r\n            keyPath: \"id\",\r\n            autoIncrement: !0,\r\n          });\r\n        if (!db.objectStoreNames.contains(LocalDb.TABLE_CONTROLLER_SHORTCUTS))\r\n          db.createObjectStore(LocalDb.TABLE_CONTROLLER_SHORTCUTS, {\r\n            keyPath: \"id\",\r\n            autoIncrement: !0,\r\n          });\r\n        if (!db.objectStoreNames.contains(LocalDb.TABLE_CONTROLLER_SETTINGS))\r\n          db.createObjectStore(LocalDb.TABLE_CONTROLLER_SETTINGS, {\r\n            keyPath: \"id\",\r\n          });\r\n        if (\r\n          !db.objectStoreNames.contains(LocalDb.TABLE_CONTROLLER_CUSTOMIZATIONS)\r\n        )\r\n          db.createObjectStore(LocalDb.TABLE_CONTROLLER_CUSTOMIZATIONS, {\r\n            keyPath: \"id\",\r\n            autoIncrement: !0,\r\n          });\r\n        if (!db.objectStoreNames.contains(LocalDb.TABLE_KEYBOARD_SHORTCUTS))\r\n          db.createObjectStore(LocalDb.TABLE_KEYBOARD_SHORTCUTS, {\r\n            keyPath: \"id\",\r\n            autoIncrement: !0,\r\n          });\r\n      }),\r\n        (request.onerror = (e) => {\r\n          console.log(e), alert(e.target.error.message), reject && reject();\r\n        }),\r\n        (request.onsuccess = (e) => {\r\n          (this.db = e.target.result), resolve(this.db);\r\n        });\r\n    });\r\n  }\r\n}\r\nvar BypassServers = {\r\n    br: t(\"brazil\"),\r\n    jp: t(\"japan\"),\r\n    kr: t(\"korea\"),\r\n    pl: t(\"poland\"),\r\n    us: t(\"united-states\"),\r\n  },\r\n  BypassServerIps = {\r\n    br: \"169.150.198.66\",\r\n    kr: \"121.125.60.151\",\r\n    jp: \"138.199.21.239\",\r\n    pl: \"45.134.212.66\",\r\n    us: \"143.244.47.65\",\r\n  };\r\nclass BaseSettingsStorage {\r\n  storage;\r\n  storageKey;\r\n  _settings;\r\n  definitions;\r\n  constructor(storageKey, definitions) {\r\n    (this.storage = window.localStorage), (this.storageKey = storageKey);\r\n    for (let [_, setting] of Object.entries(definitions)) {\r\n      if (typeof setting.requiredVariants === \"string\")\r\n        setting.requiredVariants = [setting.requiredVariants];\r\n      if (setting.ready)\r\n        setting.ready.call(this, setting), delete setting.ready;\r\n    }\r\n    (this.definitions = definitions), (this._settings = null);\r\n  }\r\n  get settings() {\r\n    if (this._settings) return this._settings;\r\n    let settings = JSON.parse(this.storage.getItem(this.storageKey) || \"{}\");\r\n    for (let key in settings)\r\n      settings[key] = this.validateValue(\"get\", key, settings[key]);\r\n    return (this._settings = settings), settings;\r\n  }\r\n  getDefinition(key) {\r\n    if (!this.definitions[key])\r\n      return alert(\"Request invalid definition: \" + key), {};\r\n    return this.definitions[key];\r\n  }\r\n  hasSetting(key) {\r\n    return key in this.settings;\r\n  }\r\n  getSetting(key, checkUnsupported = !0) {\r\n    let definition = this.definitions[key];\r\n    if (\r\n      definition.requiredVariants &&\r\n      !definition.requiredVariants.includes(SCRIPT_VARIANT)\r\n    )\r\n      return isPlainObject(definition.default)\r\n        ? deepClone(definition.default)\r\n        : definition.default;\r\n    if (checkUnsupported && definition.unsupported)\r\n      if (\"unsupportedValue\" in definition) return definition.unsupportedValue;\r\n      else\r\n        return isPlainObject(definition.default)\r\n          ? deepClone(definition.default)\r\n          : definition.default;\r\n    if (!(key in this.settings))\r\n      this.settings[key] = this.validateValue(\"get\", key, null);\r\n    return isPlainObject(this.settings[key])\r\n      ? deepClone(this.settings[key])\r\n      : this.settings[key];\r\n  }\r\n  setSetting(key, value, origin) {\r\n    if (\r\n      ((value = this.validateValue(\"set\", key, value)),\r\n      (this.settings[key] = this.validateValue(\"get\", key, value)),\r\n      this.saveSettings(),\r\n      origin === \"ui\")\r\n    )\r\n      if (isStreamPref(key))\r\n        BxEventBus.Stream.emit(\"setting.changed\", {\r\n          storageKey: this.storageKey,\r\n          settingKey: key,\r\n        });\r\n      else\r\n        BxEventBus.Script.emit(\"setting.changed\", {\r\n          storageKey: this.storageKey,\r\n          settingKey: key,\r\n        });\r\n    return value;\r\n  }\r\n  saveSettings() {\r\n    this.storage.setItem(this.storageKey, JSON.stringify(this.settings));\r\n  }\r\n  validateValue(action, key, value) {\r\n    let def = this.definitions[key];\r\n    if (!def) return value;\r\n    if (typeof value === \"undefined\" || value === null) value = def.default;\r\n    if (def.transformValue && action === \"get\")\r\n      value = def.transformValue.get.call(def, value);\r\n    if (\"min\" in def) value = Math.max(def.min, value);\r\n    if (\"max\" in def) value = Math.min(def.max, value);\r\n    if (\"options\" in def) {\r\n      if (!(value in def.options)) value = def.default;\r\n    } else if (\"multipleOptions\" in def) {\r\n      if (value.length) {\r\n        let validOptions = Object.keys(def.multipleOptions);\r\n        value.forEach((item2, idx) => {\r\n          validOptions.indexOf(item2) === -1 && value.splice(idx, 1);\r\n        });\r\n      }\r\n      if (!value.length) value = def.default;\r\n    }\r\n    if (def.transformValue && action === \"set\")\r\n      value = def.transformValue.set.call(def, value);\r\n    return value;\r\n  }\r\n  getLabel(key) {\r\n    return this.definitions[key].label || key;\r\n  }\r\n  getValueText(key, value) {\r\n    let definition = this.definitions[key];\r\n    if (\"min\" in definition) {\r\n      let params = definition.params;\r\n      if (params.customTextValue) {\r\n        if (definition.transformValue)\r\n          value = definition.transformValue.get.call(definition, value);\r\n        let text = params.customTextValue(\r\n          value,\r\n          definition.min,\r\n          definition.max\r\n        );\r\n        if (text) return text;\r\n      }\r\n      return value.toString();\r\n    } else if (\"options\" in definition) {\r\n      let options = definition.options;\r\n      if (value in options) return options[value];\r\n    } else if (typeof value === \"boolean\") return value ? t(\"on\") : t(\"off\");\r\n    return value.toString();\r\n  }\r\n  deleteSetting(pref) {\r\n    if (this.hasSetting(pref))\r\n      return delete this.settings[pref], this.saveSettings(), !0;\r\n    return !1;\r\n  }\r\n}\r\nvar BxIcon = {\r\n  BETTER_XCLOUD:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='none' fill-rule='evenodd' viewBox='0 0 32 32'><clipPath id='svg-bx-logo'><path d='M0 0h32v32H0z'/></clipPath><g clip-path='url(#svg-bx-logo)'><path d='M19.959 18.286l3.959 2.285-3.959 2.286V32L16 29.714v-9.143l3.959-2.285zM16 16V6.857l3.959-2.286 3.959 2.286-3.959 2.286v9.143L16 16zm-3.959-2.286L16 16l-3.959 2.286v9.143l-3.959-2.286V16l3.959-2.286zM8.082 2.286L12.041 0 16 2.286l-3.959 2.285v9.143l-3.959-2.285V2.286zm8.846 19.535c-.171-.098-.309-.018-.309.179s.138.437.309.536.309.018.309-.179-.138-.437-.309-.536zm0-13.714c-.171-.098-.309-.018-.309.179s.138.437.309.535.309.019.309-.178-.138-.437-.309-.536zM9.01 17.25c-.171-.099-.309-.019-.309.179s.138.437.309.535.309.019.309-.178-.138-.437-.309-.536zm0-13.714c-.171-.099-.309-.019-.309.178s.138.437.309.536.309.019.309-.179-.138-.437-.309-.535z' fill='#fff'/></g></svg>\",\r\n  TRUE_ACHIEVEMENTS:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' stroke='nons' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M2.497 14.127c.781-6.01 5.542-10.849 11.551-11.708V0C6.634.858.858 6.712 0 14.127h2.497zM17.952 2.419V0C25.366.858 31.142 6.712 32 14.127h-2.497c-.781-6.01-5.542-10.849-11.551-11.708zM2.497 17.873c.781 6.01 5.542 10.849 11.551 11.708V32C6.634 31.142.858 25.288 0 17.873h2.497zm27.006 0H32C31.142 25.288 25.366 31.142 17.952 32v-2.419c6.009-.859 10.77-5.698 11.551-11.708zm-19.2-4.527h2.028a.702.702 0 1 0 0-1.404h-2.107a1.37 1.37 0 0 1-1.326-1.327V9.21a.7.7 0 0 0-.703-.703c-.387 0-.703.316-.703.7v1.408c.079 1.483 1.25 2.731 2.811 2.731zm2.809 7.337h-2.888a1.37 1.37 0 0 1-1.326-1.327v-4.917c0-.387-.316-.703-.7-.703a.7.7 0 0 0-.706.703v4.917a2.77 2.77 0 0 0 2.732 2.732h2.81c.387 0 .702-.316.702-.7.078-.393-.234-.705-.624-.705zM25.6 19.2a.7.7 0 0 0-.702-.702c-.387 0-.703.316-.703.699v.081c0 .702-.546 1.326-1.248 1.326H19.98c-.702-.078-1.248-.624-1.248-1.326v-.312c0-.78.624-1.327 1.326-1.327h2.811a2.77 2.77 0 0 0 2.731-2.732v-.312a2.68 2.68 0 0 0-2.576-2.732h-4.76a.702.702 0 1 0 0 1.405h4.526a1.37 1.37 0 0 1 1.327 1.327v.234c0 .781-.624 1.327-1.327 1.327h-2.81a2.77 2.77 0 0 0-2.731 2.732v.312a2.77 2.77 0 0 0 2.731 2.732h2.967a2.74 2.74 0 0 0 2.575-2.732s.078.078.078 0z'/></svg>\",\r\n  STREAM_SETTINGS:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><g transform='matrix(.142357 0 0 .142357 -2.22021 -2.22164)' fill='none' stroke='#fff' stroke-width='16'><circle cx='128' cy='128' r='40'/><path d='M130.05 206.11h-4L94 224c-12.477-4.197-24.049-10.711-34.11-19.2l-.12-36c-.71-1.12-1.38-2.25-2-3.41L25.9 147.24a99.16 99.16 0 0 1 0-38.46l31.84-18.1c.65-1.15 1.32-2.29 2-3.41l.16-36C69.951 42.757 81.521 36.218 94 32l32 17.89h4L162 32c12.477 4.197 24.049 10.711 34.11 19.2l.12 36c.71 1.12 1.38 2.25 2 3.41l31.85 18.14a99.16 99.16 0 0 1 0 38.46l-31.84 18.1c-.65 1.15-1.32 2.29-2 3.41l-.16 36A104.59 104.59 0 0 1 162 224l-31.95-17.89z'/></g></svg>\",\r\n  STREAM_STATS:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M1.181 24.55v-3.259c0-8.19 6.576-14.952 14.767-14.98H16c8.13 0 14.819 6.69 14.819 14.819v3.42c0 .625-.515 1.14-1.14 1.14H2.321c-.625 0-1.14-.515-1.14-1.14z'/><path d='M16 6.311v4.56M12.58 25.69l9.12-12.54m4.559 5.7h4.386m-29.266 0H5.74'/></svg>\",\r\n  CLOSE:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M29.928,2.072L2.072,29.928'/><path d='M29.928,29.928L2.072,2.072'/></svg>\",\r\n  CONTROLLER:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M19.193 12.807h3.193m-13.836 0h4.257'/><path d='M10.678 10.678v4.257'/><path d='M13.061 19.193l-5.602 6.359c-.698.698-1.646 1.09-2.633 1.09-2.044 0-3.725-1.682-3.725-3.725a3.73 3.73 0 0 1 .056-.646l2.177-11.194a6.94 6.94 0 0 1 6.799-5.721h11.722c3.795 0 6.918 3.123 6.918 6.918s-3.123 6.918-6.918 6.918h-8.793z'/><path d='M18.939 19.193l5.602 6.359c.698.698 1.646 1.09 2.633 1.09 2.044 0 3.725-1.682 3.725-3.725a3.73 3.73 0 0 0-.056-.646l-2.177-11.194'/></svg>\",\r\n  CREATE_SHORTCUT:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M13.253 3.639c0-.758-.615-1.373-1.373-1.373H3.639c-.758 0-1.373.615-1.373 1.373v8.241c0 .758.615 1.373 1.373 1.373h8.241c.758 0 1.373-.615 1.373-1.373V3.639zm0 16.481c0-.758-.615-1.373-1.373-1.373H3.639c-.758 0-1.373.615-1.373 1.373v8.241c0 .758.615 1.373 1.373 1.373h8.241c.758 0 1.373-.615 1.373-1.373V20.12zm16.481 0c0-.758-.615-1.373-1.373-1.373H20.12c-.758 0-1.373.615-1.373 1.373v8.241c0 .758.615 1.373 1.373 1.373h8.241c.758 0 1.373-.615 1.373-1.373V20.12zM19.262 7.76h9.957'/><path d='M24.24 2.781v9.957'/></svg>\",\r\n  DISPLAY:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M1.238 21.119c0 1.928 1.565 3.493 3.493 3.493H27.27c1.928 0 3.493-1.565 3.493-3.493V5.961c0-1.928-1.565-3.493-3.493-3.493H4.731c-1.928 0-3.493 1.565-3.493 3.493v15.158zm19.683 8.413H11.08'/></svg>\",\r\n  EYE: \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' stroke='none ' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><clipPath id='A'><path d='M0 0h32v32H0z'/></clipPath><g clip-path='url(#A)'><path d='M31.908 15.568c-.047-.105-1.176-2.611-3.687-5.121C24.876 7.101 20.651 5.333 16 5.333S7.124 7.101 3.779 10.447c-2.511 2.51-3.646 5.02-3.687 5.121-.123.276-.123.591 0 .867.047.105 1.176 2.609 3.687 5.12 3.345 3.344 7.57 5.112 12.221 5.112s8.876-1.768 12.221-5.112c2.511-2.511 3.64-5.015 3.687-5.12.123-.276.123-.591 0-.867zM16 24.533c-4.104 0-7.689-1.492-10.657-4.433-1.218-1.211-2.254-2.592-3.076-4.1.822-1.508 1.858-2.889 3.076-4.1C8.311 8.959 11.896 7.467 16 7.467s7.689 1.492 10.657 4.433c1.221 1.211 2.259 2.592 3.083 4.1-.961 1.795-5.149 8.533-13.74 8.533zM16 9.6c-3.511 0-6.4 2.889-6.4 6.4s2.889 6.4 6.4 6.4 6.4-2.889 6.4-6.4A6.44 6.44 0 0 0 16 9.6zm0 10.667A4.29 4.29 0 0 1 11.733 16 4.29 4.29 0 0 1 16 11.733 4.29 4.29 0 0 1 20.267 16 4.29 4.29 0 0 1 16 20.267z' fill-rule='nonzero'/></g></svg>\",\r\n  EYE_SLASH:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' stroke='none ' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><clipPath id='A'><path d='M0 0h32v32H0z'/></clipPath><g clip-path='url(#A)'><path d='M6.123 3.549a1.07 1.07 0 0 0-.798-.359c-.585 0-1.067.482-1.067 1.067 0 .27.102.53.286.727l2.565 2.823C2.267 10.779.184 15.36.092 15.568c-.123.276-.123.591 0 .867.047.105 1.176 2.609 3.687 5.12 3.345 3.344 7.57 5.112 12.221 5.112a16.97 16.97 0 0 0 6.943-1.444l2.933 3.228c.202.228.493.359.798.359.585 0 1.067-.482 1.067-1.067a1.07 1.07 0 0 0-.286-.727L6.123 3.549zm6.31 10.112l5.556 6.114c-.612.322-1.294.49-1.986.49a4.29 4.29 0 0 1-4.267-4.266c0-.831.242-1.643.697-2.338zM16 24.533c-4.104 0-7.689-1.492-10.657-4.433A17.73 17.73 0 0 1 2.267 16c.625-1.172 2.621-4.452 6.313-6.584l2.4 2.633c-.878 1.125-1.356 2.512-1.356 3.939 0 3.511 2.89 6.4 6.4 6.4 1.221 0 2.416-.349 3.444-1.005l1.964 2.16a14.92 14.92 0 0 1-5.432.99zm.8-12.724a1.07 1.07 0 0 1-.867-1.048c0-.585.482-1.067 1.067-1.067a1.12 1.12 0 0 1 .2.019c2.784.54 4.896 2.863 5.169 5.686a1.07 1.07 0 0 1-.962 1.161c-.034.002-.067.002-.1 0a1.07 1.07 0 0 1-1.067-.968 4.29 4.29 0 0 0-3.44-3.783zm15.104 4.626c-.056.125-1.407 3.116-4.448 5.84a1.07 1.07 0 0 1-.724.283c-.585 0-1.067-.482-1.067-1.067a1.07 1.07 0 0 1 .368-.806A17.7 17.7 0 0 0 29.74 16a17.73 17.73 0 0 0-3.083-4.103C23.689 8.959 20.104 7.467 16 7.467a15.82 15.82 0 0 0-2.581.209 1.06 1.06 0 0 1-.186.016 1.07 1.07 0 0 1-1.067-1.066 1.07 1.07 0 0 1 .901-1.054A17.89 17.89 0 0 1 16 5.333c4.651 0 8.876 1.768 12.221 5.114 2.511 2.51 3.64 5.016 3.687 5.121.123.276.123.591 0 .867h-.004z' fill-rule='nonzero'/></g></svg>\",\r\n  HOME: \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M12.217 30.503V20.414h7.567v10.089h10.089V15.37a1.26 1.26 0 0 0-.369-.892L16.892 1.867a1.26 1.26 0 0 0-1.784 0L2.497 14.478a1.26 1.26 0 0 0-.369.892v15.133h10.089z'/></svg>\",\r\n  LOCAL_CO_OP:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 32 32' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round'><g><path d='M24.272 11.165h-3.294l-3.14 3.564c-.391.391-.922.611-1.476.611a2.1 2.1 0 0 1-2.087-2.088 2.09 2.09 0 0 1 .031-.362l1.22-6.274a3.89 3.89 0 0 1 3.81-3.206h6.57c1.834 0 3.439 1.573 3.833 3.295l1.205 6.185a2.09 2.09 0 0 1 .031.362 2.1 2.1 0 0 1-2.087 2.088c-.554 0-1.085-.22-1.476-.611l-3.14-3.564' fill='none' stroke='#fff' stroke-width='2'/><circle cx='22.625' cy='5.874' r='.879'/><path d='M11.022 24.415H7.728l-3.14 3.564c-.391.391-.922.611-1.476.611a2.1 2.1 0 0 1-2.087-2.088 2.09 2.09 0 0 1 .031-.362l1.22-6.274a3.89 3.89 0 0 1 3.81-3.206h6.57c1.834 0 3.439 1.573 3.833 3.295l1.205 6.185a2.09 2.09 0 0 1 .031.362 2.1 2.1 0 0 1-2.087 2.088c-.554 0-1.085-.22-1.476-.611l-3.14-3.564' fill='none' stroke='#fff' stroke-width='2'/><circle cx='9.375' cy='19.124' r='.879'/></g></svg>\",\r\n  NATIVE_MKB:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><g stroke-width='2.1'><path d='m15.817 6h-10.604c-2.215 0-4.013 1.798-4.013 4.013v12.213c0 2.215 1.798 4.013 4.013 4.013h11.21'/><path d='m5.698 20.617h1.124m-1.124-4.517h7.9m-7.881-4.5h7.9m-2.3 9h2.2'/></g><g stroke-width='2.13'><path d='m30.805 13.1c0-3.919-3.181-7.1-7.1-7.1s-7.1 3.181-7.1 7.1v6.4c0 3.919 3.182 7.1 7.1 7.1s7.1-3.181 7.1-7.1z'/><path d='m23.705 14.715v-4.753'/></g></svg>\",\r\n  NEW: \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='4' viewBox='0 0 32 32'><path d='M26.875 30.5H5.125c-.663 0-1.208-.545-1.208-1.208V2.708c0-.663.545-1.208 1.208-1.208h14.5l8.458 8.458v19.333c0 .663-.545 1.208-1.208 1.208z'/><path d='M19.625 1.5v8.458h8.458m-15.708 9.667h7.25'/><path d='M16 16v7.25'/></svg>\",\r\n  MANAGE:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' viewBox='0 0 32 32'><path d='M10.417 30.271H2.97a1.25 1.25 0 0 1-1.241-1.241v-6.933c.001-.329.131-.644.363-.877L21.223 2.09c.481-.481 1.273-.481 1.754 0l6.933 6.928a1.25 1.25 0 0 1 0 1.755L10.417 30.271z'/><path d='M29.032 30.271H10.417m6.205-23.58l8.687 8.687'/></svg>\",\r\n  COPY: \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='4' viewBox='0 0 32 32'><path d='M1.498 6.772h23.73v23.73H1.498zm5.274-5.274h23.73v23.73'/></svg>\",\r\n  TRASH:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='4' viewBox='0 0 32 32'><path d='M29.5 6.182h-27m9.818 7.363v9.818m7.364-9.818v9.818'/><path d='M27.045 6.182V29.5c0 .673-.554 1.227-1.227 1.227H6.182c-.673 0-1.227-.554-1.227-1.227V6.182m17.181 0V3.727a2.47 2.47 0 0 0-2.455-2.455h-7.364a2.47 2.47 0 0 0-2.455 2.455v2.455'/></svg>\",\r\n  CURSOR_TEXT:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='4' viewBox='0 0 32 32'><path d='M16 7.3a5.83 5.83 0 0 1 5.8-5.8h2.9m0 29h-2.9a5.83 5.83 0 0 1-5.8-5.8'/><path d='M7.3 30.5h2.9a5.83 5.83 0 0 0 5.8-5.8V7.3a5.83 5.83 0 0 0-5.8-5.8H7.3'/><path d='M11.65 16h8.7'/></svg>\",\r\n  POWER:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M16 2.445v12.91m7.746-11.619C27.631 6.27 30.2 10.37 30.2 15.355c0 7.79-6.41 14.2-14.2 14.2s-14.2-6.41-14.2-14.2c0-4.985 2.569-9.085 6.454-11.619'/></svg>\",\r\n  QUESTION:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='4' viewBox='0 0 32 32'><g transform='matrix(.256867 0 0 .256867 -16.878964 -18.049342)'><circle cx='128' cy='180' r='12' fill='#fff'/><path d='M128 144v-8c17.67 0 32-12.54 32-28s-14.33-28-32-28-32 12.54-32 28v4' fill='none' stroke='#fff' stroke-width='16'/></g></svg>\",\r\n  REFRESH:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M23.247 12.377h7.247V5.13'/><path d='M23.911 25.663a13.29 13.29 0 0 1-9.119 3.623C7.504 29.286 1.506 23.289 1.506 16S7.504 2.713 14.792 2.713a13.29 13.29 0 0 1 9.395 3.891l6.307 5.772'/></svg>\",\r\n  REMOTE_PLAY:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='4' viewBox='0 0 32 32'><g transform='matrix(.492308 0 0 .581818 -14.7692 -11.6364)'><clipPath id='A'><path d='M30 20h65v55H30z'/></clipPath><g clip-path='url(#A)'><g transform='matrix(.395211 0 0 .334409 11.913 7.01124)'><g transform='matrix(.555556 0 0 .555556 57.8889 -20.2417)' fill='none' stroke='#fff' stroke-width='13.88'><path d='M200 140.564c-42.045-33.285-101.955-33.285-144 0M168 165c-23.783-17.3-56.217-17.3-80 0'/></g><g transform='matrix(-.555556 0 0 -.555556 200.111 262.393)'><g transform='matrix(1 0 0 1 0 11.5642)'><path d='M200 129c-17.342-13.728-37.723-21.795-58.636-24.198C111.574 101.378 80.703 109.444 56 129' fill='none' stroke='#fff' stroke-width='13.88'/></g><path d='M168 165c-23.783-17.3-56.217-17.3-80 0' fill='none' stroke='#fff' stroke-width='13.88'/></g><g transform='matrix(.75 0 0 .75 32 32)'><path d='M24 72h208v93.881H24z' fill='none' stroke='#fff' stroke-linejoin='miter' stroke-width='9.485'/><circle cx='188' cy='128' r='12' stroke-width='10' transform='matrix(.708333 0 0 .708333 71.8333 12.8333)'/><path d='M24.358 103.5h110' fill='none' stroke='#fff' stroke-linecap='butt' stroke-width='10.282'/></g></g></g></g></svg>\",\r\n  CARET_LEFT:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' width='100%' stroke='#fff' fill='#fff' height='100%' viewBox='0 0 32 32' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'><path d='M6.755 1.924l-6 13.649c-.119.27-.119.578 0 .849l6 13.649c.234.533.857.775 1.389.541s.775-.857.541-1.389L2.871 15.997 8.685 2.773c.234-.533-.008-1.155-.541-1.389s-1.155.008-1.389.541z'/></svg>\",\r\n  CARET_RIGHT:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' width='100%' stroke='#fff' fill='#fff' height='100%' viewBox='0 0 32 32' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'><path d='M2.685 1.924l6 13.649c.119.27.119.578 0 .849l-6 13.649c-.234.533-.857.775-1.389.541s-.775-.857-.541-1.389l5.813-13.225L.755 2.773c-.234-.533.008-1.155.541-1.389s1.155.008 1.389.541z'/></svg>\",\r\n  SCREENSHOT:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><g transform='matrix(.150985 0 0 .150985 -3.32603 -2.72209)' fill='none' stroke='#fff' stroke-width='16'><path d='M208 208H48c-8.777 0-16-7.223-16-16V80c0-8.777 7.223-16 16-16h32l16-24h64l16 24h32c8.777 0 16 7.223 16 16v112c0 8.777-7.223 16-16 16z'/><circle cx='128' cy='132' r='36'/></g></svg>\",\r\n  SPEAKER_MUTED:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' stroke='none' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M5.462 3.4c-.205-.23-.499-.363-.808-.363-.592 0-1.079.488-1.079 1.08a1.08 1.08 0 0 0 .289.736l4.247 4.672H2.504a2.17 2.17 0 0 0-2.16 2.16v8.637a2.17 2.17 0 0 0 2.16 2.16h6.107l9.426 7.33a1.08 1.08 0 0 0 .662.227c.592 0 1.08-.487 1.08-1.079v-6.601l5.679 6.247a1.08 1.08 0 0 0 .808.363c.592 0 1.08-.487 1.08-1.079a1.08 1.08 0 0 0-.29-.736L5.462 3.4zm-2.958 8.285h5.398v8.637H2.504v-8.637zM17.62 26.752l-7.558-5.878V11.67l7.558 8.313v6.769zm5.668-8.607c1.072-1.218 1.072-3.063 0-4.281a1.08 1.08 0 0 1-.293-.74c0-.592.487-1.079 1.079-1.079a1.08 1.08 0 0 1 .834.393 5.42 5.42 0 0 1 0 7.137 1.08 1.08 0 0 1-.81.365c-.593 0-1.08-.488-1.08-1.08 0-.263.096-.517.27-.715zM12.469 7.888c-.147-.19-.228-.423-.228-.663a1.08 1.08 0 0 1 .417-.853l5.379-4.184a1.08 1.08 0 0 1 .662-.227c.593 0 1.08.488 1.08 1.08v10.105c0 .593-.487 1.08-1.08 1.08s-1.079-.487-1.079-1.08V5.255l-3.636 2.834c-.469.362-1.153.273-1.515-.196v-.005zm19.187 8.115a10.79 10.79 0 0 1-2.749 7.199 1.08 1.08 0 0 1-.793.347c-.593 0-1.08-.487-1.08-1.079 0-.26.094-.511.264-.708 2.918-3.262 2.918-8.253 0-11.516-.184-.2-.287-.461-.287-.733 0-.592.487-1.08 1.08-1.08a1.08 1.08 0 0 1 .816.373 10.78 10.78 0 0 1 2.749 7.197z' fill-rule='nonzero'/></svg>\",\r\n  TOUCH_CONTROL_ENABLE:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' viewBox='0 0 32 32' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'><path d='M30.021 9.448a.89.89 0 0 0-.889-.889H2.909a.89.89 0 0 0-.889.889v13.146a.89.89 0 0 0 .889.888h26.223a.89.89 0 0 0 .889-.888V9.448z' fill='none' stroke='#fff' stroke-width='2.083'/><path d='M8.147 11.981l-.053-.001-.054.001c-.55.028-.988.483-.988 1.04v6c0 .575.467 1.042 1.042 1.042l.053-.001c.55-.028.988-.484.988-1.04v-6a1.04 1.04 0 0 0-.988-1.04z'/><path d='M11.147 14.981l-.054-.001h-6a1.04 1.04 0 1 0 0 2.083h6c.575 0 1.042-.467 1.042-1.042a1.04 1.04 0 0 0-.988-1.04z'/><circle cx='25.345' cy='18.582' r='2.561' fill='none' stroke='#fff' stroke-width='1.78' transform='matrix(1.17131 0 0 1.17131 -5.74235 -5.74456)'/></svg>\",\r\n  TOUCH_CONTROL_DISABLE:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' viewBox='0 0 32 32' fill-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'><g fill='none' stroke='#fff'><path d='M6.021 5.021l20 22' stroke-width='2'/><path d='M8.735 8.559H2.909a.89.89 0 0 0-.889.889v13.146a.89.89 0 0 0 .889.888h19.34m4.289 0h2.594a.89.89 0 0 0 .889-.888V9.448a.89.89 0 0 0-.889-.889H12.971' stroke-miterlimit='1.5' stroke-width='2.083'/></g><path d='M8.147 11.981l-.053-.001-.054.001c-.55.028-.988.483-.988 1.04v6c0 .575.467 1.042 1.042 1.042l.053-.001c.55-.028.988-.484.988-1.04v-6a1.04 1.04 0 0 0-.988-1.04z'/><path d='M11.147 14.981l-.054-.001h-6a1.04 1.04 0 1 0 0 2.083h6c.575 0 1.042-.467 1.042-1.042a1.04 1.04 0 0 0-.988-1.04z'/><circle cx='25.345' cy='18.582' r='2.561' fill='none' stroke='#fff' stroke-width='1.78' transform='matrix(1.17131 0 0 1.17131 -5.74235 -5.74456)'/></svg>\",\r\n  MICROPHONE:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M21.368 6.875A5.37 5.37 0 0 0 16 1.507a5.37 5.37 0 0 0-5.368 5.368v8.588A5.37 5.37 0 0 0 16 20.831a5.37 5.37 0 0 0 5.368-5.368V6.875zM16 25.125v5.368m9.662-15.03c0 5.3-4.362 9.662-9.662 9.662s-9.662-4.362-9.662-9.662'/></svg>\",\r\n  MICROPHONE_MUTED:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M16 25.125v5.368M5.265 4.728l21.471 23.618m-4.789-5.267c-1.698 1.326-3.793 2.047-5.947 2.047-5.3 0-9.662-4.362-9.662-9.662'/><path d='M25.662 15.463a9.62 9.62 0 0 1-.978 4.242m-5.64.187c-.895.616-1.957.943-3.043.939-2.945 0-5.368-2.423-5.368-5.368v-4.831m.442-5.896A5.38 5.38 0 0 1 16 1.507c2.945 0 5.368 2.423 5.368 5.368v8.588c0 .188-.01.375-.03.562'/></svg>\",\r\n  BATTERY:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' stroke-miterlimit='2' viewBox='0 0 32 32'><path d='M24.774 6.71H3.097C1.398 6.71 0 8.108 0 9.806v12.387c0 1.699 1.398 3.097 3.097 3.097h21.677c1.699 0 3.097-1.398 3.097-3.097V9.806c0-1.699-1.398-3.097-3.097-3.097zm1.032 15.484a1.04 1.04 0 0 1-1.032 1.032H3.097a1.04 1.04 0 0 1-1.032-1.032V9.806a1.04 1.04 0 0 1 1.032-1.032h21.677a1.04 1.04 0 0 1 1.032 1.032v12.387zm-2.065-10.323v8.258a1.04 1.04 0 0 1-1.032 1.032H5.161a1.04 1.04 0 0 1-1.032-1.032v-8.258a1.04 1.04 0 0 1 1.032-1.032H22.71a1.04 1.04 0 0 1 1.032 1.032zm8.258 0v8.258a1.04 1.04 0 0 1-1.032 1.032 1.04 1.04 0 0 1-1.032-1.032v-8.258a1.04 1.04 0 0 1 1.032-1.032A1.04 1.04 0 0 1 32 11.871z' fill-rule='nonzero'/></svg>\",\r\n  PLAYTIME:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><g transform='matrix(.150026 0 0 .150026 -3.20332 -3.20332)' fill='none' stroke='#fff' stroke-width='16'><circle cx='128' cy='128' r='96'/><path d='M128 72v56h56'/></g></svg>\",\r\n  SERVER:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M9.773 16c0-5.694 4.685-10.379 10.379-10.379S30.53 10.306 30.53 16s-4.685 10.379-10.379 10.379H8.735c-3.982-.005-7.256-3.283-7.256-7.265s3.28-7.265 7.265-7.265c.606 0 1.21.076 1.797.226' fill='none' stroke='#fff' stroke-width='2.076'/></svg>\",\r\n  DOWNLOAD:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M16 19.955V1.5m14.5 18.455v9.227c0 .723-.595 1.318-1.318 1.318H2.818c-.723 0-1.318-.595-1.318-1.318v-9.227'/><path d='M22.591 13.364L16 19.955l-6.591-6.591'/></svg>\",\r\n  UPLOAD:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M16 19.905V1.682m14.318 18.223v9.112a1.31 1.31 0 0 1-1.302 1.302H2.983a1.31 1.31 0 0 1-1.302-1.302v-9.112'/><path d='M9.492 8.19L16 1.682l6.508 6.508'/></svg>\",\r\n  AUDIO:\r\n    \"<svg xmlns='http://www.w3.org/2000/svg' fill='none' stroke='#fff' fill-rule='evenodd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' viewBox='0 0 32 32'><path d='M8.964 21.417h-6.5a1.09 1.09 0 0 1-1.083-1.083v-8.667a1.09 1.09 0 0 1 1.083-1.083h6.5L18.714 3v26l-9.75-7.583z'/><path d='M8.964 10.583v10.833m15.167-8.28a4.35 4.35 0 0 1 0 5.728M28.149 9.5a9.79 9.79 0 0 1 0 13'/></svg>\",\r\n};\r\nfunction getSupportedCodecProfiles() {\r\n  let options = { default: t(\"default\") };\r\n  if (!(\"getCapabilities\" in RTCRtpReceiver)) return options;\r\n  let hasLowCodec = !1,\r\n    hasNormalCodec = !1,\r\n    hasHighCodec = !1,\r\n    codecs = RTCRtpReceiver.getCapabilities(\"video\").codecs;\r\n  for (let codec of codecs) {\r\n    if (codec.mimeType.toLowerCase() !== \"video/h264\" || !codec.sdpFmtpLine)\r\n      continue;\r\n    let fmtp = codec.sdpFmtpLine.toLowerCase();\r\n    if (fmtp.includes(\"profile-level-id=4d\")) hasHighCodec = !0;\r\n    else if (fmtp.includes(\"profile-level-id=42e\")) hasNormalCodec = !0;\r\n    else if (fmtp.includes(\"profile-level-id=420\")) hasLowCodec = !0;\r\n  }\r\n  if (hasLowCodec)\r\n    if (!hasNormalCodec && !hasHighCodec)\r\n      options[\"default\"] = `${t(\"visual-quality-low\")} (${t(\"default\")})`;\r\n    else options[\"low\"] = t(\"visual-quality-low\");\r\n  if (hasNormalCodec)\r\n    if (!hasLowCodec && !hasHighCodec)\r\n      options[\"default\"] = `${t(\"visual-quality-normal\")} (${t(\"default\")})`;\r\n    else options[\"normal\"] = t(\"visual-quality-normal\");\r\n  if (hasHighCodec)\r\n    if (!hasLowCodec && !hasNormalCodec)\r\n      options[\"default\"] = `${t(\"visual-quality-high\")} (${t(\"default\")})`;\r\n    else options[\"high\"] = t(\"visual-quality-high\");\r\n  return options;\r\n}\r\nclass GlobalSettingsStorage extends BaseSettingsStorage {\r\n  static DEFINITIONS = {\r\n    \"version.lastCheck\": { default: 0 },\r\n    \"version.latest\": { default: \"\" },\r\n    \"version.current\": { default: \"\" },\r\n    \"bx.locale\": {\r\n      label: t(\"language\"),\r\n      default: localStorage.getItem(\"BetterXcloud.Locale\") || \"en-US\",\r\n      options: SUPPORTED_LANGUAGES,\r\n    },\r\n    \"server.region\": {\r\n      label: t(\"region\"),\r\n      note: CE(\r\n        \"a\",\r\n        {\r\n          target: \"_blank\",\r\n          href: \"https://umap.openstreetmap.fr/en/map/xbox-cloud-gaming-servers_1135022\",\r\n        },\r\n        t(\"server-locations\")\r\n      ),\r\n      default: \"default\",\r\n    },\r\n    \"server.bypassRestriction\": {\r\n      label: t(\"bypass-region-restriction\"),\r\n      note: \"⚠️ \" + t(\"use-this-at-your-own-risk\"),\r\n      default: \"off\",\r\n      optionsGroup: t(\"region\"),\r\n      options: Object.assign({ off: t(\"off\") }, BypassServers),\r\n    },\r\n    \"stream.locale\": {\r\n      label: t(\"preferred-game-language\"),\r\n      default: \"default\",\r\n      options: {\r\n        default: t(\"default\"),\r\n        \"ar-SA\": \"العربية\",\r\n        \"bg-BG\": \"Български\",\r\n        \"cs-CZ\": \"čeština\",\r\n        \"da-DK\": \"dansk\",\r\n        \"de-DE\": \"Deutsch\",\r\n        \"el-GR\": \"Ελληνικά\",\r\n        \"en-GB\": \"English (UK)\",\r\n        \"en-US\": \"English (US)\",\r\n        \"es-ES\": \"español (España)\",\r\n        \"es-MX\": \"español (Latinoamérica)\",\r\n        \"fi-FI\": \"suomi\",\r\n        \"fr-FR\": \"français\",\r\n        \"he-IL\": \"עברית\",\r\n        \"hu-HU\": \"magyar\",\r\n        \"it-IT\": \"italiano\",\r\n        \"ja-JP\": \"日本語\",\r\n        \"ko-KR\": \"한국어\",\r\n        \"nb-NO\": \"norsk bokmål\",\r\n        \"nl-NL\": \"Nederlands\",\r\n        \"pl-PL\": \"polski\",\r\n        \"pt-BR\": \"português (Brasil)\",\r\n        \"pt-PT\": \"português (Portugal)\",\r\n        \"ro-RO\": \"Română\",\r\n        \"ru-RU\": \"русский\",\r\n        \"sk-SK\": \"slovenčina\",\r\n        \"sv-SE\": \"svenska\",\r\n        \"th-TH\": \"ไทย\",\r\n        \"tr-TR\": \"Türkçe\",\r\n        \"zh-CN\": \"中文(简体)\",\r\n        \"zh-TW\": \"中文 (繁體)\",\r\n      },\r\n    },\r\n    \"stream.video.resolution\": {\r\n      label: t(\"target-resolution\"),\r\n      default: \"auto\",\r\n      options: {\r\n        auto: t(\"default\"),\r\n        \"720p\": \"720p\",\r\n        \"1080p\": \"1080p\",\r\n        \"1080p-hq\": \"1080p (HQ)\",\r\n      },\r\n      suggest: { lowest: \"720p\", highest: \"1080p-hq\" },\r\n    },\r\n    \"stream.video.codecProfile\": {\r\n      label: t(\"visual-quality\"),\r\n      default: \"default\",\r\n      options: getSupportedCodecProfiles(),\r\n      ready: (setting) => {\r\n        let options = setting.options,\r\n          keys = Object.keys(options);\r\n        if (keys.length <= 1)\r\n          (setting.unsupported = !0),\r\n            (setting.unsupportedNote =\r\n              \"⚠️ \" + t(\"browser-unsupported-feature\"));\r\n        setting.suggest = {\r\n          lowest: keys.length === 1 ? keys[0] : keys[1],\r\n          highest: keys[keys.length - 1],\r\n        };\r\n      },\r\n    },\r\n    \"server.ipv6.prefer\": { label: t(\"prefer-ipv6-server\"), default: !1 },\r\n    \"screenshot.applyFilters\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"screenshot-apply-filters\"),\r\n      default: !1,\r\n    },\r\n    \"ui.splashVideo.skip\": { label: t(\"skip-splash-video\"), default: !1 },\r\n    \"ui.systemMenu.hideHandle\": {\r\n      label: \"⣿ \" + t(\"hide-system-menu-icon\"),\r\n      default: !1,\r\n    },\r\n    \"ui.imageQuality\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"image-quality\"),\r\n      default: 90,\r\n      min: 10,\r\n      max: 90,\r\n      params: {\r\n        steps: 10,\r\n        exactTicks: 20,\r\n        hideSlider: !0,\r\n        customTextValue(value, min, max) {\r\n          if (value === 90) return t(\"default\");\r\n          return value + \"%\";\r\n        },\r\n      },\r\n    },\r\n    \"ui.theme\": {\r\n      label: t(\"theme\"),\r\n      default: \"default\",\r\n      options: { default: t(\"default\"), \"dark-oled\": t(\"oled\") },\r\n    },\r\n    \"stream.video.combineAudio\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"combine-audio-video-streams\"),\r\n      default: !1,\r\n      experimental: !0,\r\n      note: t(\"combine-audio-video-streams-summary\"),\r\n    },\r\n    \"touchController.mode\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"availability\"),\r\n      default: \"all\",\r\n      options: { default: t(\"default\"), off: t(\"off\"), all: t(\"all-games\") },\r\n      unsupported: !STATES.userAgent.capabilities.touch,\r\n      unsupportedValue: \"default\",\r\n    },\r\n    \"touchController.autoOff\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"tc-auto-off\"),\r\n      default: !1,\r\n      unsupported: !STATES.userAgent.capabilities.touch,\r\n    },\r\n    \"touchController.opacity.default\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"default-opacity\"),\r\n      default: 100,\r\n      min: 10,\r\n      max: 100,\r\n      params: { steps: 10, suffix: \"%\", ticks: 10, hideSlider: !0 },\r\n      unsupported: !STATES.userAgent.capabilities.touch,\r\n    },\r\n    \"touchController.style.standard\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"tc-standard-layout-style\"),\r\n      default: \"default\",\r\n      options: {\r\n        default: t(\"default\"),\r\n        white: t(\"tc-all-white\"),\r\n        muted: t(\"tc-muted-colors\"),\r\n      },\r\n      unsupported: !STATES.userAgent.capabilities.touch,\r\n    },\r\n    \"touchController.style.custom\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"tc-custom-layout-style\"),\r\n      default: \"default\",\r\n      options: { default: t(\"default\"), muted: t(\"tc-muted-colors\") },\r\n      unsupported: !STATES.userAgent.capabilities.touch,\r\n    },\r\n    \"ui.streamMenu.simplify\": { label: t(\"simplify-stream-menu\"), default: !1 },\r\n    \"mkb.cursor.hideIdle\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"hide-idle-cursor\"),\r\n      default: !1,\r\n    },\r\n    \"ui.feedbackDialog.disabled\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"disable-post-stream-feedback-dialog\"),\r\n      default: !1,\r\n    },\r\n    \"stream.video.maxBitrate\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"bitrate-video-maximum\"),\r\n      note: \"⚠️ \" + t(\"unexpected-behavior\"),\r\n      default: 0,\r\n      min: 102400,\r\n      max: 15360000,\r\n      transformValue: {\r\n        get(value) {\r\n          return value === 0 ? this.max : value;\r\n        },\r\n        set(value) {\r\n          return value === this.max ? 0 : value;\r\n        },\r\n      },\r\n      params: {\r\n        steps: 102400,\r\n        exactTicks: 5120000,\r\n        customTextValue: (value, min, max) => {\r\n          if (((value = parseInt(value)), value === max)) return t(\"unlimited\");\r\n          else return (value / 1024000).toFixed(1) + \" Mb/s\";\r\n        },\r\n      },\r\n      suggest: { highest: 0 },\r\n    },\r\n    \"gameBar.position\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"position\"),\r\n      default: \"bottom-left\",\r\n      options: {\r\n        off: t(\"off\"),\r\n        \"bottom-left\": t(\"bottom-left\"),\r\n        \"bottom-right\": t(\"bottom-right\"),\r\n      },\r\n    },\r\n    \"ui.controllerStatus.show\": {\r\n      label: t(\"show-controller-connection-status\"),\r\n      default: !0,\r\n    },\r\n    \"mkb.enabled\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"enable-mkb\"),\r\n      default: !1,\r\n      unsupported:\r\n        !STATES.userAgent.capabilities.mkb || !STATES.browser.capabilities.mkb,\r\n      ready: (setting) => {\r\n        let note, url;\r\n        if (setting.unsupported)\r\n          (note = t(\"browser-unsupported-feature\")),\r\n            (url =\r\n              \"https://github.com/redphx/better-xcloud/issues/206#issuecomment-1920475657\");\r\n        else\r\n          (note = t(\"mkb-disclaimer\")),\r\n            (url =\r\n              \"https://better-xcloud.github.io/mouse-and-keyboard/#disclaimer\");\r\n        setting.unsupportedNote = () =>\r\n          CE(\"a\", { href: url, target: \"_blank\" }, \"⚠️ \" + note);\r\n      },\r\n    },\r\n    \"nativeMkb.mode\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"native-mkb\"),\r\n      default: \"default\",\r\n      options: { default: t(\"default\"), off: t(\"off\"), on: t(\"on\") },\r\n      ready: (setting) => {\r\n        if (STATES.browser.capabilities.emulatedNativeMkb);\r\n        else if (UserAgent.isMobile())\r\n          (setting.unsupported = !0),\r\n            (setting.unsupportedValue = \"off\"),\r\n            delete setting.options[\"default\"],\r\n            delete setting.options[\"on\"];\r\n        else delete setting.options[\"on\"];\r\n      },\r\n    },\r\n    \"nativeMkb.forcedGames\": {\r\n      label: t(\"force-native-mkb-games\"),\r\n      default: [],\r\n      unsupported: !AppInterface && UserAgent.isMobile(),\r\n      ready: (setting) => {\r\n        if (!setting.unsupported)\r\n          (setting.multipleOptions = GhPagesUtils.getNativeMkbCustomList(!0)),\r\n            BxEventBus.Script.once(\r\n              \"list.forcedNativeMkb.updated\",\r\n              (payload) => {\r\n                setting.multipleOptions = payload.data.data;\r\n              }\r\n            );\r\n      },\r\n      params: { size: 6 },\r\n    },\r\n    \"ui.reduceAnimations\": { label: t(\"reduce-animations\"), default: !1 },\r\n    \"loadingScreen.gameArt.show\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"show-game-art\"),\r\n      default: !0,\r\n    },\r\n    \"loadingScreen.waitTime.show\": { label: t(\"show-wait-time\"), default: !0 },\r\n    \"loadingScreen.rocket\": {\r\n      label: t(\"rocket-animation\"),\r\n      default: \"show\",\r\n      options: {\r\n        show: t(\"rocket-always-show\"),\r\n        \"hide-queue\": t(\"rocket-hide-queue\"),\r\n        hide: t(\"rocket-always-hide\"),\r\n      },\r\n    },\r\n    \"ui.controllerFriendly\": {\r\n      label: t(\"controller-friendly-ui\"),\r\n      default: BX_FLAGS.DeviceInfo.deviceType !== \"unknown\",\r\n    },\r\n    \"ui.layout\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"layout\"),\r\n      default: \"default\",\r\n      options: {\r\n        default: t(\"default\"),\r\n        normal: t(\"normal\"),\r\n        tv: t(\"smart-tv\"),\r\n      },\r\n    },\r\n    \"ui.hideScrollbar\": { label: t(\"hide-scrollbar\"), default: !1 },\r\n    \"ui.hideSections\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"hide-sections\"),\r\n      default: [],\r\n      multipleOptions: {\r\n        news: t(\"section-news\"),\r\n        friends: t(\"section-play-with-friends\"),\r\n        \"native-mkb\": t(\"section-native-mkb\"),\r\n        touch: t(\"section-touch\"),\r\n        \"most-popular\": t(\"section-most-popular\"),\r\n        byog: t(\"stream-your-own-game\"),\r\n        \"recently-added\": t(\"section-recently-added\"),\r\n        \"leaving-soon\": t(\"section-leaving-soon\"),\r\n        genres: t(\"section-genres\"),\r\n        \"all-games\": t(\"section-all-games\"),\r\n      },\r\n      params: { size: 0 },\r\n    },\r\n    \"ui.gameCard.waitTime.show\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"show-wait-time-in-game-card\"),\r\n      default: !0,\r\n    },\r\n    \"block.tracking\": { label: t(\"disable-xcloud-analytics\"), default: !1 },\r\n    \"block.features\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"disable-features\"),\r\n      default: [],\r\n      multipleOptions: {\r\n        chat: t(\"chat\"),\r\n        friends: t(\"friends-followers\"),\r\n        byog: t(\"stream-your-own-game\"),\r\n        \"notifications-invites\": t(\"notifications\") + \": \" + t(\"invites\"),\r\n        \"notifications-achievements\":\r\n          t(\"notifications\") + \": \" + t(\"achievements\"),\r\n      },\r\n    },\r\n    \"userAgent.profile\": {\r\n      label: t(\"user-agent-profile\"),\r\n      note: \"⚠️ \" + t(\"unexpected-behavior\"),\r\n      default:\r\n        BX_FLAGS.DeviceInfo.deviceType === \"android-tv\" ||\r\n        BX_FLAGS.DeviceInfo.deviceType === \"webos\"\r\n          ? \"vr-oculus\"\r\n          : \"default\",\r\n      options: {\r\n        default: t(\"default\"),\r\n        \"windows-edge\": \"Edge + Windows\",\r\n        \"macos-safari\": \"Safari + macOS\",\r\n        \"vr-oculus\": \"Android TV\",\r\n        \"smarttv-generic\": \"Smart TV\",\r\n        \"smarttv-tizen\": \"Samsung Smart TV\",\r\n        custom: t(\"custom\"),\r\n      },\r\n    },\r\n    \"audio.mic.onPlaying\": { label: t(\"enable-mic-on-startup\"), default: !1 },\r\n    \"audio.volume.booster.enabled\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"enable-volume-control\"),\r\n      default: !1,\r\n    },\r\n    \"xhome.enabled\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"enable-remote-play-feature\"),\r\n      labelIcon: BxIcon.REMOTE_PLAY,\r\n      default: !1,\r\n    },\r\n    \"xhome.video.resolution\": {\r\n      requiredVariants: \"full\",\r\n      default: \"1080p\",\r\n      options: { \"720p\": \"720p\", \"1080p\": \"1080p\", \"1080p-hq\": \"1080p (HQ)\" },\r\n    },\r\n    \"game.fortnite.forceConsole\": {\r\n      requiredVariants: \"full\",\r\n      label: \"🎮 \" + t(\"fortnite-force-console-version\"),\r\n      default: !1,\r\n      note: t(\"fortnite-allow-stw-mode\"),\r\n    },\r\n  };\r\n  constructor() {\r\n    super(\"BetterXcloud\", GlobalSettingsStorage.DEFINITIONS);\r\n  }\r\n}\r\nclass BaseLocalTable {\r\n  tableName;\r\n  constructor(tableName) {\r\n    this.tableName = tableName;\r\n  }\r\n  async prepareTable(type = \"readonly\") {\r\n    return (await LocalDb.getInstance().open())\r\n      .transaction(this.tableName, type)\r\n      .objectStore(this.tableName);\r\n  }\r\n  call(method) {\r\n    return new Promise((resolve) => {\r\n      let request = method.call(null, ...Array.from(arguments).slice(1));\r\n      request.onsuccess = (e) => {\r\n        resolve(e.target.result);\r\n      };\r\n    });\r\n  }\r\n  async count() {\r\n    let table = await this.prepareTable();\r\n    return this.call(table.count.bind(table));\r\n  }\r\n  async add(data) {\r\n    let table = await this.prepareTable(\"readwrite\");\r\n    return this.call(table.add.bind(table), ...arguments);\r\n  }\r\n  async put(data) {\r\n    let table = await this.prepareTable(\"readwrite\");\r\n    return this.call(table.put.bind(table), ...arguments);\r\n  }\r\n  async delete(id) {\r\n    let table = await this.prepareTable(\"readwrite\");\r\n    return this.call(table.delete.bind(table), ...arguments);\r\n  }\r\n  async get(id) {\r\n    let table = await this.prepareTable();\r\n    return this.call(table.get.bind(table), ...arguments);\r\n  }\r\n  async getAll() {\r\n    let table = await this.prepareTable(),\r\n      all = await this.call(table.getAll.bind(table), ...arguments),\r\n      results = {};\r\n    return (\r\n      all.forEach((item2) => {\r\n        results[item2.id] = item2;\r\n      }),\r\n      results\r\n    );\r\n  }\r\n}\r\nclass BasePresetsTable extends BaseLocalTable {\r\n  async newPreset(name, data) {\r\n    let newRecord = { name, data };\r\n    return await this.add(newRecord);\r\n  }\r\n  async updatePreset(preset) {\r\n    return await this.put(preset);\r\n  }\r\n  async deletePreset(id) {\r\n    return this.delete(id);\r\n  }\r\n  async getPreset(id) {\r\n    if (id === 0) return null;\r\n    if (id < 0) return this.DEFAULT_PRESETS[id];\r\n    let preset = await this.get(id);\r\n    if (!preset) preset = this.DEFAULT_PRESETS[this.DEFAULT_PRESET_ID];\r\n    return preset;\r\n  }\r\n  async getPresets() {\r\n    let all = deepClone(this.DEFAULT_PRESETS),\r\n      presets = {\r\n        default: Object.keys(this.DEFAULT_PRESETS).map((key) => parseInt(key)),\r\n        custom: [],\r\n        data: {},\r\n      };\r\n    if ((await this.count()) > 0) {\r\n      let items = await this.getAll(),\r\n        id;\r\n      for (id in items) {\r\n        let item2 = items[id];\r\n        presets.custom.push(item2.id), (all[item2.id] = item2);\r\n      }\r\n    }\r\n    return (presets.data = all), presets;\r\n  }\r\n  async getPresetsData() {\r\n    let presetsData = {};\r\n    for (let id in this.DEFAULT_PRESETS) {\r\n      let preset = this.DEFAULT_PRESETS[id];\r\n      presetsData[id] = deepClone(preset.data);\r\n    }\r\n    if ((await this.count()) > 0) {\r\n      let items = await this.getAll(),\r\n        id;\r\n      for (id in items) {\r\n        let item2 = items[id];\r\n        presetsData[item2.id] = item2.data;\r\n      }\r\n    }\r\n    return presetsData;\r\n  }\r\n}\r\nclass KeyboardShortcutsTable extends BasePresetsTable {\r\n  static instance;\r\n  static getInstance = () =>\r\n    KeyboardShortcutsTable.instance ??\r\n    (KeyboardShortcutsTable.instance = new KeyboardShortcutsTable());\r\n  LOG_TAG = \"KeyboardShortcutsTable\";\r\n  TABLE_PRESETS = LocalDb.TABLE_KEYBOARD_SHORTCUTS;\r\n  DEFAULT_PRESETS = {\r\n    [-1]: {\r\n      id: -1,\r\n      name: t(\"standard\"),\r\n      data: {\r\n        mapping: {\r\n          \"mkb.toggle\": { code: \"F8\" },\r\n          \"stream.screenshot.capture\": { code: \"Slash\" },\r\n        },\r\n      },\r\n    },\r\n  };\r\n  BLANK_PRESET_DATA = { mapping: {} };\r\n  DEFAULT_PRESET_ID = -1;\r\n  constructor() {\r\n    super(LocalDb.TABLE_KEYBOARD_SHORTCUTS);\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n}\r\nclass MkbMappingPresetsTable extends BasePresetsTable {\r\n  static instance;\r\n  static getInstance = () =>\r\n    MkbMappingPresetsTable.instance ??\r\n    (MkbMappingPresetsTable.instance = new MkbMappingPresetsTable());\r\n  LOG_TAG = \"MkbMappingPresetsTable\";\r\n  TABLE_PRESETS = LocalDb.TABLE_VIRTUAL_CONTROLLERS;\r\n  DEFAULT_PRESETS = {\r\n    [-1]: {\r\n      id: -1,\r\n      name: t(\"standard\"),\r\n      data: {\r\n        mapping: {\r\n          16: [\"Backquote\"],\r\n          12: [\"ArrowUp\", \"Digit1\"],\r\n          13: [\"ArrowDown\", \"Digit2\"],\r\n          14: [\"ArrowLeft\", \"Digit3\"],\r\n          15: [\"ArrowRight\", \"Digit4\"],\r\n          100: [\"KeyW\"],\r\n          101: [\"KeyS\"],\r\n          102: [\"KeyA\"],\r\n          103: [\"KeyD\"],\r\n          200: [\"KeyU\"],\r\n          201: [\"KeyJ\"],\r\n          202: [\"KeyH\"],\r\n          203: [\"KeyK\"],\r\n          0: [\"Space\", \"KeyE\"],\r\n          2: [\"KeyR\"],\r\n          1: [\"KeyC\", \"Backspace\"],\r\n          3: [\"KeyV\"],\r\n          9: [\"Enter\"],\r\n          8: [\"Tab\"],\r\n          4: [\"KeyQ\"],\r\n          5: [\"KeyF\"],\r\n          7: [\"Mouse0\"],\r\n          6: [\"Mouse2\"],\r\n          10: [\"KeyX\"],\r\n          11: [\"KeyZ\"],\r\n        },\r\n        mouse: {\r\n          mapTo: 2,\r\n          sensitivityX: 100,\r\n          sensitivityY: 100,\r\n          deadzoneCounterweight: 20,\r\n        },\r\n      },\r\n    },\r\n    [-2]: {\r\n      id: -2,\r\n      name: \"Shooter\",\r\n      data: {\r\n        mapping: {\r\n          16: [\"Backquote\"],\r\n          12: [\"ArrowUp\"],\r\n          13: [\"ArrowDown\"],\r\n          14: [\"ArrowLeft\"],\r\n          15: [\"ArrowRight\"],\r\n          100: [\"KeyW\"],\r\n          101: [\"KeyS\"],\r\n          102: [\"KeyA\"],\r\n          103: [\"KeyD\"],\r\n          200: [\"KeyI\"],\r\n          201: [\"KeyK\"],\r\n          202: [\"KeyJ\"],\r\n          203: [\"KeyL\"],\r\n          0: [\"Space\", \"KeyE\"],\r\n          2: [\"KeyR\"],\r\n          1: [\"ControlLeft\", \"Backspace\"],\r\n          3: [\"KeyV\"],\r\n          9: [\"Enter\"],\r\n          8: [\"Tab\"],\r\n          4: [\"KeyC\", \"KeyG\"],\r\n          5: [\"KeyQ\"],\r\n          7: [\"Mouse0\"],\r\n          6: [\"Mouse2\"],\r\n          10: [\"ShiftLeft\"],\r\n          11: [\"KeyF\"],\r\n        },\r\n        mouse: {\r\n          mapTo: 2,\r\n          sensitivityX: 100,\r\n          sensitivityY: 100,\r\n          deadzoneCounterweight: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  BLANK_PRESET_DATA = {\r\n    mapping: {},\r\n    mouse: {\r\n      mapTo: 2,\r\n      sensitivityX: 100,\r\n      sensitivityY: 100,\r\n      deadzoneCounterweight: 20,\r\n    },\r\n  };\r\n  DEFAULT_PRESET_ID = -1;\r\n  constructor() {\r\n    super(LocalDb.TABLE_VIRTUAL_CONTROLLERS);\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n}\r\nclass GameSettingsStorage extends BaseSettingsStorage {\r\n  constructor(id) {\r\n    super(`${\"BetterXcloud.Stream\"}.${id}`, StreamSettingsStorage.DEFINITIONS);\r\n  }\r\n  isEmpty() {\r\n    return Object.keys(this.settings).length === 0;\r\n  }\r\n}\r\nclass ControllerCustomizationsTable extends BasePresetsTable {\r\n  static instance;\r\n  static getInstance = () =>\r\n    ControllerCustomizationsTable.instance ??\r\n    (ControllerCustomizationsTable.instance = new ControllerCustomizationsTable(\r\n      LocalDb.TABLE_CONTROLLER_CUSTOMIZATIONS\r\n    ));\r\n  TABLE_PRESETS = LocalDb.TABLE_CONTROLLER_CUSTOMIZATIONS;\r\n  DEFAULT_PRESETS = {\r\n    [-1]: {\r\n      id: -1,\r\n      name: \"ABXY ⇄ BAYX\",\r\n      data: {\r\n        mapping: { 0: 1, 1: 0, 2: 3, 3: 2 },\r\n        settings: {\r\n          leftStickDeadzone: [0, 100],\r\n          rightStickDeadzone: [0, 100],\r\n          leftTriggerRange: [0, 100],\r\n          rightTriggerRange: [0, 100],\r\n          vibrationIntensity: 100,\r\n        },\r\n      },\r\n    },\r\n  };\r\n  BLANK_PRESET_DATA = {\r\n    mapping: {},\r\n    settings: {\r\n      leftTriggerRange: [0, 100],\r\n      rightTriggerRange: [0, 100],\r\n      leftStickDeadzone: [0, 100],\r\n      rightStickDeadzone: [0, 100],\r\n      vibrationIntensity: 100,\r\n    },\r\n  };\r\n  DEFAULT_PRESET_ID = 0;\r\n}\r\nclass ControllerShortcutsTable extends BasePresetsTable {\r\n  static instance;\r\n  static getInstance = () =>\r\n    ControllerShortcutsTable.instance ??\r\n    (ControllerShortcutsTable.instance = new ControllerShortcutsTable());\r\n  LOG_TAG = \"ControllerShortcutsTable\";\r\n  TABLE_PRESETS = LocalDb.TABLE_CONTROLLER_SHORTCUTS;\r\n  DEFAULT_PRESETS = {\r\n    [-1]: {\r\n      id: -1,\r\n      name: \"Type A\",\r\n      data: {\r\n        mapping: {\r\n          3: AppInterface ? \"device.volume.inc\" : \"stream.volume.inc\",\r\n          0: AppInterface ? \"device.volume.dec\" : \"stream.volume.dec\",\r\n          2: \"stream.stats.toggle\",\r\n          1: AppInterface ? \"device.sound.toggle\" : \"stream.sound.toggle\",\r\n          5: \"stream.screenshot.capture\",\r\n          9: \"stream.menu.show\",\r\n        },\r\n      },\r\n    },\r\n    [-2]: {\r\n      id: -2,\r\n      name: \"Type B\",\r\n      data: {\r\n        mapping: {\r\n          12: AppInterface ? \"device.volume.inc\" : \"stream.volume.inc\",\r\n          13: AppInterface ? \"device.volume.dec\" : \"stream.volume.dec\",\r\n          15: \"stream.stats.toggle\",\r\n          14: AppInterface ? \"device.sound.toggle\" : \"stream.sound.toggle\",\r\n          4: \"stream.screenshot.capture\",\r\n          8: \"stream.menu.show\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n  BLANK_PRESET_DATA = { mapping: {} };\r\n  DEFAULT_PRESET_ID = -1;\r\n  constructor() {\r\n    super(LocalDb.TABLE_CONTROLLER_SHORTCUTS);\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n}\r\nclass BaseStreamPlayer {\r\n  logTag;\r\n  playerType;\r\n  elementType;\r\n  $video;\r\n  options = {\r\n    processing: \"usm\",\r\n    sharpness: 0,\r\n    brightness: 1,\r\n    contrast: 1,\r\n    saturation: 1,\r\n  };\r\n  isStopped = !1;\r\n  constructor(playerType, elementType, $video, logTag) {\r\n    (this.playerType = playerType),\r\n      (this.elementType = elementType),\r\n      (this.$video = $video),\r\n      (this.logTag = logTag);\r\n  }\r\n  init() {\r\n    BxLogger.info(this.logTag, \"Initialize\");\r\n  }\r\n  updateOptions(newOptions, refresh = !1) {\r\n    (this.options = Object.assign(this.options, newOptions)),\r\n      refresh && this.refreshPlayer();\r\n  }\r\n}\r\nclass BaseCanvasPlayer extends BaseStreamPlayer {\r\n  $canvas;\r\n  targetFps = 60;\r\n  frameInterval = 0;\r\n  lastFrameTime = 0;\r\n  animFrameId = null;\r\n  frameCallback;\r\n  boundDrawFrame;\r\n  constructor(playerType, $video, logTag) {\r\n    super(playerType, \"canvas\", $video, logTag);\r\n    let $canvas = document.createElement(\"canvas\");\r\n    ($canvas.width = $video.videoWidth),\r\n      ($canvas.height = $video.videoHeight),\r\n      (this.$canvas = $canvas),\r\n      $video.insertAdjacentElement(\"afterend\", this.$canvas);\r\n    let frameCallback;\r\n    if (\"requestVideoFrameCallback\" in HTMLVideoElement.prototype) {\r\n      let $video2 = this.$video;\r\n      frameCallback = $video2.requestVideoFrameCallback.bind($video2);\r\n    } else frameCallback = requestAnimationFrame;\r\n    (this.frameCallback = frameCallback),\r\n      (this.boundDrawFrame = this.drawFrame.bind(this));\r\n  }\r\n  async init() {\r\n    super.init(), await this.setupShaders(), this.setupRendering();\r\n  }\r\n  setTargetFps(target) {\r\n    (this.targetFps = target),\r\n      (this.lastFrameTime = 0),\r\n      (this.frameInterval = target ? Math.floor(1000 / target) : 0);\r\n  }\r\n  getCanvas() {\r\n    return this.$canvas;\r\n  }\r\n  destroy() {\r\n    if (\r\n      (BxLogger.info(this.logTag, \"Destroy\"),\r\n      (this.isStopped = !0),\r\n      this.animFrameId)\r\n    ) {\r\n      if (\"requestVideoFrameCallback\" in HTMLVideoElement.prototype)\r\n        this.$video.cancelVideoFrameCallback(this.animFrameId);\r\n      else cancelAnimationFrame(this.animFrameId);\r\n      this.animFrameId = null;\r\n    }\r\n    if (this.$canvas.isConnected) this.$canvas.remove();\r\n    (this.$canvas.width = 1), (this.$canvas.height = 1);\r\n  }\r\n  toFilterId(processing) {\r\n    return processing === \"cas\" ? 2 : 1;\r\n  }\r\n  shouldDraw() {\r\n    if (this.targetFps >= 60) return !0;\r\n    else if (this.targetFps === 0) return !1;\r\n    let currentTime = performance.now();\r\n    if (currentTime - this.lastFrameTime < this.frameInterval) return !1;\r\n    return (this.lastFrameTime = currentTime), !0;\r\n  }\r\n  drawFrame() {\r\n    if (this.isStopped) return;\r\n    if (\r\n      ((this.animFrameId = this.frameCallback(this.boundDrawFrame)),\r\n      !this.shouldDraw())\r\n    )\r\n      return;\r\n    this.updateFrame();\r\n  }\r\n  setupRendering() {\r\n    this.animFrameId = this.frameCallback(this.boundDrawFrame);\r\n  }\r\n}\r\nclass WebGPUPlayer extends BaseCanvasPlayer {\r\n  static device;\r\n  context;\r\n  pipeline;\r\n  sampler;\r\n  bindGroup;\r\n  optionsUpdated = !1;\r\n  paramsBuffer;\r\n  vertexBuffer;\r\n  static async prepare() {\r\n    if (!BX_FLAGS.EnableWebGPURenderer || !navigator.gpu) {\r\n      BxEventBus.Script.emit(\"webgpu.ready\", {});\r\n      return;\r\n    }\r\n    try {\r\n      let adapter = await navigator.gpu.requestAdapter();\r\n      if (adapter)\r\n        (WebGPUPlayer.device = await adapter.requestDevice()),\r\n          WebGPUPlayer.device?.addEventListener(\"uncapturederror\", (e) => {\r\n            console.error(e.error.message);\r\n          });\r\n    } catch (ex) {\r\n      alert(ex);\r\n    }\r\n    BxEventBus.Script.emit(\"webgpu.ready\", {});\r\n  }\r\n  constructor($video) {\r\n    super(\"webgpu\", $video, \"WebGPUPlayer\");\r\n  }\r\n  setupShaders() {\r\n    if (((this.context = this.$canvas.getContext(\"webgpu\")), !this.context)) {\r\n      alert(\"Can't initiate context\");\r\n      return;\r\n    }\r\n    let format = navigator.gpu.getPreferredCanvasFormat();\r\n    this.context.configure({\r\n      device: WebGPUPlayer.device,\r\n      format,\r\n      alphaMode: \"opaque\",\r\n    }),\r\n      (this.vertexBuffer = WebGPUPlayer.device.createBuffer({\r\n        label: \"vertex buffer\",\r\n        size: 24,\r\n        usage: GPUBufferUsage.VERTEX,\r\n        mappedAtCreation: !0,\r\n      }));\r\n    let mappedRange = this.vertexBuffer.getMappedRange();\r\n    new Float32Array(mappedRange).set([-1, 3, -1, -1, 3, -1]),\r\n      this.vertexBuffer.unmap();\r\n    let shaderModule = WebGPUPlayer.device.createShaderModule({\r\n      code: `struct Params {filterId: f32,sharpness: f32,brightness: f32,contrast: f32,saturation: f32,};struct VertexOutput {@builtin(position) position: vec4<f32>,@location(0) uv: vec2<f32>,};@group(0) @binding(0) var ourSampler: sampler;\r\n@group(0) @binding(1) var ourTexture: texture_external;\r\n@group(0) @binding(2) var<uniform> ourParams: Params;\r\nconst FILTER_UNSHARP_MASKING: f32 = 1.0;const CAS_CONTRAST_PEAK: f32 = 0.8 * -3.0 + 8.0;const LUMINOSITY_FACTOR = vec3(0.299, 0.587, 0.114);@vertex\r\nfn vsMain(@location(0) pos: vec2<f32>) -> VertexOutput {var out: VertexOutput;out.position = vec4(pos, 0.0, 1.0);out.uv = (vec2(pos.x, 1.0 - (pos.y + 1.0)) + vec2(1.0, 1.0)) * 0.5;return out;}fn clarityBoost(coord: vec2<f32>, texSize: vec2<f32>, e: vec3<f32>) -> vec3<f32> {let texelSize = 1.0 / texSize;let a = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2(-1.0,  1.0)).rgb;let b = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2( 0.0,  1.0)).rgb;let c = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2( 1.0,  1.0)).rgb;let d = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2(-1.0,  0.0)).rgb;let f = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2( 1.0,  0.0)).rgb;let g = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2(-1.0, -1.0)).rgb;let h = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2( 0.0, -1.0)).rgb;let i = textureSampleBaseClampToEdge(ourTexture, ourSampler, coord + texelSize * vec2( 1.0, -1.0)).rgb;if ourParams.filterId == FILTER_UNSHARP_MASKING {let gaussianBlur = (a + c + g + i) * 1.0 + (b + d + f + h) * 2.0 + e * 4.0;let blurred = gaussianBlur / 16.0;return e + (e - blurred) * (ourParams.sharpness / 3.0);}let minRgb = min(min(min(d, e), min(f, b)), h) + min(min(a, c), min(g, i));let maxRgb = max(max(max(d, e), max(f, b)), h) + max(max(a, c), max(g, i));let reciprocalMaxRgb = 1.0 / maxRgb;var amplifyRgb = clamp(min(minRgb, 2.0 - maxRgb) * reciprocalMaxRgb, vec3(0.0), vec3(1.0));amplifyRgb = 1.0 / sqrt(amplifyRgb);let weightRgb = -(1.0 / (amplifyRgb * CAS_CONTRAST_PEAK));let reciprocalWeightRgb = 1.0 / (4.0 * weightRgb + 1.0);let window = b + d + f + h;let outColor = clamp((window * weightRgb + e) * reciprocalWeightRgb, vec3(0.0), vec3(1.0));return mix(e, outColor, ourParams.sharpness / 2.0);}@fragment\r\nfn fsMain(input: VertexOutput) -> @location(0) vec4<f32> {let texSize = vec2<f32>(textureDimensions(ourTexture));let center = textureSampleBaseClampToEdge(ourTexture, ourSampler, input.uv);var adjustedRgb = clarityBoost(input.uv, texSize, center.rgb);let gray = dot(adjustedRgb, LUMINOSITY_FACTOR);adjustedRgb = mix(vec3(gray), adjustedRgb, ourParams.saturation);adjustedRgb = (adjustedRgb - 0.5) * ourParams.contrast + 0.5;adjustedRgb *= ourParams.brightness;return vec4(adjustedRgb, 1.0);}`,\r\n    });\r\n    (this.pipeline = WebGPUPlayer.device.createRenderPipeline({\r\n      layout: \"auto\",\r\n      vertex: {\r\n        module: shaderModule,\r\n        entryPoint: \"vsMain\",\r\n        buffers: [\r\n          {\r\n            arrayStride: 8,\r\n            attributes: [{ format: \"float32x2\", offset: 0, shaderLocation: 0 }],\r\n          },\r\n        ],\r\n      },\r\n      fragment: {\r\n        module: shaderModule,\r\n        entryPoint: \"fsMain\",\r\n        targets: [{ format }],\r\n      },\r\n      primitive: { topology: \"triangle-list\" },\r\n    })),\r\n      (this.sampler = WebGPUPlayer.device.createSampler({\r\n        magFilter: \"linear\",\r\n        minFilter: \"linear\",\r\n      })),\r\n      this.updateCanvas();\r\n  }\r\n  prepareUniformBuffer(value, classType) {\r\n    let uniform = new classType(value),\r\n      uniformBuffer = WebGPUPlayer.device.createBuffer({\r\n        size: uniform.byteLength,\r\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n      });\r\n    return (\r\n      WebGPUPlayer.device.queue.writeBuffer(uniformBuffer, 0, uniform),\r\n      uniformBuffer\r\n    );\r\n  }\r\n  updateCanvas() {\r\n    let externalTexture = WebGPUPlayer.device.importExternalTexture({\r\n      source: this.$video,\r\n    });\r\n    if (!this.optionsUpdated)\r\n      (this.paramsBuffer = this.prepareUniformBuffer(\r\n        [\r\n          this.toFilterId(this.options.processing),\r\n          this.options.sharpness,\r\n          this.options.brightness / 100,\r\n          this.options.contrast / 100,\r\n          this.options.saturation / 100,\r\n        ],\r\n        Float32Array\r\n      )),\r\n        (this.optionsUpdated = !0);\r\n    this.bindGroup = WebGPUPlayer.device.createBindGroup({\r\n      layout: this.pipeline.getBindGroupLayout(0),\r\n      entries: [\r\n        { binding: 0, resource: this.sampler },\r\n        { binding: 1, resource: externalTexture },\r\n        { binding: 2, resource: { buffer: this.paramsBuffer } },\r\n      ],\r\n    });\r\n  }\r\n  updateFrame() {\r\n    this.updateCanvas();\r\n    let commandEncoder = WebGPUPlayer.device.createCommandEncoder(),\r\n      passEncoder = commandEncoder.beginRenderPass({\r\n        colorAttachments: [\r\n          {\r\n            view: this.context.getCurrentTexture().createView(),\r\n            loadOp: \"clear\",\r\n            storeOp: \"store\",\r\n            clearValue: [0, 0, 0, 1],\r\n          },\r\n        ],\r\n      });\r\n    passEncoder.setPipeline(this.pipeline),\r\n      passEncoder.setBindGroup(0, this.bindGroup),\r\n      passEncoder.setVertexBuffer(0, this.vertexBuffer),\r\n      passEncoder.draw(3),\r\n      passEncoder.end(),\r\n      WebGPUPlayer.device.queue.submit([commandEncoder.finish()]);\r\n  }\r\n  refreshPlayer() {\r\n    (this.optionsUpdated = !1), this.updateCanvas();\r\n  }\r\n  destroy() {\r\n    if (\r\n      (super.destroy(),\r\n      (this.isStopped = !0),\r\n      (this.pipeline = null),\r\n      (this.bindGroup = null),\r\n      (this.sampler = null),\r\n      this.paramsBuffer?.destroy(),\r\n      (this.paramsBuffer = null),\r\n      this.vertexBuffer?.destroy(),\r\n      (this.vertexBuffer = null),\r\n      this.context)\r\n    )\r\n      this.context.unconfigure(), (this.context = null);\r\n    console.log(\"WebGPU context successfully freed.\");\r\n  }\r\n}\r\nclass StreamSettingsStorage extends BaseSettingsStorage {\r\n  static DEFINITIONS = {\r\n    \"deviceVibration.mode\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"device-vibration\"),\r\n      default: \"off\",\r\n      options: {\r\n        off: t(\"off\"),\r\n        on: t(\"on\"),\r\n        auto: t(\"device-vibration-not-using-gamepad\"),\r\n      },\r\n    },\r\n    \"deviceVibration.intensity\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"vibration-intensity\"),\r\n      default: 50,\r\n      min: 10,\r\n      max: 100,\r\n      params: { steps: 10, suffix: \"%\", exactTicks: 20 },\r\n    },\r\n    \"controller.pollingRate\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"polling-rate\"),\r\n      default: 4,\r\n      min: 4,\r\n      max: 60,\r\n      params: {\r\n        steps: 4,\r\n        exactTicks: 20,\r\n        reverse: !0,\r\n        customTextValue(value) {\r\n          value = parseInt(value);\r\n          let text = +(1000 / value).toFixed(2) + \" Hz\";\r\n          if (value === 4) text = `${text} (${t(\"default\")})`;\r\n          return text;\r\n        },\r\n      },\r\n    },\r\n    \"controller.settings\": { default: {} },\r\n    \"nativeMkb.scroll.sensitivityX\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"horizontal-scroll-sensitivity\"),\r\n      default: 0,\r\n      min: 0,\r\n      max: 1e4,\r\n      params: {\r\n        steps: 10,\r\n        exactTicks: 2000,\r\n        customTextValue: (value) => {\r\n          if (!value) return t(\"default\");\r\n          return (value / 100).toFixed(1) + \"x\";\r\n        },\r\n      },\r\n    },\r\n    \"nativeMkb.scroll.sensitivityY\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"vertical-scroll-sensitivity\"),\r\n      default: 0,\r\n      min: 0,\r\n      max: 1e4,\r\n      params: {\r\n        steps: 10,\r\n        exactTicks: 2000,\r\n        customTextValue: (value) => {\r\n          if (!value) return t(\"default\");\r\n          return (value / 100).toFixed(1) + \"x\";\r\n        },\r\n      },\r\n    },\r\n    \"mkb.p1.preset.mappingId\": { requiredVariants: \"full\", default: -1 },\r\n    \"mkb.p1.slot\": {\r\n      requiredVariants: \"full\",\r\n      default: 1,\r\n      min: 1,\r\n      max: 4,\r\n      params: { hideSlider: !0 },\r\n    },\r\n    \"mkb.p2.preset.mappingId\": { requiredVariants: \"full\", default: 0 },\r\n    \"mkb.p2.slot\": {\r\n      requiredVariants: \"full\",\r\n      default: 0,\r\n      min: 0,\r\n      max: 4,\r\n      params: {\r\n        hideSlider: !0,\r\n        customTextValue(value) {\r\n          return (\r\n            (value = parseInt(value)), value === 0 ? t(\"off\") : value.toString()\r\n          );\r\n        },\r\n      },\r\n    },\r\n    \"keyboardShortcuts.preset.inGameId\": {\r\n      requiredVariants: \"full\",\r\n      default: -1,\r\n    },\r\n    \"video.player.type\": {\r\n      label: t(\"renderer\"),\r\n      default: \"default\",\r\n      options: {\r\n        default: t(\"default\"),\r\n        webgl2: t(\"webgl2\"),\r\n        webgpu: `${t(\"webgpu\")} (${t(\"experimental\")})`,\r\n      },\r\n      suggest: { lowest: \"default\", highest: \"webgl2\" },\r\n      ready: (setting) => {\r\n        BxEventBus.Script.on(\"webgpu.ready\", () => {\r\n          if (!WebGPUPlayer.device) delete setting.options[\"webgpu\"];\r\n        });\r\n      },\r\n    },\r\n    \"video.processing\": {\r\n      label: t(\"clarity-boost\"),\r\n      default: \"usm\",\r\n      options: { usm: t(\"unsharp-masking\"), cas: t(\"amd-fidelity-cas\") },\r\n      suggest: { lowest: \"usm\", highest: \"cas\" },\r\n    },\r\n    \"video.player.powerPreference\": {\r\n      label: t(\"renderer-configuration\"),\r\n      default: \"default\",\r\n      options: {\r\n        default: t(\"default\"),\r\n        \"low-power\": t(\"battery-saving\"),\r\n        \"high-performance\": t(\"high-performance\"),\r\n      },\r\n      suggest: { highest: \"low-power\" },\r\n    },\r\n    \"video.maxFps\": {\r\n      label: t(\"limit-fps\"),\r\n      default: 60,\r\n      min: 10,\r\n      max: 60,\r\n      params: {\r\n        steps: 10,\r\n        exactTicks: 10,\r\n        customTextValue: (value) => {\r\n          return (\r\n            (value = parseInt(value)),\r\n            value === 60 ? t(\"unlimited\") : value + \"fps\"\r\n          );\r\n        },\r\n      },\r\n    },\r\n    \"video.processing.sharpness\": {\r\n      label: t(\"sharpness\"),\r\n      default: 0,\r\n      min: 0,\r\n      max: 10,\r\n      params: {\r\n        exactTicks: 2,\r\n        customTextValue: (value) => {\r\n          return (\r\n            (value = parseInt(value)), value === 0 ? t(\"off\") : value.toString()\r\n          );\r\n        },\r\n      },\r\n      suggest: { lowest: 0, highest: 2 },\r\n    },\r\n    \"video.ratio\": {\r\n      label: t(\"aspect-ratio\"),\r\n      note: STATES.browser.capabilities.touch ? t(\"aspect-ratio-note\") : void 0,\r\n      default: \"16:9\",\r\n      options: {\r\n        \"16:9\": `16:9 (${t(\"default\")})`,\r\n        \"18:9\": \"18:9\",\r\n        \"21:9\": \"21:9\",\r\n        \"16:10\": \"16:10\",\r\n        \"4:3\": \"4:3\",\r\n        fill: t(\"stretch\"),\r\n      },\r\n    },\r\n    \"video.position\": {\r\n      label: t(\"position\"),\r\n      note: STATES.browser.capabilities.touch ? t(\"aspect-ratio-note\") : void 0,\r\n      default: \"center\",\r\n      options: {\r\n        top: t(\"top\"),\r\n        \"top-half\": t(\"top-half\"),\r\n        center: `${t(\"center\")} (${t(\"default\")})`,\r\n        \"bottom-half\": t(\"bottom-half\"),\r\n        bottom: t(\"bottom\"),\r\n      },\r\n    },\r\n    \"video.saturation\": {\r\n      label: t(\"saturation\"),\r\n      default: 100,\r\n      min: 50,\r\n      max: 150,\r\n      params: { suffix: \"%\", ticks: 25 },\r\n    },\r\n    \"video.contrast\": {\r\n      label: t(\"contrast\"),\r\n      default: 100,\r\n      min: 50,\r\n      max: 150,\r\n      params: { suffix: \"%\", ticks: 25 },\r\n    },\r\n    \"video.brightness\": {\r\n      label: t(\"brightness\"),\r\n      default: 100,\r\n      min: 50,\r\n      max: 150,\r\n      params: { suffix: \"%\", ticks: 25 },\r\n    },\r\n    \"audio.volume\": {\r\n      label: t(\"volume\"),\r\n      default: 100,\r\n      min: 0,\r\n      max: 600,\r\n      params: { steps: 10, suffix: \"%\", ticks: 100 },\r\n    },\r\n    \"stats.items\": {\r\n      label: t(\"stats\"),\r\n      default: [\"ping\", \"fps\", \"btr\", \"dt\", \"pl\", \"fl\"],\r\n      multipleOptions: {\r\n        time: t(\"clock\"),\r\n        play: t(\"playtime\"),\r\n        batt: t(\"battery\"),\r\n        ping: t(\"stat-ping\"),\r\n        jit: t(\"jitter\"),\r\n        fps: t(\"stat-fps\"),\r\n        btr: t(\"stat-bitrate\"),\r\n        dt: t(\"stat-decode-time\"),\r\n        pl: t(\"stat-packets-lost\"),\r\n        fl: t(\"stat-frames-lost\"),\r\n        dl: t(\"downloaded\"),\r\n        ul: t(\"uploaded\"),\r\n      },\r\n      params: { size: 0 },\r\n      ready: (setting) => {\r\n        let multipleOptions = setting.multipleOptions;\r\n        if (!STATES.browser.capabilities.batteryApi)\r\n          delete multipleOptions[\"batt\"];\r\n        for (let key in multipleOptions)\r\n          multipleOptions[key] =\r\n            key.toUpperCase() + \": \" + multipleOptions[key];\r\n      },\r\n    },\r\n    \"stats.showWhenPlaying\": { label: t(\"show-stats-on-startup\"), default: !1 },\r\n    \"stats.quickGlance.enabled\": {\r\n      label: \"👀 \" + t(\"enable-quick-glance-mode\"),\r\n      default: !0,\r\n    },\r\n    \"stats.position\": {\r\n      label: t(\"position\"),\r\n      default: \"top-right\",\r\n      options: {\r\n        \"top-left\": t(\"top-left\"),\r\n        \"top-center\": t(\"top-center\"),\r\n        \"top-right\": t(\"top-right\"),\r\n      },\r\n    },\r\n    \"stats.textSize\": {\r\n      label: t(\"text-size\"),\r\n      default: \"0.9rem\",\r\n      options: {\r\n        \"0.9rem\": t(\"small\"),\r\n        \"1.0rem\": t(\"normal\"),\r\n        \"1.1rem\": t(\"large\"),\r\n      },\r\n    },\r\n    \"stats.opacity.all\": {\r\n      label: t(\"opacity\"),\r\n      default: 80,\r\n      min: 50,\r\n      max: 100,\r\n      params: { steps: 10, suffix: \"%\", ticks: 10 },\r\n    },\r\n    \"stats.opacity.background\": {\r\n      label: t(\"background-opacity\"),\r\n      default: 100,\r\n      min: 0,\r\n      max: 100,\r\n      params: { steps: 10, suffix: \"%\", ticks: 10 },\r\n    },\r\n    \"stats.colors\": { label: t(\"conditional-formatting\"), default: !1 },\r\n    \"localCoOp.enabled\": {\r\n      requiredVariants: \"full\",\r\n      label: t(\"enable-local-co-op-support\"),\r\n      labelIcon: BxIcon.LOCAL_CO_OP,\r\n      default: !1,\r\n      note: () =>\r\n        CE(\r\n          \"div\",\r\n          !1,\r\n          CE(\r\n            \"a\",\r\n            {\r\n              href: \"https://github.com/redphx/better-xcloud/discussions/275\",\r\n              target: \"_blank\",\r\n            },\r\n            t(\"enable-local-co-op-support-note\")\r\n          ),\r\n          CE(\"br\"),\r\n          \"⚠️ \" + t(\"unexpected-behavior\")\r\n        ),\r\n    },\r\n  };\r\n  gameSettings = {};\r\n  xboxTitleId = -1;\r\n  constructor() {\r\n    super(\"BetterXcloud.Stream\", StreamSettingsStorage.DEFINITIONS);\r\n  }\r\n  setGameId(id) {\r\n    this.xboxTitleId = id;\r\n  }\r\n  getGameSettings(id) {\r\n    if (id > -1) {\r\n      if (!this.gameSettings[id]) {\r\n        let gameStorage = new GameSettingsStorage(id);\r\n        this.gameSettings[id] = gameStorage;\r\n        for (let key in gameStorage.settings) this.getSettingByGame(id, key);\r\n      }\r\n      return this.gameSettings[id];\r\n    }\r\n    return null;\r\n  }\r\n  getSetting(key, checkUnsupported) {\r\n    return this.getSettingByGame(this.xboxTitleId, key, checkUnsupported);\r\n  }\r\n  getSettingByGame(id, key, checkUnsupported) {\r\n    let gameSettings = this.getGameSettings(id);\r\n    if (gameSettings?.hasSetting(key)) {\r\n      let gameValue = gameSettings.getSetting(key, checkUnsupported),\r\n        globalValue = super.getSetting(key, checkUnsupported);\r\n      if (globalValue === gameValue)\r\n        this.deleteSettingByGame(id, key), (gameValue = globalValue);\r\n      return gameValue;\r\n    }\r\n    return super.getSetting(key, checkUnsupported);\r\n  }\r\n  setSetting(key, value, origin) {\r\n    return this.setSettingByGame(this.xboxTitleId, key, value, origin);\r\n  }\r\n  setSettingByGame(id, key, value, origin) {\r\n    let gameSettings = this.getGameSettings(id);\r\n    if (gameSettings)\r\n      return (\r\n        BxLogger.info(\"setSettingByGame\", id, key, value),\r\n        gameSettings.setSetting(key, value, origin)\r\n      );\r\n    return (\r\n      BxLogger.info(\"setSettingByGame\", id, key, value),\r\n      super.setSetting(key, value, origin)\r\n    );\r\n  }\r\n  deleteSettingByGame(id, key) {\r\n    let gameSettings = this.getGameSettings(id);\r\n    if (gameSettings) return gameSettings.deleteSetting(key);\r\n    return !1;\r\n  }\r\n  hasGameSetting(id, key) {\r\n    let gameSettings = this.getGameSettings(id);\r\n    return !!(gameSettings && gameSettings.hasSetting(key));\r\n  }\r\n  getControllerSetting(gamepadId) {\r\n    let controllerSetting = this.getSetting(\"controller.settings\")[gamepadId];\r\n    if (!controllerSetting) controllerSetting = {};\r\n    if (!controllerSetting.hasOwnProperty(\"shortcutPresetId\"))\r\n      controllerSetting.shortcutPresetId = -1;\r\n    if (!controllerSetting.hasOwnProperty(\"customizationPresetId\"))\r\n      controllerSetting.customizationPresetId = 0;\r\n    return controllerSetting;\r\n  }\r\n}\r\nfunction migrateStreamSettings() {\r\n  let storage = window.localStorage,\r\n    globalSettings = JSON.parse(storage.getItem(\"BetterXcloud\") || \"{}\"),\r\n    streamSettings = JSON.parse(storage.getItem(\"BetterXcloud.Stream\") || \"{}\"),\r\n    modified2 = !1;\r\n  for (let key in globalSettings)\r\n    if (isStreamPref(key)) {\r\n      if (!streamSettings.hasOwnProperty(key))\r\n        streamSettings[key] = globalSettings[key];\r\n      delete globalSettings[key], (modified2 = !0);\r\n    }\r\n  if (modified2)\r\n    storage.setItem(\"BetterXcloud\", JSON.stringify(globalSettings)),\r\n      storage.setItem(\"BetterXcloud.Stream\", JSON.stringify(streamSettings));\r\n}\r\nmigrateStreamSettings();\r\nvar STORAGE = {\r\n    Global: new GlobalSettingsStorage(),\r\n    Stream: new StreamSettingsStorage(),\r\n  },\r\n  streamSettingsStorage = STORAGE.Stream,\r\n  getStreamPrefDefinition = streamSettingsStorage.getDefinition.bind(\r\n    streamSettingsStorage\r\n  ),\r\n  getStreamPref = streamSettingsStorage.getSetting.bind(streamSettingsStorage),\r\n  setStreamPref = streamSettingsStorage.setSetting.bind(streamSettingsStorage),\r\n  getGamePref = streamSettingsStorage.getSettingByGame.bind(\r\n    streamSettingsStorage\r\n  ),\r\n  setGamePref = streamSettingsStorage.setSettingByGame.bind(\r\n    streamSettingsStorage\r\n  ),\r\n  setGameIdPref = streamSettingsStorage.setGameId.bind(streamSettingsStorage),\r\n  hasGamePref = streamSettingsStorage.hasGameSetting.bind(\r\n    streamSettingsStorage\r\n  );\r\nSTORAGE.Stream = streamSettingsStorage;\r\nvar globalSettingsStorage = STORAGE.Global,\r\n  getGlobalPrefDefinition = globalSettingsStorage.getDefinition.bind(\r\n    globalSettingsStorage\r\n  ),\r\n  getGlobalPref = globalSettingsStorage.getSetting.bind(globalSettingsStorage),\r\n  setGlobalPref = globalSettingsStorage.setSetting.bind(globalSettingsStorage);\r\nfunction isGlobalPref(prefKey) {\r\n  return ALL_PREFS.global.includes(prefKey);\r\n}\r\nfunction isStreamPref(prefKey) {\r\n  return ALL_PREFS.stream.includes(prefKey);\r\n}\r\nfunction getPrefInfo(prefKey) {\r\n  if (isGlobalPref(prefKey))\r\n    return {\r\n      storage: STORAGE.Global,\r\n      definition: getGlobalPrefDefinition(prefKey),\r\n    };\r\n  else if (isStreamPref(prefKey))\r\n    return {\r\n      storage: STORAGE.Stream,\r\n      definition: getStreamPrefDefinition(prefKey),\r\n    };\r\n  return alert(\"Missing pref definition: \" + prefKey), {};\r\n}\r\nfunction setPref(prefKey, value, origin) {\r\n  if (isGlobalPref(prefKey)) setGlobalPref(prefKey, value, origin);\r\n  else if (isStreamPref(prefKey)) setStreamPref(prefKey, value, origin);\r\n}\r\nfunction checkForUpdate() {\r\n  if (SCRIPT_VERSION.includes(\"beta\")) return;\r\n  let CHECK_INTERVAL_SECONDS = 7200,\r\n    currentVersion = getGlobalPref(\"version.current\"),\r\n    lastCheck = getGlobalPref(\"version.lastCheck\"),\r\n    now = Math.round(+new Date() / 1000);\r\n  if (\r\n    currentVersion === SCRIPT_VERSION &&\r\n    now - lastCheck < CHECK_INTERVAL_SECONDS\r\n  )\r\n    return;\r\n  setGlobalPref(\"version.lastCheck\", now, \"direct\"),\r\n    fetch(\"https://api.github.com/repos/redphx/better-xcloud/releases/latest\")\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        setGlobalPref(\"version.latest\", json.tag_name.substring(1), \"direct\"),\r\n          setGlobalPref(\"version.current\", SCRIPT_VERSION, \"direct\");\r\n      }),\r\n    Translations.updateTranslations(currentVersion === SCRIPT_VERSION);\r\n}\r\nfunction disablePwa() {\r\n  if (\r\n    !(\r\n      window.navigator.orgUserAgent ||\r\n      window.navigator.userAgent ||\r\n      \"\"\r\n    ).toLowerCase()\r\n  )\r\n    return;\r\n  if (!!AppInterface || UserAgent.isSafariMobile())\r\n    Object.defineProperty(window.navigator, \"standalone\", { value: !0 });\r\n}\r\nfunction hashCode(str) {\r\n  let hash = 0;\r\n  for (let i = 0, len = str.length; i < len; i++) {\r\n    let chr = str.charCodeAt(i);\r\n    (hash = (hash << 5) - hash + chr), (hash |= 0);\r\n  }\r\n  return hash;\r\n}\r\nfunction renderString(str, obj) {\r\n  return str.replace(\r\n    /\\$\\{([A-Za-z0-9_$]+)\\}|\\$([A-Za-z0-9_$]+)\\$/g,\r\n    (match, p1, p2) => {\r\n      let name = p1 || p2;\r\n      return name in obj ? obj[name] : match;\r\n    }\r\n  );\r\n}\r\nfunction ceilToNearest(value, interval) {\r\n  return Math.ceil(value / interval) * interval;\r\n}\r\nfunction floorToNearest(value, interval) {\r\n  return Math.floor(value / interval) * interval;\r\n}\r\nasync function copyToClipboard(text, showToast = !0) {\r\n  try {\r\n    return (\r\n      await navigator.clipboard.writeText(text),\r\n      showToast && Toast.show(\"Copied to clipboard\", \"\", { instant: !0 }),\r\n      !0\r\n    );\r\n  } catch (err) {\r\n    console.error(\"Failed to copy: \", err),\r\n      showToast && Toast.show(\"Failed to copy\", \"\", { instant: !0 });\r\n  }\r\n  return !1;\r\n}\r\nfunction productTitleToSlug(title) {\r\n  return title\r\n    .replace(/[;,/?:@&=+_`~$%#^*()!^™\\xae\\xa9]/g, \"\")\r\n    .replace(/\\|/g, \"-\")\r\n    .replace(/ {2,}/g, \" \")\r\n    .trim()\r\n    .substr(0, 50)\r\n    .replace(/ /g, \"-\")\r\n    .toLowerCase();\r\n}\r\nfunction parseDetailsPath(path) {\r\n  let matches = /\\/games\\/(?<titleSlug>[^\\/]+)\\/(?<productId>\\w+)/.exec(path);\r\n  if (!matches?.groups) return {};\r\n  let titleSlug = matches.groups.titleSlug.replaceAll(\"|\", \"-\"),\r\n    productId = matches.groups.productId;\r\n  return { titleSlug, productId };\r\n}\r\nfunction clearAllData() {\r\n  for (let i = 0; i < localStorage.length; i++) {\r\n    let key = localStorage.key(i);\r\n    if (!key) continue;\r\n    if (key.startsWith(\"BetterXcloud\") || key.startsWith(\"better_xcloud\"))\r\n      localStorage.removeItem(key);\r\n  }\r\n  try {\r\n    indexedDB.deleteDatabase(LocalDb.DB_NAME);\r\n  } catch (e) {}\r\n  alert(t(\"clear-data-success\"));\r\n}\r\nfunction containsAll(arr, values) {\r\n  return values.every((val) => arr.includes(val));\r\n}\r\nfunction blockAllNotifications() {\r\n  let blockFeatures = getGlobalPref(\"block.features\");\r\n  return containsAll(blockFeatures, [\r\n    \"friends\",\r\n    \"notifications-achievements\",\r\n    \"notifications-invites\",\r\n  ]);\r\n}\r\nfunction blockSomeNotifications() {\r\n  let blockFeatures = getGlobalPref(\"block.features\");\r\n  if (blockAllNotifications()) return !1;\r\n  return [\r\n    \"friends\",\r\n    \"notifications-achievements\",\r\n    \"notifications-invites\",\r\n  ].some((value) => blockFeatures.includes(value));\r\n}\r\nfunction isPlainObject(input) {\r\n  return (\r\n    typeof input === \"object\" && input !== null && input.constructor === Object\r\n  );\r\n}\r\nclass SoundShortcut {\r\n  static adjustGainNodeVolume(amount) {\r\n    if (!getGlobalPref(\"audio.volume.booster.enabled\")) return 0;\r\n    let currentValue = getStreamPref(\"audio.volume\"),\r\n      nearestValue;\r\n    if (amount > 0) nearestValue = ceilToNearest(currentValue, amount);\r\n    else nearestValue = floorToNearest(currentValue, -1 * amount);\r\n    let newValue;\r\n    if (currentValue !== nearestValue) newValue = nearestValue;\r\n    else newValue = currentValue + amount;\r\n    return (\r\n      (newValue = setStreamPref(\"audio.volume\", newValue, \"direct\")),\r\n      SoundShortcut.setGainNodeVolume(newValue),\r\n      Toast.show(`${t(\"stream\")} ❯ ${t(\"volume\")}`, newValue + \"%\", {\r\n        instant: !0,\r\n      }),\r\n      newValue\r\n    );\r\n  }\r\n  static setGainNodeVolume(value) {\r\n    STATES.currentStream.audioGainNode &&\r\n      (STATES.currentStream.audioGainNode.gain.value = value / 100);\r\n  }\r\n  static muteUnmute() {\r\n    if (\r\n      getGlobalPref(\"audio.volume.booster.enabled\") &&\r\n      STATES.currentStream.audioGainNode\r\n    ) {\r\n      let gainValue = STATES.currentStream.audioGainNode.gain.value,\r\n        settingValue = getStreamPref(\"audio.volume\"),\r\n        targetValue;\r\n      if (settingValue === 0)\r\n        (targetValue = 100),\r\n          setStreamPref(\"audio.volume\", targetValue, \"direct\");\r\n      else if (gainValue === 0) targetValue = settingValue;\r\n      else targetValue = 0;\r\n      let status;\r\n      if (targetValue === 0) status = t(\"muted\");\r\n      else status = targetValue + \"%\";\r\n      SoundShortcut.setGainNodeVolume(targetValue),\r\n        Toast.show(`${t(\"stream\")} ❯ ${t(\"volume\")}`, status, { instant: !0 }),\r\n        BxEventBus.Stream.emit(\"speaker.state.changed\", {\r\n          state: targetValue === 0 ? 1 : 0,\r\n        });\r\n      return;\r\n    }\r\n    let $media =\r\n      document.querySelector(\"div[data-testid=media-container] audio\") ??\r\n      document.querySelector(\"div[data-testid=media-container] video\");\r\n    if ($media) {\r\n      $media.muted = !$media.muted;\r\n      let status = $media.muted ? t(\"muted\") : t(\"unmuted\");\r\n      Toast.show(`${t(\"stream\")} ❯ ${t(\"volume\")}`, status, { instant: !0 }),\r\n        BxEventBus.Stream.emit(\"speaker.state.changed\", {\r\n          state: $media.muted ? 1 : 0,\r\n        });\r\n    }\r\n  }\r\n}\r\nclass StreamUiShortcut {\r\n  static showHideStreamMenu() {\r\n    window.BX_EXPOSED.showStreamMenu && window.BX_EXPOSED.showStreamMenu();\r\n  }\r\n}\r\nclass StreamStatsCollector {\r\n  static instance;\r\n  static getInstance = () =>\r\n    StreamStatsCollector.instance ??\r\n    (StreamStatsCollector.instance = new StreamStatsCollector());\r\n  LOG_TAG = \"StreamStatsCollector\";\r\n  static INTERVAL_BACKGROUND = 60000;\r\n  calculateGrade(value, grades) {\r\n    return value > grades[2]\r\n      ? \"bad\"\r\n      : value > grades[1]\r\n      ? \"ok\"\r\n      : value > grades[0]\r\n      ? \"good\"\r\n      : \"\";\r\n  }\r\n  currentStats = {\r\n    ping: {\r\n      current: -1,\r\n      grades: [40, 75, 100],\r\n      toString() {\r\n        return this.current === -1\r\n          ? \"???\"\r\n          : this.current.toString().padStart(3);\r\n      },\r\n    },\r\n    jit: {\r\n      current: 0,\r\n      grades: [30, 40, 60],\r\n      toString() {\r\n        return `${this.current.toFixed(1)}ms`.padStart(6);\r\n      },\r\n    },\r\n    fps: {\r\n      current: 0,\r\n      toString() {\r\n        let maxFps = getStreamPref(\"video.maxFps\");\r\n        return maxFps < 60\r\n          ? `${maxFps}/${this.current}`.padStart(5)\r\n          : this.current.toString();\r\n      },\r\n    },\r\n    btr: {\r\n      current: 0,\r\n      toString() {\r\n        return `${this.current.toFixed(1)} Mbps`.padStart(9);\r\n      },\r\n    },\r\n    fl: {\r\n      received: 0,\r\n      dropped: 0,\r\n      toString() {\r\n        let percentage = (\r\n          (this.dropped * 100) /\r\n          (this.dropped + this.received || 1)\r\n        ).toFixed(1);\r\n        return percentage.startsWith(\"0.\")\r\n          ? this.dropped.toString()\r\n          : `${this.dropped} (${percentage}%)`;\r\n      },\r\n    },\r\n    pl: {\r\n      received: 0,\r\n      dropped: 0,\r\n      toString() {\r\n        let percentage = (\r\n          (this.dropped * 100) /\r\n          (this.dropped + this.received || 1)\r\n        ).toFixed(1);\r\n        return percentage.startsWith(\"0.\")\r\n          ? this.dropped.toString()\r\n          : `${this.dropped} (${percentage}%)`;\r\n      },\r\n    },\r\n    dt: {\r\n      current: 0,\r\n      total: 0,\r\n      grades: [6, 9, 12],\r\n      toString() {\r\n        return isNaN(this.current)\r\n          ? \"??ms\"\r\n          : `${this.current.toFixed(1)}ms`.padStart(6);\r\n      },\r\n    },\r\n    dl: {\r\n      total: 0,\r\n      toString() {\r\n        return humanFileSize(this.total).padStart(8);\r\n      },\r\n    },\r\n    ul: {\r\n      total: 0,\r\n      toString() {\r\n        return humanFileSize(this.total);\r\n      },\r\n    },\r\n    play: {\r\n      seconds: 0,\r\n      startTime: 0,\r\n      toString() {\r\n        return secondsToHm(this.seconds);\r\n      },\r\n    },\r\n    batt: {\r\n      current: 100,\r\n      start: 100,\r\n      isCharging: !1,\r\n      toString() {\r\n        let text = `${this.current}%`;\r\n        if (this.current !== this.start) {\r\n          let diffLevel = Math.round(this.current - this.start),\r\n            sign = diffLevel > 0 ? \"+\" : \"\";\r\n          text += ` (${sign}${diffLevel}%)`;\r\n        }\r\n        return text;\r\n      },\r\n    },\r\n    time: {\r\n      toString() {\r\n        return new Date().toLocaleTimeString([], {\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n          hour12: !1,\r\n        });\r\n      },\r\n    },\r\n  };\r\n  lastVideoStat;\r\n  selectedCandidatePairId = null;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n  async collect() {\r\n    let stats = await STATES.currentStream.peerConnection?.getStats();\r\n    if (!stats) return;\r\n    if (!this.selectedCandidatePairId) {\r\n      let found = !1;\r\n      stats.forEach((stat) => {\r\n        if (found || stat.type !== \"transport\") return;\r\n        if (\r\n          ((stat = stat),\r\n          stat.iceState === \"connected\" && stat.selectedCandidatePairId)\r\n        )\r\n          (this.selectedCandidatePairId = stat.selectedCandidatePairId),\r\n            (found = !0);\r\n      });\r\n    }\r\n    stats.forEach((stat) => {\r\n      if (stat.type === \"inbound-rtp\" && stat.kind === \"video\") {\r\n        let fps = this.currentStats[\"fps\"];\r\n        fps.current = stat.framesPerSecond || 0;\r\n        let pl = this.currentStats[\"pl\"];\r\n        (pl.dropped = Math.max(0, stat.packetsLost)),\r\n          (pl.received = stat.packetsReceived);\r\n        let fl = this.currentStats[\"fl\"];\r\n        if (\r\n          ((fl.dropped = stat.framesDropped),\r\n          (fl.received = stat.framesReceived),\r\n          !this.lastVideoStat)\r\n        ) {\r\n          this.lastVideoStat = stat;\r\n          return;\r\n        }\r\n        let lastStat = this.lastVideoStat,\r\n          jit = this.currentStats[\"jit\"],\r\n          bufferDelayDiff = stat.jitterBufferDelay - lastStat.jitterBufferDelay,\r\n          emittedCountDiff =\r\n            stat.jitterBufferEmittedCount - lastStat.jitterBufferEmittedCount;\r\n        if (emittedCountDiff > 0)\r\n          jit.current = (bufferDelayDiff / emittedCountDiff) * 1000;\r\n        let btr = this.currentStats[\"btr\"],\r\n          timeDiff = stat.timestamp - lastStat.timestamp;\r\n        btr.current =\r\n          (8 * (stat.bytesReceived - lastStat.bytesReceived)) / timeDiff / 1000;\r\n        let dt = this.currentStats[\"dt\"];\r\n        dt.total = stat.totalDecodeTime - lastStat.totalDecodeTime;\r\n        let framesDecodedDiff = stat.framesDecoded - lastStat.framesDecoded;\r\n        (dt.current = (dt.total / framesDecodedDiff) * 1000),\r\n          (this.lastVideoStat = stat);\r\n      } else if (\r\n        this.selectedCandidatePairId &&\r\n        stat.type === \"candidate-pair\" &&\r\n        stat.id === this.selectedCandidatePairId\r\n      ) {\r\n        let ping = this.currentStats[\"ping\"];\r\n        ping.current = stat.currentRoundTripTime\r\n          ? stat.currentRoundTripTime * 1000\r\n          : -1;\r\n        let dl = this.currentStats[\"dl\"];\r\n        dl.total = stat.bytesReceived;\r\n        let ul = this.currentStats[\"ul\"];\r\n        ul.total = stat.bytesSent;\r\n      }\r\n    });\r\n    let batteryLevel = 100,\r\n      isCharging = !1;\r\n    if (STATES.browser.capabilities.batteryApi)\r\n      try {\r\n        let bm = await navigator.getBattery();\r\n        (isCharging = bm.charging), (batteryLevel = Math.round(bm.level * 100));\r\n      } catch (e) {}\r\n    let battery = this.currentStats[\"batt\"];\r\n    (battery.current = batteryLevel), (battery.isCharging = isCharging);\r\n    let playTime = this.currentStats[\"play\"],\r\n      now = +new Date();\r\n    playTime.seconds = Math.ceil((now - playTime.startTime) / 1000);\r\n  }\r\n  getStat(kind) {\r\n    return this.currentStats[kind];\r\n  }\r\n  reset() {\r\n    let playTime = this.currentStats[\"play\"];\r\n    (playTime.seconds = 0), (playTime.startTime = +new Date());\r\n    try {\r\n      STATES.browser.capabilities.batteryApi &&\r\n        navigator.getBattery().then((bm) => {\r\n          this.currentStats[\"batt\"].start = Math.round(bm.level * 100);\r\n        });\r\n    } catch (e) {}\r\n  }\r\n  static setupEvents() {\r\n    BxEventBus.Stream.on(\"state.playing\", () => {\r\n      StreamStatsCollector.getInstance().reset();\r\n    });\r\n  }\r\n}\r\nclass StreamStats {\r\n  static instance;\r\n  static getInstance = () =>\r\n    StreamStats.instance ?? (StreamStats.instance = new StreamStats());\r\n  LOG_TAG = \"StreamStats\";\r\n  isRunning = !1;\r\n  intervalId;\r\n  REFRESH_INTERVAL = 1000;\r\n  stats = {\r\n    time: { name: t(\"clock\"), $element: CE(\"span\") },\r\n    play: { name: t(\"playtime\"), $element: CE(\"span\") },\r\n    batt: { name: t(\"battery\"), $element: CE(\"span\") },\r\n    ping: { name: t(\"stat-ping\"), $element: CE(\"span\") },\r\n    jit: { name: t(\"jitter\"), $element: CE(\"span\") },\r\n    fps: { name: t(\"stat-fps\"), $element: CE(\"span\") },\r\n    btr: { name: t(\"stat-bitrate\"), $element: CE(\"span\") },\r\n    dt: { name: t(\"stat-decode-time\"), $element: CE(\"span\") },\r\n    pl: { name: t(\"stat-packets-lost\"), $element: CE(\"span\") },\r\n    fl: { name: t(\"stat-frames-lost\"), $element: CE(\"span\") },\r\n    dl: { name: t(\"downloaded\"), $element: CE(\"span\") },\r\n    ul: { name: t(\"uploaded\"), $element: CE(\"span\") },\r\n  };\r\n  $container;\r\n  boundOnStreamHudStateChanged;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.boundOnStreamHudStateChanged =\r\n        this.onStreamHudStateChanged.bind(this)),\r\n      BxEventBus.Stream.on(\r\n        \"ui.streamHud.rendered\",\r\n        this.boundOnStreamHudStateChanged\r\n      ),\r\n      this.render();\r\n  }\r\n  async start(glancing = !1) {\r\n    if (this.isRunning || !this.isHidden() || (glancing && this.isGlancing()))\r\n      return;\r\n    (this.isRunning = !0),\r\n      this.intervalId && clearInterval(this.intervalId),\r\n      await this.update(!0),\r\n      this.$container.classList.remove(\"bx-gone\"),\r\n      (this.$container.dataset.display = glancing ? \"glancing\" : \"fixed\"),\r\n      (this.intervalId = window.setInterval(\r\n        this.update,\r\n        this.REFRESH_INTERVAL\r\n      ));\r\n  }\r\n  async stop(glancing = !1) {\r\n    if (glancing && !this.isGlancing()) return;\r\n    (this.isRunning = !1),\r\n      this.intervalId && clearInterval(this.intervalId),\r\n      (this.intervalId = null),\r\n      this.$container.removeAttribute(\"data-display\"),\r\n      this.$container.classList.add(\"bx-gone\");\r\n  }\r\n  async toggle() {\r\n    if (this.isGlancing())\r\n      this.$container && (this.$container.dataset.display = \"fixed\");\r\n    else this.isHidden() ? await this.start() : await this.stop();\r\n  }\r\n  destroy() {\r\n    this.stop(), this.hideSettingsUi();\r\n  }\r\n  isHidden = () => this.$container.classList.contains(\"bx-gone\");\r\n  isGlancing = () => this.$container.dataset.display === \"glancing\";\r\n  onStreamHudStateChanged({ expanded }) {\r\n    if (!getStreamPref(\"stats.quickGlance.enabled\")) return;\r\n    if (expanded) this.isHidden() && this.start(!0);\r\n    else this.stop(!0);\r\n  }\r\n  update = async (forceUpdate = !1) => {\r\n    if (\r\n      (!forceUpdate && this.isHidden()) ||\r\n      !STATES.currentStream.peerConnection\r\n    ) {\r\n      this.destroy();\r\n      return;\r\n    }\r\n    let PREF_STATS_CONDITIONAL_FORMATTING = getStreamPref(\"stats.colors\"),\r\n      grade = \"\",\r\n      statsCollector = StreamStatsCollector.getInstance();\r\n    await statsCollector.collect();\r\n    let statKey;\r\n    for (statKey in this.stats) {\r\n      grade = \"\";\r\n      let stat = this.stats[statKey],\r\n        value = statsCollector.getStat(statKey),\r\n        $element = stat.$element;\r\n      if (\r\n        (($element.textContent = value.toString()),\r\n        PREF_STATS_CONDITIONAL_FORMATTING && \"grades\" in value)\r\n      )\r\n        grade = statsCollector.calculateGrade(value.current, value.grades);\r\n      if ($element.dataset.grade !== grade) $element.dataset.grade = grade;\r\n    }\r\n  };\r\n  refreshStyles() {\r\n    let PREF_ITEMS = getStreamPref(\"stats.items\"),\r\n      PREF_OPACITY_BG = getStreamPref(\"stats.opacity.background\"),\r\n      $container = this.$container;\r\n    if (\r\n      (($container.dataset.stats = \"[\" + PREF_ITEMS.join(\"][\") + \"]\"),\r\n      ($container.dataset.position = getStreamPref(\"stats.position\")),\r\n      PREF_OPACITY_BG === 0)\r\n    )\r\n      $container.style.removeProperty(\"background-color\"),\r\n        ($container.dataset.shadow = \"true\");\r\n    else\r\n      delete $container.dataset.shadow,\r\n        ($container.style.backgroundColor = `rgba(0, 0, 0, ${PREF_OPACITY_BG}%)`);\r\n    ($container.style.opacity = getStreamPref(\"stats.opacity.all\") + \"%\"),\r\n      ($container.style.fontSize = getStreamPref(\"stats.textSize\"));\r\n  }\r\n  hideSettingsUi() {\r\n    if (this.isGlancing() && !getStreamPref(\"stats.quickGlance.enabled\"))\r\n      this.stop();\r\n  }\r\n  async render() {\r\n    this.$container = CE(\"div\", { class: \"bx-stats-bar bx-gone\" });\r\n    let statKey;\r\n    for (statKey in this.stats) {\r\n      let stat = this.stats[statKey],\r\n        $div = CE(\r\n          \"div\",\r\n          { class: `bx-stat-${statKey}`, title: stat.name },\r\n          CE(\"label\", !1, statKey.toUpperCase()),\r\n          stat.$element\r\n        );\r\n      this.$container.appendChild($div);\r\n    }\r\n    this.refreshStyles(), document.documentElement.appendChild(this.$container);\r\n  }\r\n  static setupEvents() {\r\n    BxEventBus.Stream.on(\"state.playing\", () => {\r\n      let PREF_STATS_QUICK_GLANCE = getStreamPref(\"stats.quickGlance.enabled\"),\r\n        PREF_STATS_SHOW_WHEN_PLAYING = getStreamPref(\"stats.showWhenPlaying\"),\r\n        streamStats = StreamStats.getInstance();\r\n      if (PREF_STATS_SHOW_WHEN_PLAYING) streamStats.start();\r\n      else if (PREF_STATS_QUICK_GLANCE)\r\n        !PREF_STATS_SHOW_WHEN_PLAYING && streamStats.start(!0);\r\n    });\r\n  }\r\n  static refreshStyles() {\r\n    StreamStats.getInstance().refreshStyles();\r\n  }\r\n}\r\nclass KeyHelper {\r\n  static NON_PRINTABLE_KEYS = {\r\n    Backquote: \"`\",\r\n    Minus: \"-\",\r\n    Equal: \"=\",\r\n    BracketLeft: \"[\",\r\n    BracketRight: \"]\",\r\n    Backslash: \"\\\\\",\r\n    Semicolon: \";\",\r\n    Quote: \"'\",\r\n    Comma: \",\",\r\n    Period: \".\",\r\n    Slash: \"/\",\r\n    NumpadMultiply: \"Numpad *\",\r\n    NumpadAdd: \"Numpad +\",\r\n    NumpadSubtract: \"Numpad -\",\r\n    NumpadDecimal: \"Numpad .\",\r\n    NumpadDivide: \"Numpad /\",\r\n    NumpadEqual: \"Numpad =\",\r\n    Mouse0: \"Left Click\",\r\n    Mouse2: \"Right Click\",\r\n    Mouse1: \"Middle Click\",\r\n    ScrollUp: \"Scroll Up\",\r\n    ScrollDown: \"Scroll Down\",\r\n    ScrollLeft: \"Scroll Left\",\r\n    ScrollRight: \"Scroll Right\",\r\n  };\r\n  static getKeyFromEvent(e) {\r\n    let code = null,\r\n      modifiers;\r\n    if (e instanceof KeyboardEvent)\r\n      (code = e.code || e.key),\r\n        (modifiers = 0),\r\n        (modifiers ^= e.ctrlKey ? 1 : 0),\r\n        (modifiers ^= e.shiftKey ? 2 : 0),\r\n        (modifiers ^= e.altKey ? 4 : 0);\r\n    else if (e instanceof WheelEvent) {\r\n      if (e.deltaY < 0) code = \"ScrollUp\";\r\n      else if (e.deltaY > 0) code = \"ScrollDown\";\r\n      else if (e.deltaX < 0) code = \"ScrollLeft\";\r\n      else if (e.deltaX > 0) code = \"ScrollRight\";\r\n    } else if (e instanceof MouseEvent) code = \"Mouse\" + e.button;\r\n    if (code) {\r\n      let results = { code };\r\n      if (modifiers) results.modifiers = modifiers;\r\n      return results;\r\n    }\r\n    return null;\r\n  }\r\n  static getFullKeyCodeFromEvent(e) {\r\n    let key = KeyHelper.getKeyFromEvent(e);\r\n    return key ? `${key.code}:${key.modifiers || 0}` : \"\";\r\n  }\r\n  static parseFullKeyCode(str) {\r\n    if (!str) return null;\r\n    let tmp = str.split(\":\"),\r\n      code = tmp[0],\r\n      modifiers = parseInt(tmp[1]);\r\n    return { code, modifiers };\r\n  }\r\n  static codeToKeyName(key) {\r\n    let { code, modifiers } = key,\r\n      text = [\r\n        KeyHelper.NON_PRINTABLE_KEYS[code] ||\r\n          (code.startsWith(\"Key\") && code.substring(3)) ||\r\n          (code.startsWith(\"Digit\") && code.substring(5)) ||\r\n          (code.startsWith(\"Numpad\") && \"Numpad \" + code.substring(6)) ||\r\n          (code.startsWith(\"Arrow\") && \"Arrow \" + code.substring(5)) ||\r\n          (code.endsWith(\"Lock\") && code.replace(\"Lock\", \" Lock\")) ||\r\n          (code.endsWith(\"Left\") && \"Left \" + code.replace(\"Left\", \"\")) ||\r\n          (code.endsWith(\"Right\") && \"Right \" + code.replace(\"Right\", \"\")) ||\r\n          code,\r\n      ];\r\n    if (modifiers && modifiers !== 0) {\r\n      if (\r\n        !code.startsWith(\"Control\") &&\r\n        !code.startsWith(\"Shift\") &&\r\n        !code.startsWith(\"Alt\")\r\n      ) {\r\n        if (modifiers & 2) text.unshift(\"Shift\");\r\n        if (modifiers & 4) text.unshift(\"Alt\");\r\n        if (modifiers & 1) text.unshift(\"Ctrl\");\r\n      }\r\n    }\r\n    return text.join(\" + \");\r\n  }\r\n}\r\nclass PointerClient {\r\n  static instance;\r\n  static getInstance = () =>\r\n    PointerClient.instance ?? (PointerClient.instance = new PointerClient());\r\n  LOG_TAG = \"PointerClient\";\r\n  REQUIRED_PROTOCOL_VERSION = 2;\r\n  socket;\r\n  mkbHandler;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n  start(port, mkbHandler) {\r\n    if (!port) throw new Error(\"PointerServer port is 0\");\r\n    (this.mkbHandler = mkbHandler),\r\n      (this.socket = new WebSocket(`ws://localhost:${port}`)),\r\n      (this.socket.binaryType = \"arraybuffer\"),\r\n      this.socket.addEventListener(\"open\", (event) => {\r\n        BxLogger.info(this.LOG_TAG, \"connected\");\r\n      }),\r\n      this.socket.addEventListener(\"error\", (event) => {\r\n        BxLogger.error(this.LOG_TAG, event),\r\n          Toast.show(\"Cannot setup mouse: \" + event);\r\n      }),\r\n      this.socket.addEventListener(\"close\", (event) => {\r\n        this.socket = null;\r\n      }),\r\n      this.socket.addEventListener(\"message\", (event) => {\r\n        let dataView = new DataView(event.data),\r\n          messageType = dataView.getInt8(0),\r\n          offset = Int8Array.BYTES_PER_ELEMENT;\r\n        switch (messageType) {\r\n          case 127:\r\n            let protocolVersion = this.onProtocolVersion(dataView, offset);\r\n            if (\r\n              (BxLogger.info(this.LOG_TAG, \"Protocol version\", protocolVersion),\r\n              protocolVersion !== this.REQUIRED_PROTOCOL_VERSION)\r\n            )\r\n              alert(\"Required MKB protocol: \" + protocolVersion), this.stop();\r\n            break;\r\n          case 1:\r\n            this.onMove(dataView, offset);\r\n            break;\r\n          case 2:\r\n          case 3:\r\n            this.onPress(messageType, dataView, offset);\r\n            break;\r\n          case 4:\r\n            this.onScroll(dataView, offset);\r\n            break;\r\n          case 5:\r\n            this.onPointerCaptureChanged(dataView, offset);\r\n        }\r\n      });\r\n  }\r\n  onProtocolVersion(dataView, offset) {\r\n    return dataView.getUint16(offset);\r\n  }\r\n  onMove(dataView, offset) {\r\n    let x = dataView.getInt16(offset);\r\n    offset += Int16Array.BYTES_PER_ELEMENT;\r\n    let y = dataView.getInt16(offset);\r\n    this.mkbHandler?.handleMouseMove({ movementX: x, movementY: y });\r\n  }\r\n  onPress(messageType, dataView, offset) {\r\n    let button = dataView.getUint8(offset);\r\n    this.mkbHandler?.handleMouseClick({\r\n      pointerButton: button,\r\n      pressed: messageType === 2,\r\n    });\r\n  }\r\n  onScroll(dataView, offset) {\r\n    let vScroll = dataView.getInt16(offset);\r\n    offset += Int16Array.BYTES_PER_ELEMENT;\r\n    let hScroll = dataView.getInt16(offset);\r\n    this.mkbHandler?.handleMouseWheel({\r\n      vertical: vScroll,\r\n      horizontal: hScroll,\r\n    });\r\n  }\r\n  onPointerCaptureChanged(dataView, offset) {\r\n    dataView.getInt8(offset) !== 1 && this.mkbHandler?.stop();\r\n  }\r\n  stop() {\r\n    try {\r\n      this.socket?.close();\r\n    } catch (e) {}\r\n    this.socket = null;\r\n  }\r\n}\r\nclass MouseDataProvider {\r\n  mkbHandler;\r\n  constructor(handler) {\r\n    this.mkbHandler = handler;\r\n  }\r\n  init() {}\r\n  destroy() {}\r\n}\r\nclass MkbHandler {}\r\nclass MkbPopup {\r\n  static instance;\r\n  static getInstance = () =>\r\n    MkbPopup.instance ?? (MkbPopup.instance = new MkbPopup());\r\n  popupType;\r\n  $popup;\r\n  $title;\r\n  $btnActivate;\r\n  mkbHandler;\r\n  constructor() {\r\n    this.render(),\r\n      BxEventBus.Stream.on(\"keyboardShortcuts.updated\", () => {\r\n        let $newButton = this.createActivateButton();\r\n        this.$btnActivate.replaceWith($newButton),\r\n          (this.$btnActivate = $newButton);\r\n      });\r\n  }\r\n  attachMkbHandler(handler) {\r\n    (this.mkbHandler = handler),\r\n      (this.popupType =\r\n        handler instanceof NativeMkbHandler ? \"native\" : \"virtual\"),\r\n      (this.$popup.dataset.type = this.popupType),\r\n      (this.$title.innerText = t(\r\n        this.popupType === \"native\" ? \"native-mkb\" : \"virtual-controller\"\r\n      ));\r\n  }\r\n  toggleVisibility(show) {\r\n    this.$popup.classList.toggle(\"bx-gone\", !show),\r\n      show && this.moveOffscreen(!1);\r\n  }\r\n  moveOffscreen(doMove) {\r\n    this.$popup.classList.toggle(\"bx-offscreen\", doMove);\r\n  }\r\n  createActivateButton() {\r\n    let options = {\r\n        style: 1 | 1024 | 128,\r\n        label: t(\"activate\"),\r\n        onClick: this.onActivate,\r\n      },\r\n      shortcutKey = StreamSettings.findKeyboardShortcut(\"mkb.toggle\");\r\n    if (shortcutKey)\r\n      options.secondaryText = t(\"press-key-to-toggle-mkb\", {\r\n        key: KeyHelper.codeToKeyName(shortcutKey),\r\n      });\r\n    return createButton(options);\r\n  }\r\n  onActivate = (e) => {\r\n    e.preventDefault(), this.mkbHandler.toggle(!0);\r\n  };\r\n  render() {\r\n    (this.$popup = CE(\r\n      \"div\",\r\n      { class: \"bx-mkb-pointer-lock-msg bx-gone\" },\r\n      (this.$title = CE(\"p\")),\r\n      (this.$btnActivate = this.createActivateButton()),\r\n      CE(\r\n        \"div\",\r\n        !1,\r\n        createButton({\r\n          label: t(\"ignore\"),\r\n          style: 8,\r\n          onClick: (e) => {\r\n            e.preventDefault(),\r\n              this.mkbHandler.toggle(!1),\r\n              this.mkbHandler.waitForMouseData(!1);\r\n          },\r\n        }),\r\n        createButton({\r\n          label: t(\"manage\"),\r\n          icon: BxIcon.MANAGE,\r\n          style: 64,\r\n          onClick: () => {\r\n            let dialog = SettingsDialog.getInstance();\r\n            dialog.focusTab(\"mkb\"), dialog.show();\r\n          },\r\n        })\r\n      )\r\n    )),\r\n      document.documentElement.appendChild(this.$popup);\r\n  }\r\n  reset() {\r\n    this.toggleVisibility(!0), this.moveOffscreen(!1);\r\n  }\r\n}\r\nclass NativeMkbHandler extends MkbHandler {\r\n  static instance;\r\n  static getInstance() {\r\n    if (typeof NativeMkbHandler.instance === \"undefined\")\r\n      if (NativeMkbHandler.isAllowed())\r\n        NativeMkbHandler.instance = new NativeMkbHandler();\r\n      else NativeMkbHandler.instance = null;\r\n    return NativeMkbHandler.instance;\r\n  }\r\n  LOG_TAG = \"NativeMkbHandler\";\r\n  static isAllowed = () => {\r\n    return (\r\n      STATES.browser.capabilities.emulatedNativeMkb &&\r\n      getGlobalPref(\"nativeMkb.mode\") === \"on\"\r\n    );\r\n  };\r\n  pointerClient;\r\n  enabled = !1;\r\n  mouseButtonsPressed = 0;\r\n  mouseVerticalMultiply = 0;\r\n  mouseHorizontalMultiply = 0;\r\n  inputChannel;\r\n  popup;\r\n  constructor() {\r\n    super();\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.popup = MkbPopup.getInstance()),\r\n      this.popup.attachMkbHandler(this);\r\n  }\r\n  onKeyboardEvent(e) {\r\n    if (e.type === \"keyup\" && e.code === \"F8\") {\r\n      e.preventDefault(), this.toggle();\r\n      return;\r\n    }\r\n  }\r\n  onPointerLockRequested(e) {\r\n    AppInterface.requestPointerCapture(), this.start();\r\n  }\r\n  onPointerLockExited(e) {\r\n    AppInterface.releasePointerCapture(), this.stop();\r\n  }\r\n  onPollingModeChanged = (e) => {\r\n    let move = window.BX_STREAM_SETTINGS.xCloudPollingMode !== \"none\";\r\n    this.popup.moveOffscreen(move);\r\n  };\r\n  onDialogShown = () => {\r\n    document.pointerLockElement && document.exitPointerLock();\r\n  };\r\n  handleEvent(event) {\r\n    switch (event.type) {\r\n      case \"keyup\":\r\n        this.onKeyboardEvent(event);\r\n        break;\r\n      case BxEvent.POINTER_LOCK_REQUESTED:\r\n        this.onPointerLockRequested(event);\r\n        break;\r\n      case BxEvent.POINTER_LOCK_EXITED:\r\n        this.onPointerLockExited(event);\r\n        break;\r\n      case BxEvent.XCLOUD_POLLING_MODE_CHANGED:\r\n        this.onPollingModeChanged(event);\r\n        break;\r\n    }\r\n  }\r\n  init() {\r\n    (this.pointerClient = PointerClient.getInstance()),\r\n      (this.inputChannel = window.BX_EXPOSED.inputChannel),\r\n      this.updateInputConfigurationAsync(!1);\r\n    try {\r\n      this.pointerClient.start(STATES.pointerServerPort, this);\r\n    } catch (e) {\r\n      Toast.show(\"Cannot enable Mouse & Keyboard feature\");\r\n    }\r\n    (this.mouseVerticalMultiply = getStreamPref(\r\n      \"nativeMkb.scroll.sensitivityY\"\r\n    )),\r\n      (this.mouseHorizontalMultiply = getStreamPref(\r\n        \"nativeMkb.scroll.sensitivityX\"\r\n      )),\r\n      window.addEventListener(\"keyup\", this),\r\n      window.addEventListener(BxEvent.POINTER_LOCK_REQUESTED, this),\r\n      window.addEventListener(BxEvent.POINTER_LOCK_EXITED, this),\r\n      window.addEventListener(BxEvent.XCLOUD_POLLING_MODE_CHANGED, this),\r\n      BxEventBus.Script.on(\"dialog.shown\", this.onDialogShown);\r\n    let shortcutKey = StreamSettings.findKeyboardShortcut(\"mkb.toggle\");\r\n    if (shortcutKey) {\r\n      let msg = t(\"press-key-to-toggle-mkb\", {\r\n        key: `<b>${KeyHelper.codeToKeyName(shortcutKey)}</b>`,\r\n      });\r\n      Toast.show(msg, t(\"native-mkb\"), { html: !0 });\r\n    }\r\n    this.waitForMouseData(!1);\r\n  }\r\n  toggle(force) {\r\n    let setEnable;\r\n    if (typeof force !== \"undefined\") setEnable = force;\r\n    else setEnable = !this.enabled;\r\n    if (setEnable) document.documentElement.requestPointerLock();\r\n    else document.exitPointerLock();\r\n  }\r\n  updateInputConfigurationAsync(enabled) {\r\n    window.BX_EXPOSED.streamSession.updateInputConfigurationAsync({\r\n      enableKeyboardInput: enabled,\r\n      enableMouseInput: enabled,\r\n      enableAbsoluteMouse: !1,\r\n      enableTouchInput: !1,\r\n    });\r\n  }\r\n  start() {\r\n    this.resetMouseInput(),\r\n      (this.enabled = !0),\r\n      this.updateInputConfigurationAsync(!0),\r\n      (window.BX_EXPOSED.stopTakRendering = !0),\r\n      this.waitForMouseData(!1),\r\n      Toast.show(t(\"native-mkb\"), t(\"enabled\"), { instant: !0 });\r\n  }\r\n  stop() {\r\n    this.resetMouseInput(),\r\n      (this.enabled = !1),\r\n      this.updateInputConfigurationAsync(!1),\r\n      this.waitForMouseData(!0);\r\n  }\r\n  destroy() {\r\n    this.pointerClient?.stop(),\r\n      this.stop(),\r\n      window.removeEventListener(\"keyup\", this),\r\n      window.removeEventListener(BxEvent.POINTER_LOCK_REQUESTED, this),\r\n      window.removeEventListener(BxEvent.POINTER_LOCK_EXITED, this),\r\n      window.removeEventListener(BxEvent.XCLOUD_POLLING_MODE_CHANGED, this),\r\n      BxEventBus.Script.off(\"dialog.shown\", this.onDialogShown),\r\n      this.waitForMouseData(!1),\r\n      document.exitPointerLock();\r\n  }\r\n  handleMouseMove(data) {\r\n    this.sendMouseInput({\r\n      X: data.movementX,\r\n      Y: data.movementY,\r\n      Buttons: this.mouseButtonsPressed,\r\n      WheelX: 0,\r\n      WheelY: 0,\r\n    });\r\n  }\r\n  handleMouseClick(data) {\r\n    let { pointerButton, pressed } = data;\r\n    if (pressed) this.mouseButtonsPressed |= pointerButton;\r\n    else this.mouseButtonsPressed ^= pointerButton;\r\n    (this.mouseButtonsPressed = Math.max(0, this.mouseButtonsPressed)),\r\n      this.sendMouseInput({\r\n        X: 0,\r\n        Y: 0,\r\n        Buttons: this.mouseButtonsPressed,\r\n        WheelX: 0,\r\n        WheelY: 0,\r\n      });\r\n  }\r\n  handleMouseWheel(data) {\r\n    let { vertical, horizontal } = data,\r\n      mouseWheelX = horizontal;\r\n    if (this.mouseHorizontalMultiply && this.mouseHorizontalMultiply !== 1)\r\n      mouseWheelX *= this.mouseHorizontalMultiply;\r\n    let mouseWheelY = vertical;\r\n    if (this.mouseVerticalMultiply && this.mouseVerticalMultiply !== 1)\r\n      mouseWheelY *= this.mouseVerticalMultiply;\r\n    return (\r\n      this.sendMouseInput({\r\n        X: 0,\r\n        Y: 0,\r\n        Buttons: this.mouseButtonsPressed,\r\n        WheelX: mouseWheelX,\r\n        WheelY: mouseWheelY,\r\n      }),\r\n      !0\r\n    );\r\n  }\r\n  setVerticalScrollMultiplier(vertical) {\r\n    this.mouseVerticalMultiply = vertical;\r\n  }\r\n  setHorizontalScrollMultiplier(horizontal) {\r\n    this.mouseHorizontalMultiply = horizontal;\r\n  }\r\n  waitForMouseData(showPopup) {\r\n    this.popup.toggleVisibility(showPopup);\r\n  }\r\n  isEnabled() {\r\n    return this.enabled;\r\n  }\r\n  sendMouseInput(data) {\r\n    (data.Type = 0), this.inputChannel?.queueMouseInput(data);\r\n  }\r\n  resetMouseInput() {\r\n    (this.mouseButtonsPressed = 0),\r\n      this.sendMouseInput({ X: 0, Y: 0, Buttons: 0, WheelX: 0, WheelY: 0 });\r\n  }\r\n}\r\nfunction showGamepadToast(gamepad) {\r\n  if (gamepad.id === VIRTUAL_GAMEPAD_ID) return;\r\n  if (gamepad._noToast) return;\r\n  BxLogger.info(\"Gamepad\", gamepad);\r\n  let text = \"🎮\";\r\n  if (getStreamPref(\"localCoOp.enabled\")) text += ` #${gamepad.index + 1}`;\r\n  let gamepadId = gamepad.id.replace(/ \\(.*?Vendor: \\w+ Product: \\w+\\)$/, \"\");\r\n  text += ` - ${gamepadId}`;\r\n  let status;\r\n  if (gamepad.connected)\r\n    status =\r\n      (gamepad.vibrationActuator ? \"✅\" : \"❌\") + \" \" + t(\"vibration-status\");\r\n  else status = t(\"disconnected\");\r\n  Toast.show(text, status, { instant: !1 });\r\n}\r\nfunction simplifyGamepadName(name) {\r\n  return name.replace(\r\n    /\\s+\\(.*Vendor: ([0-9a-f]{4}) Product: ([0-9a-f]{4})\\)$/,\r\n    \" ($1-$2)\"\r\n  );\r\n}\r\nfunction getUniqueGamepadNames() {\r\n  let gamepads = window.navigator.getGamepads(),\r\n    names = [];\r\n  for (let gamepad of gamepads)\r\n    if (gamepad?.connected && gamepad.id !== VIRTUAL_GAMEPAD_ID)\r\n      !names.includes(gamepad.id) && names.push(gamepad.id);\r\n  return names;\r\n}\r\nfunction hasGamepad() {\r\n  let gamepads = window.navigator.getGamepads();\r\n  for (let gamepad of gamepads) if (gamepad?.connected) return !0;\r\n  return !1;\r\n}\r\nfunction generateVirtualControllerMapping(index, override = {}) {\r\n  return Object.assign(\r\n    {},\r\n    {\r\n      GamepadIndex: index,\r\n      A: 0,\r\n      B: 0,\r\n      X: 0,\r\n      Y: 0,\r\n      LeftShoulder: 0,\r\n      RightShoulder: 0,\r\n      LeftTrigger: 0,\r\n      RightTrigger: 0,\r\n      View: 0,\r\n      Menu: 0,\r\n      LeftThumb: 0,\r\n      RightThumb: 0,\r\n      DPadUp: 0,\r\n      DPadDown: 0,\r\n      DPadLeft: 0,\r\n      DPadRight: 0,\r\n      Nexus: 0,\r\n      LeftThumbXAxis: 0,\r\n      LeftThumbYAxis: 0,\r\n      RightThumbXAxis: 0,\r\n      RightThumbYAxis: 0,\r\n      PhysicalPhysicality: 0,\r\n      VirtualPhysicality: 0,\r\n      Dirty: !1,\r\n      Virtual: !1,\r\n    },\r\n    override\r\n  );\r\n}\r\nfunction getGamepadPrompt(gamepadKey) {\r\n  return GamepadKeyName[gamepadKey][1];\r\n}\r\nvar XCLOUD_GAMEPAD_KEY_MAPPING = {\r\n  0: \"A\",\r\n  1: \"B\",\r\n  2: \"X\",\r\n  3: \"Y\",\r\n  12: \"DPadUp\",\r\n  15: \"DPadRight\",\r\n  13: \"DPadDown\",\r\n  14: \"DPadLeft\",\r\n  4: \"LeftShoulder\",\r\n  5: \"RightShoulder\",\r\n  6: \"LeftTrigger\",\r\n  7: \"RightTrigger\",\r\n  10: \"LeftThumb\",\r\n  11: \"RightThumb\",\r\n  104: \"LeftStickAxes\",\r\n  204: \"RightStickAxes\",\r\n  8: \"View\",\r\n  9: \"Menu\",\r\n  16: \"Nexus\",\r\n  17: \"Share\",\r\n  102: \"LeftThumbXAxis\",\r\n  103: \"LeftThumbXAxis\",\r\n  100: \"LeftThumbYAxis\",\r\n  101: \"LeftThumbYAxis\",\r\n  202: \"RightThumbXAxis\",\r\n  203: \"RightThumbXAxis\",\r\n  200: \"RightThumbYAxis\",\r\n  201: \"RightThumbYAxis\",\r\n};\r\nfunction toXcloudGamepadKey(gamepadKey) {\r\n  return XCLOUD_GAMEPAD_KEY_MAPPING[gamepadKey];\r\n}\r\nvar PointerToMouseButton = { 1: 0, 2: 2, 4: 1 },\r\n  VIRTUAL_GAMEPAD_ID = \"Better xCloud Virtual Controller\";\r\nclass WebSocketMouseDataProvider extends MouseDataProvider {\r\n  pointerClient;\r\n  isConnected = !1;\r\n  init() {\r\n    (this.pointerClient = PointerClient.getInstance()), (this.isConnected = !1);\r\n    try {\r\n      this.pointerClient.start(STATES.pointerServerPort, this.mkbHandler),\r\n        (this.isConnected = !0);\r\n    } catch (e) {\r\n      Toast.show(\"Cannot enable Mouse & Keyboard feature\");\r\n    }\r\n  }\r\n  start() {\r\n    this.isConnected && AppInterface.requestPointerCapture();\r\n  }\r\n  stop() {\r\n    this.isConnected && AppInterface.releasePointerCapture();\r\n  }\r\n  destroy() {\r\n    this.isConnected && this.pointerClient?.stop();\r\n  }\r\n}\r\nclass PointerLockMouseDataProvider extends MouseDataProvider {\r\n  start() {\r\n    window.addEventListener(\"mousemove\", this.onMouseMoveEvent),\r\n      window.addEventListener(\"mousedown\", this.onMouseEvent),\r\n      window.addEventListener(\"mouseup\", this.onMouseEvent),\r\n      window.addEventListener(\"wheel\", this.onWheelEvent, { passive: !1 }),\r\n      window.addEventListener(\"contextmenu\", this.disableContextMenu);\r\n  }\r\n  stop() {\r\n    document.pointerLockElement && document.exitPointerLock(),\r\n      window.removeEventListener(\"mousemove\", this.onMouseMoveEvent),\r\n      window.removeEventListener(\"mousedown\", this.onMouseEvent),\r\n      window.removeEventListener(\"mouseup\", this.onMouseEvent),\r\n      window.removeEventListener(\"wheel\", this.onWheelEvent),\r\n      window.removeEventListener(\"contextmenu\", this.disableContextMenu);\r\n  }\r\n  onMouseMoveEvent = (e) => {\r\n    this.mkbHandler.handleMouseMove({\r\n      movementX: e.movementX,\r\n      movementY: e.movementY,\r\n    });\r\n  };\r\n  onMouseEvent = (e) => {\r\n    e.preventDefault();\r\n    let data = { mouseButton: e.button, pressed: e.type === \"mousedown\" };\r\n    this.mkbHandler.handleMouseClick(data);\r\n  };\r\n  onWheelEvent = (e) => {\r\n    if (!KeyHelper.getKeyFromEvent(e)) return;\r\n    let data = { vertical: e.deltaY, horizontal: e.deltaX };\r\n    if (this.mkbHandler.handleMouseWheel(data)) e.preventDefault();\r\n  };\r\n  disableContextMenu = (e) => e.preventDefault();\r\n}\r\nclass EmulatedMkbHandler extends MkbHandler {\r\n  static instance;\r\n  static getInstance() {\r\n    if (typeof EmulatedMkbHandler.instance === \"undefined\")\r\n      if (EmulatedMkbHandler.isAllowed())\r\n        EmulatedMkbHandler.instance = new EmulatedMkbHandler();\r\n      else EmulatedMkbHandler.instance = null;\r\n    return EmulatedMkbHandler.instance;\r\n  }\r\n  static LOG_TAG = \"EmulatedMkbHandler\";\r\n  static isAllowed() {\r\n    return (\r\n      getGlobalPref(\"mkb.enabled\") && (AppInterface || !UserAgent.isMobile())\r\n    );\r\n  }\r\n  PRESET;\r\n  VIRTUAL_GAMEPAD = {\r\n    id: VIRTUAL_GAMEPAD_ID,\r\n    index: 0,\r\n    connected: !1,\r\n    hapticActuators: null,\r\n    mapping: \"standard\",\r\n    axes: [0, 0, 0, 0],\r\n    buttons: new Array(17).fill(null).map(() => ({ pressed: !1, value: 0 })),\r\n    timestamp: performance.now(),\r\n    vibrationActuator: null,\r\n  };\r\n  nativeGetGamepads;\r\n  xCloudGamepad = generateVirtualControllerMapping(0);\r\n  initialized = !1;\r\n  enabled = !1;\r\n  mouseDataProvider;\r\n  isPolling = !1;\r\n  prevWheelCode = null;\r\n  wheelStoppedTimeoutId = null;\r\n  detectMouseStoppedTimeoutId = null;\r\n  escKeyDownTime = -1;\r\n  LEFT_STICK_X = [];\r\n  LEFT_STICK_Y = [];\r\n  RIGHT_STICK_X = [];\r\n  RIGHT_STICK_Y = [];\r\n  popup;\r\n  STICK_MAP = {\r\n    102: [this.LEFT_STICK_X, -1],\r\n    103: [this.LEFT_STICK_X, 1],\r\n    100: [this.LEFT_STICK_Y, 1],\r\n    101: [this.LEFT_STICK_Y, -1],\r\n    202: [this.RIGHT_STICK_X, -1],\r\n    203: [this.RIGHT_STICK_X, 1],\r\n    200: [this.RIGHT_STICK_Y, 1],\r\n    201: [this.RIGHT_STICK_Y, -1],\r\n  };\r\n  constructor() {\r\n    super();\r\n    BxLogger.info(EmulatedMkbHandler.LOG_TAG, \"constructor()\"),\r\n      (this.nativeGetGamepads = window.navigator.getGamepads.bind(\r\n        window.navigator\r\n      )),\r\n      (this.popup = MkbPopup.getInstance()),\r\n      this.popup.attachMkbHandler(this);\r\n  }\r\n  isEnabled = () => this.enabled;\r\n  patchedGetGamepads = () => {\r\n    let gamepads = this.nativeGetGamepads() || [];\r\n    return (\r\n      (gamepads[this.VIRTUAL_GAMEPAD.index] = this.VIRTUAL_GAMEPAD), gamepads\r\n    );\r\n  };\r\n  getVirtualGamepad = () => this.VIRTUAL_GAMEPAD;\r\n  updateStick(stick, x, y) {\r\n    let gamepad = this.xCloudGamepad;\r\n    if (stick === 0)\r\n      (gamepad.LeftThumbXAxis = x), (gamepad.LeftThumbYAxis = -y);\r\n    else (gamepad.RightThumbXAxis = x), (gamepad.RightThumbYAxis = -y);\r\n    window.BX_EXPOSED.inputChannel?.sendGamepadInput(performance.now(), [\r\n      this.xCloudGamepad,\r\n    ]);\r\n  }\r\n  vectorLength = (x, y) => Math.sqrt(x ** 2 + y ** 2);\r\n  resetXcloudGamepads() {\r\n    let index = getStreamPref(\"mkb.p1.slot\") - 1;\r\n    (this.xCloudGamepad = generateVirtualControllerMapping(0, {\r\n      GamepadIndex: getStreamPref(\"localCoOp.enabled\") ? index : 0,\r\n      Dirty: !0,\r\n    })),\r\n      (this.VIRTUAL_GAMEPAD.index = index);\r\n  }\r\n  pressButton(buttonIndex, pressed) {\r\n    let xCloudKey = toXcloudGamepadKey(buttonIndex);\r\n    if (buttonIndex >= 100) {\r\n      let [valueArr] = this.STICK_MAP[buttonIndex];\r\n      for (let i = valueArr.length - 1; i >= 0; i--)\r\n        if (valueArr[i] === buttonIndex) valueArr.splice(i, 1);\r\n      pressed && valueArr.push(buttonIndex);\r\n      let value;\r\n      if (valueArr.length)\r\n        value = this.STICK_MAP[valueArr[valueArr.length - 1]][1];\r\n      else value = 0;\r\n      this.xCloudGamepad[xCloudKey] = value;\r\n    } else this.xCloudGamepad[xCloudKey] = pressed ? 1 : 0;\r\n    window.BX_EXPOSED.inputChannel?.sendGamepadInput(performance.now(), [\r\n      this.xCloudGamepad,\r\n    ]);\r\n  }\r\n  onKeyboardEvent = (e) => {\r\n    let isKeyDown = e.type === \"keydown\";\r\n    if (e.code === \"Escape\") {\r\n      if ((e.preventDefault(), this.enabled && isKeyDown)) {\r\n        if (this.escKeyDownTime === -1) this.escKeyDownTime = performance.now();\r\n        else if (performance.now() - this.escKeyDownTime >= 1000) this.stop();\r\n      } else this.escKeyDownTime = -1;\r\n      return;\r\n    }\r\n    if (!this.isPolling || !this.PRESET) return;\r\n    if (window.BX_STREAM_SETTINGS.xCloudPollingMode !== \"none\") return;\r\n    let buttonIndex = this.PRESET.mapping[e.code || e.key];\r\n    if (typeof buttonIndex === \"undefined\") return;\r\n    if (e.repeat) return;\r\n    e.preventDefault(), this.pressButton(buttonIndex, isKeyDown);\r\n  };\r\n  onMouseStopped = () => {\r\n    if (((this.detectMouseStoppedTimeoutId = null), !this.PRESET)) return;\r\n    let analog = this.PRESET.mouse[\"mapTo\"] === 1 ? 0 : 1;\r\n    this.updateStick(analog, 0, 0);\r\n  };\r\n  handleMouseClick(data) {\r\n    let mouseButton;\r\n    if (typeof data.mouseButton !== \"undefined\") mouseButton = data.mouseButton;\r\n    else if (typeof data.pointerButton !== \"undefined\")\r\n      mouseButton = PointerToMouseButton[data.pointerButton];\r\n    let key = { code: \"Mouse\" + mouseButton };\r\n    if (!this.PRESET) return;\r\n    let buttonIndex = this.PRESET.mapping[key.code];\r\n    if (typeof buttonIndex === \"undefined\") return;\r\n    this.pressButton(buttonIndex, data.pressed);\r\n  }\r\n  handleMouseMove(data) {\r\n    let preset = this.PRESET;\r\n    if (!preset) return;\r\n    let mouseMapTo = preset.mouse[\"mapTo\"];\r\n    if (mouseMapTo === 0) return;\r\n    this.detectMouseStoppedTimeoutId &&\r\n      clearTimeout(this.detectMouseStoppedTimeoutId),\r\n      (this.detectMouseStoppedTimeoutId = window.setTimeout(\r\n        this.onMouseStopped,\r\n        50\r\n      ));\r\n    let deadzoneCounterweight = preset.mouse[\"deadzoneCounterweight\"],\r\n      x = data.movementX * preset.mouse[\"sensitivityX\"],\r\n      y = data.movementY * preset.mouse[\"sensitivityY\"],\r\n      length = this.vectorLength(x, y);\r\n    if (length !== 0 && length < deadzoneCounterweight)\r\n      (x *= deadzoneCounterweight / length),\r\n        (y *= deadzoneCounterweight / length);\r\n    else if (length > 1.1) (x *= 1.1 / length), (y *= 1.1 / length);\r\n    let analog = mouseMapTo === 1 ? 0 : 1;\r\n    this.updateStick(analog, x, y);\r\n  }\r\n  handleMouseWheel(data) {\r\n    let code = \"\";\r\n    if (data.vertical < 0) code = \"ScrollUp\";\r\n    else if (data.vertical > 0) code = \"ScrollDown\";\r\n    else if (data.horizontal < 0) code = \"ScrollLeft\";\r\n    else if (data.horizontal > 0) code = \"ScrollRight\";\r\n    if (!code) return !1;\r\n    if (!this.PRESET) return !1;\r\n    let key = { code },\r\n      buttonIndex = this.PRESET.mapping[key.code];\r\n    if (typeof buttonIndex === \"undefined\") return !1;\r\n    if (this.prevWheelCode === null || this.prevWheelCode === key.code)\r\n      this.wheelStoppedTimeoutId && clearTimeout(this.wheelStoppedTimeoutId),\r\n        this.pressButton(buttonIndex, !0);\r\n    return (\r\n      (this.wheelStoppedTimeoutId = window.setTimeout(() => {\r\n        (this.prevWheelCode = null), this.pressButton(buttonIndex, !1);\r\n      }, 20)),\r\n      !0\r\n    );\r\n  }\r\n  async toggle(force) {\r\n    if (!this.initialized) return;\r\n    if (typeof force !== \"undefined\") this.enabled = force;\r\n    else this.enabled = !this.enabled;\r\n    if (this.enabled)\r\n      try {\r\n        await document.body.requestPointerLock({ unadjustedMovement: !0 });\r\n      } catch (e) {\r\n        document.body.requestPointerLock(), console.log(e);\r\n      }\r\n    else document.pointerLockElement && document.exitPointerLock();\r\n  }\r\n  refreshPresetData() {\r\n    (this.PRESET = window.BX_STREAM_SETTINGS.mkbPreset),\r\n      this.resetXcloudGamepads();\r\n  }\r\n  waitForMouseData(showPopup) {\r\n    this.popup.toggleVisibility(showPopup);\r\n  }\r\n  onPollingModeChanged = (e) => {\r\n    let move = window.BX_STREAM_SETTINGS.xCloudPollingMode !== \"none\";\r\n    this.popup.moveOffscreen(move);\r\n  };\r\n  onDialogShown = () => {\r\n    document.pointerLockElement && document.exitPointerLock();\r\n  };\r\n  onPointerLockChange = () => {\r\n    if (document.pointerLockElement) this.start();\r\n    else this.stop();\r\n  };\r\n  onPointerLockError = (e) => {\r\n    console.log(e), this.stop();\r\n  };\r\n  onPointerLockRequested = () => {\r\n    this.start();\r\n  };\r\n  onPointerLockExited = () => {\r\n    this.mouseDataProvider?.stop();\r\n  };\r\n  handleEvent(event) {\r\n    switch (event.type) {\r\n      case BxEvent.POINTER_LOCK_REQUESTED:\r\n        this.onPointerLockRequested();\r\n        break;\r\n      case BxEvent.POINTER_LOCK_EXITED:\r\n        this.onPointerLockExited();\r\n        break;\r\n    }\r\n  }\r\n  init() {\r\n    if (!STATES.browser.capabilities.mkb) {\r\n      this.initialized = !1;\r\n      return;\r\n    }\r\n    if (\r\n      ((this.initialized = !0),\r\n      this.refreshPresetData(),\r\n      (this.enabled = !1),\r\n      AppInterface)\r\n    )\r\n      this.mouseDataProvider = new WebSocketMouseDataProvider(this);\r\n    else this.mouseDataProvider = new PointerLockMouseDataProvider(this);\r\n    if (\r\n      (this.mouseDataProvider.init(),\r\n      window.addEventListener(\"keydown\", this.onKeyboardEvent),\r\n      window.addEventListener(\"keyup\", this.onKeyboardEvent),\r\n      window.addEventListener(\r\n        BxEvent.XCLOUD_POLLING_MODE_CHANGED,\r\n        this.onPollingModeChanged\r\n      ),\r\n      BxEventBus.Script.on(\"dialog.shown\", this.onDialogShown),\r\n      AppInterface)\r\n    )\r\n      window.addEventListener(BxEvent.POINTER_LOCK_REQUESTED, this),\r\n        window.addEventListener(BxEvent.POINTER_LOCK_EXITED, this);\r\n    else\r\n      document.addEventListener(\"pointerlockchange\", this.onPointerLockChange),\r\n        document.addEventListener(\"pointerlockerror\", this.onPointerLockError);\r\n    if ((MkbPopup.getInstance().reset(), AppInterface)) {\r\n      let shortcutKey = StreamSettings.findKeyboardShortcut(\"mkb.toggle\");\r\n      if (shortcutKey) {\r\n        let msg = t(\"press-key-to-toggle-mkb\", {\r\n          key: `<b>${KeyHelper.codeToKeyName(shortcutKey)}</b>`,\r\n        });\r\n        Toast.show(msg, t(\"native-mkb\"), { html: !0 });\r\n      }\r\n      this.waitForMouseData(!1);\r\n    } else this.waitForMouseData(!0);\r\n  }\r\n  destroy() {\r\n    if (!this.initialized) return;\r\n    if (\r\n      ((this.initialized = !1),\r\n      (this.isPolling = !1),\r\n      (this.enabled = !1),\r\n      this.stop(),\r\n      this.waitForMouseData(!1),\r\n      document.exitPointerLock(),\r\n      window.removeEventListener(\"keydown\", this.onKeyboardEvent),\r\n      window.removeEventListener(\"keyup\", this.onKeyboardEvent),\r\n      AppInterface)\r\n    )\r\n      window.removeEventListener(BxEvent.POINTER_LOCK_REQUESTED, this),\r\n        window.removeEventListener(BxEvent.POINTER_LOCK_EXITED, this);\r\n    else\r\n      document.removeEventListener(\r\n        \"pointerlockchange\",\r\n        this.onPointerLockChange\r\n      ),\r\n        document.removeEventListener(\r\n          \"pointerlockerror\",\r\n          this.onPointerLockError\r\n        );\r\n    window.removeEventListener(\r\n      BxEvent.XCLOUD_POLLING_MODE_CHANGED,\r\n      this.onPollingModeChanged\r\n    ),\r\n      BxEventBus.Script.off(\"dialog.shown\", this.onDialogShown),\r\n      this.mouseDataProvider?.destroy(),\r\n      window.removeEventListener(\r\n        BxEvent.XCLOUD_POLLING_MODE_CHANGED,\r\n        this.onPollingModeChanged\r\n      );\r\n  }\r\n  start() {\r\n    if (!this.enabled)\r\n      (this.enabled = !0),\r\n        Toast.show(t(\"virtual-controller\"), t(\"enabled\"), { instant: !0 });\r\n    (this.isPolling = !0),\r\n      (this.escKeyDownTime = -1),\r\n      window.BX_EXPOSED.toggleLocalCoOp(getStreamPref(\"localCoOp.enabled\")),\r\n      this.resetXcloudGamepads(),\r\n      (window.navigator.getGamepads = this.patchedGetGamepads),\r\n      this.waitForMouseData(!1),\r\n      this.mouseDataProvider?.start();\r\n    let virtualGamepad = this.getVirtualGamepad();\r\n    (virtualGamepad.connected = !0),\r\n      (virtualGamepad.timestamp = performance.now()),\r\n      BxEvent.dispatch(window, \"gamepadconnected\", { gamepad: virtualGamepad }),\r\n      (window.BX_EXPOSED.stopTakRendering = !0),\r\n      Toast.show(t(\"virtual-controller\"), t(\"enabled\"), { instant: !0 });\r\n  }\r\n  stop() {\r\n    (this.enabled = !1), (this.isPolling = !1), (this.escKeyDownTime = -1);\r\n    let virtualGamepad = this.getVirtualGamepad();\r\n    if (virtualGamepad.connected)\r\n      this.resetXcloudGamepads(),\r\n        (virtualGamepad.connected = !1),\r\n        (virtualGamepad.timestamp = performance.now()),\r\n        BxEvent.dispatch(window, \"gamepaddisconnected\", {\r\n          gamepad: virtualGamepad,\r\n        }),\r\n        (window.navigator.getGamepads = this.nativeGetGamepads);\r\n    this.waitForMouseData(!0), this.mouseDataProvider?.stop();\r\n  }\r\n  static setupEvents() {\r\n    if (\r\n      (BxEventBus.Stream.on(\"state.playing\", () => {\r\n        if (STATES.currentStream.titleInfo?.details.hasMkbSupport)\r\n          NativeMkbHandler.getInstance()?.init();\r\n        else EmulatedMkbHandler.getInstance()?.init();\r\n      }),\r\n      EmulatedMkbHandler.isAllowed())\r\n    )\r\n      BxEventBus.Stream.on(\"mkb.setting.updated\", () => {\r\n        EmulatedMkbHandler.getInstance()?.refreshPresetData();\r\n      });\r\n  }\r\n}\r\nclass StreamSettings {\r\n  static settings = {\r\n    settings: {},\r\n    xCloudPollingMode: \"all\",\r\n    deviceVibrationIntensity: 0,\r\n    controllerPollingRate: 4,\r\n    controllers: {},\r\n    mkbPreset: null,\r\n    keyboardShortcuts: {},\r\n  };\r\n  static async refreshControllerSettings() {\r\n    let settings = StreamSettings.settings,\r\n      controllers = {},\r\n      shortcutsTable = ControllerShortcutsTable.getInstance(),\r\n      mappingTable = ControllerCustomizationsTable.getInstance(),\r\n      gamepads = window.navigator.getGamepads();\r\n    for (let gamepad of gamepads) {\r\n      if (!gamepad?.connected) continue;\r\n      if (gamepad.id === VIRTUAL_GAMEPAD_ID) continue;\r\n      let controllerSetting = STORAGE.Stream.getControllerSetting(gamepad.id),\r\n        shortcutsPreset = await shortcutsTable.getPreset(\r\n          controllerSetting.shortcutPresetId\r\n        ),\r\n        shortcutsMapping = !shortcutsPreset\r\n          ? null\r\n          : shortcutsPreset.data.mapping,\r\n        customizationPreset = await mappingTable.getPreset(\r\n          controllerSetting.customizationPresetId\r\n        ),\r\n        customizationData = StreamSettings.convertControllerCustomization(\r\n          customizationPreset?.data\r\n        );\r\n      controllers[gamepad.id] = {\r\n        shortcuts: shortcutsMapping,\r\n        customization: customizationData,\r\n      };\r\n    }\r\n    (settings.controllers = controllers),\r\n      (settings.controllerPollingRate = getStreamPref(\r\n        \"controller.pollingRate\"\r\n      )),\r\n      await StreamSettings.refreshDeviceVibration();\r\n  }\r\n  static preCalculateControllerRange(obj, target, values) {\r\n    if (values && Array.isArray(values)) {\r\n      let [from, to] = values;\r\n      if (from > 1 || to < 100) obj[target] = [from / 100, to / 100];\r\n    }\r\n  }\r\n  static convertControllerCustomization(customization) {\r\n    if (!customization) return null;\r\n    let converted = { mapping: {}, ranges: {}, vibrationIntensity: 1 },\r\n      gamepadKey;\r\n    for (gamepadKey in customization.mapping) {\r\n      let gamepadStr = toXcloudGamepadKey(gamepadKey);\r\n      if (!gamepadStr) continue;\r\n      let mappedKey = customization.mapping[gamepadKey];\r\n      if (typeof mappedKey === \"number\")\r\n        converted.mapping[gamepadStr] = toXcloudGamepadKey(mappedKey);\r\n      else converted.mapping[gamepadStr] = !1;\r\n    }\r\n    return (\r\n      StreamSettings.preCalculateControllerRange(\r\n        converted.ranges,\r\n        \"LeftTrigger\",\r\n        customization.settings.leftTriggerRange\r\n      ),\r\n      StreamSettings.preCalculateControllerRange(\r\n        converted.ranges,\r\n        \"RightTrigger\",\r\n        customization.settings.rightTriggerRange\r\n      ),\r\n      StreamSettings.preCalculateControllerRange(\r\n        converted.ranges,\r\n        \"LeftThumb\",\r\n        customization.settings.leftStickDeadzone\r\n      ),\r\n      StreamSettings.preCalculateControllerRange(\r\n        converted.ranges,\r\n        \"RightThumb\",\r\n        customization.settings.rightStickDeadzone\r\n      ),\r\n      (converted.vibrationIntensity =\r\n        customization.settings.vibrationIntensity / 100),\r\n      converted\r\n    );\r\n  }\r\n  static async refreshDeviceVibration() {\r\n    if (!STATES.browser.capabilities.deviceVibration) return;\r\n    let mode = getStreamPref(\"deviceVibration.mode\"),\r\n      intensity = 0;\r\n    if (mode === \"on\" || (mode === \"auto\" && !hasGamepad()))\r\n      intensity = getStreamPref(\"deviceVibration.intensity\") / 100;\r\n    (StreamSettings.settings.deviceVibrationIntensity = intensity),\r\n      BxEventBus.Stream.emit(\"deviceVibration.updated\", {});\r\n  }\r\n  static async refreshMkbSettings() {\r\n    let settings = StreamSettings.settings,\r\n      presetId = getStreamPref(\"mkb.p1.preset.mappingId\"),\r\n      orgPresetData = (\r\n        await MkbMappingPresetsTable.getInstance().getPreset(presetId)\r\n      ).data,\r\n      converted = {\r\n        mapping: {},\r\n        mouse: Object.assign({}, orgPresetData.mouse),\r\n      },\r\n      key;\r\n    for (key in orgPresetData.mapping) {\r\n      let buttonIndex = parseInt(key);\r\n      if (!orgPresetData.mapping[buttonIndex]) continue;\r\n      for (let keyName of orgPresetData.mapping[buttonIndex])\r\n        if (typeof keyName === \"string\")\r\n          converted.mapping[keyName] = buttonIndex;\r\n    }\r\n    let mouse = converted.mouse;\r\n    (mouse[\"sensitivityX\"] *= 0.001),\r\n      (mouse[\"sensitivityY\"] *= 0.001),\r\n      (mouse[\"deadzoneCounterweight\"] *= 0.01),\r\n      (settings.mkbPreset = converted),\r\n      BxEventBus.Stream.emit(\"mkb.setting.updated\", {});\r\n  }\r\n  static async refreshKeyboardShortcuts() {\r\n    let settings = StreamSettings.settings,\r\n      presetId = getStreamPref(\"keyboardShortcuts.preset.inGameId\");\r\n    if (presetId === 0) {\r\n      (settings.keyboardShortcuts = null),\r\n        BxEventBus.Stream.emit(\"keyboardShortcuts.updated\", {});\r\n      return;\r\n    }\r\n    let orgPresetData = (\r\n        await KeyboardShortcutsTable.getInstance().getPreset(presetId)\r\n      ).data.mapping,\r\n      converted = {},\r\n      action;\r\n    for (action in orgPresetData) {\r\n      let info = orgPresetData[action],\r\n        key = `${info.code}:${info.modifiers || 0}`;\r\n      converted[key] = action;\r\n    }\r\n    (settings.keyboardShortcuts = converted),\r\n      BxEventBus.Stream.emit(\"keyboardShortcuts.updated\", {});\r\n  }\r\n  static async refreshAllSettings() {\r\n    (window.BX_STREAM_SETTINGS = StreamSettings.settings),\r\n      await StreamSettings.refreshControllerSettings(),\r\n      await StreamSettings.refreshMkbSettings(),\r\n      await StreamSettings.refreshKeyboardShortcuts();\r\n  }\r\n  static findKeyboardShortcut(targetAction) {\r\n    let shortcuts = StreamSettings.settings.keyboardShortcuts;\r\n    for (let codeStr in shortcuts)\r\n      if (shortcuts[codeStr] === targetAction)\r\n        return KeyHelper.parseFullKeyCode(codeStr);\r\n    return null;\r\n  }\r\n  static setup() {\r\n    let listener = () => {\r\n      StreamSettings.refreshControllerSettings();\r\n    };\r\n    window.addEventListener(\"gamepadconnected\", listener),\r\n      window.addEventListener(\"gamepaddisconnected\", listener),\r\n      StreamSettings.refreshAllSettings();\r\n  }\r\n}\r\nclass BxNumberStepper extends HTMLInputElement {\r\n  intervalId = null;\r\n  isHolding;\r\n  controlValue;\r\n  controlMin;\r\n  controlMax;\r\n  uiMin;\r\n  uiMax;\r\n  steps;\r\n  options;\r\n  onChange;\r\n  $text;\r\n  $btnInc;\r\n  $btnDec;\r\n  $range;\r\n  onRangeInput;\r\n  onClick;\r\n  onPointerUp;\r\n  onPointerDown;\r\n  setValue;\r\n  normalizeValue;\r\n  static create(key, value, min, max, options = {}, onChange) {\r\n    (options = options || {}),\r\n      (options.suffix = options.suffix || \"\"),\r\n      (options.disabled = !!options.disabled),\r\n      (options.hideSlider = !!options.hideSlider);\r\n    let $text,\r\n      $btnInc,\r\n      $btnDec,\r\n      $range,\r\n      self = CE(\r\n        \"div\",\r\n        {\r\n          class: \"bx-number-stepper\",\r\n          id: `bx_setting_${escapeCssSelector(key)}`,\r\n        },\r\n        CE(\r\n          \"div\",\r\n          !1,\r\n          ($btnDec = CE(\r\n            \"button\",\r\n            {\r\n              _dataset: { type: \"dec\" },\r\n              type: \"button\",\r\n              class: options.hideSlider ? \"bx-focusable\" : \"\",\r\n              tabindex: options.hideSlider ? 0 : -1,\r\n            },\r\n            \"-\"\r\n          )),\r\n          ($text = CE(\"span\")),\r\n          ($btnInc = CE(\r\n            \"button\",\r\n            {\r\n              _dataset: { type: \"inc\" },\r\n              type: \"button\",\r\n              class: options.hideSlider ? \"bx-focusable\" : \"\",\r\n              tabindex: options.hideSlider ? 0 : -1,\r\n            },\r\n            \"+\"\r\n          ))\r\n        )\r\n      );\r\n    if (\r\n      ((self.$text = $text),\r\n      (self.$btnInc = $btnInc),\r\n      (self.$btnDec = $btnDec),\r\n      (self.onChange = onChange),\r\n      (self.onRangeInput = BxNumberStepper.onRangeInput.bind(self)),\r\n      (self.onClick = BxNumberStepper.onClick.bind(self)),\r\n      (self.onPointerUp = BxNumberStepper.onPointerUp.bind(self)),\r\n      (self.onPointerDown = BxNumberStepper.onPointerDown.bind(self)),\r\n      (self.controlMin = min),\r\n      (self.controlMax = max),\r\n      (self.isHolding = !1),\r\n      (self.options = options),\r\n      (self.uiMin = options.reverse ? -max : min),\r\n      (self.uiMax = options.reverse ? -min : max),\r\n      (self.steps = Math.max(options.steps || 1, 1)),\r\n      BxNumberStepper.setValue.call(self, value),\r\n      options.disabled)\r\n    )\r\n      return (\r\n        ($btnInc.disabled = !0),\r\n        $btnInc.classList.add(\"bx-inactive\"),\r\n        ($btnDec.disabled = !0),\r\n        $btnDec.classList.add(\"bx-inactive\"),\r\n        (self.disabled = !0),\r\n        self\r\n      );\r\n    if (\r\n      (($range = CE(\"input\", {\r\n        id: `bx_inp_setting_${key}`,\r\n        type: \"range\",\r\n        min: self.uiMin,\r\n        max: self.uiMax,\r\n        value: options.reverse ? -value : value,\r\n        step: self.steps,\r\n        tabindex: 0,\r\n      })),\r\n      (self.$range = $range),\r\n      options.hideSlider && $range.classList.add(\"bx-gone\"),\r\n      self.addEventListener(\"input\", self.onRangeInput),\r\n      self.appendChild($range),\r\n      options.ticks || options.exactTicks)\r\n    ) {\r\n      let markersId = `markers-${key}`,\r\n        $markers = CE(\"datalist\", { id: markersId });\r\n      if (($range.setAttribute(\"list\", markersId), options.exactTicks)) {\r\n        let start =\r\n          Math.max(Math.floor(min / options.exactTicks), 1) *\r\n          options.exactTicks;\r\n        if (start === min) start += options.exactTicks;\r\n        for (let i = start; i < max; i += options.exactTicks)\r\n          $markers.appendChild(\r\n            CE(\"option\", { value: options.reverse ? -i : i })\r\n          );\r\n      } else\r\n        for (\r\n          let i = self.uiMin + options.ticks;\r\n          i < self.uiMax;\r\n          i += options.ticks\r\n        )\r\n          $markers.appendChild(CE(\"option\", { value: i }));\r\n      self.appendChild($markers);\r\n    }\r\n    return (\r\n      BxNumberStepper.updateButtonsVisibility.call(self),\r\n      self.addEventListener(\"click\", self.onClick),\r\n      self.addEventListener(\"pointerdown\", self.onPointerDown),\r\n      self.addEventListener(\"contextmenu\", BxNumberStepper.onContextMenu),\r\n      setNearby(self, { focus: options.hideSlider ? $btnInc : $range }),\r\n      Object.defineProperty(self, \"value\", {\r\n        get() {\r\n          return self.controlValue;\r\n        },\r\n        set(value2) {\r\n          BxNumberStepper.setValue.call(self, value2);\r\n        },\r\n      }),\r\n      Object.defineProperty(self, \"disabled\", {\r\n        get() {\r\n          return $range.disabled;\r\n        },\r\n        set(value2) {\r\n          ($btnDec.disabled = value2),\r\n            ($btnInc.disabled = value2),\r\n            ($range.disabled = value2);\r\n        },\r\n      }),\r\n      self\r\n    );\r\n  }\r\n  static setValue(value) {\r\n    if (\r\n      ((this.controlValue = BxNumberStepper.normalizeValue.call(this, value)),\r\n      (this.$text.textContent = BxNumberStepper.updateTextValue.call(this)),\r\n      this.$range)\r\n    )\r\n      this.$range.value = (\r\n        this.options.reverse ? -this.controlValue : this.controlValue\r\n      ).toString();\r\n    BxNumberStepper.updateButtonsVisibility.call(this);\r\n  }\r\n  static normalizeValue(value) {\r\n    return (\r\n      (value = parseInt(value)),\r\n      (value = Math.max(this.controlMin, value)),\r\n      (value = Math.min(this.controlMax, value)),\r\n      value\r\n    );\r\n  }\r\n  static onRangeInput(e) {\r\n    let value = parseInt(e.target.value);\r\n    if (this.options.reverse) value *= -1;\r\n    if (\r\n      (BxNumberStepper.setValue.call(this, value),\r\n      BxNumberStepper.updateButtonsVisibility.call(this),\r\n      !e.ignoreOnChange && this.onChange)\r\n    )\r\n      this.onChange(e, value);\r\n  }\r\n  static onClick(e) {\r\n    if ((e.preventDefault(), this.isHolding)) return;\r\n    let $btn = e.target.closest(\"button\");\r\n    $btn && BxNumberStepper.buttonPressed.call(this, e, $btn),\r\n      BxNumberStepper.clearIntervalId.call(this),\r\n      (this.isHolding = !1);\r\n  }\r\n  static onPointerDown(e) {\r\n    BxNumberStepper.clearIntervalId.call(this);\r\n    let $btn = e.target.closest(\"button\");\r\n    if (!$btn) return;\r\n    (this.isHolding = !0),\r\n      e.preventDefault(),\r\n      (this.intervalId = window.setInterval((e2) => {\r\n        BxNumberStepper.buttonPressed.call(this, e2, $btn);\r\n      }, 200)),\r\n      window.addEventListener(\"pointerup\", this.onPointerUp, { once: !0 }),\r\n      window.addEventListener(\"pointercancel\", this.onPointerUp, { once: !0 });\r\n  }\r\n  static onPointerUp(e) {\r\n    BxNumberStepper.clearIntervalId.call(this), (this.isHolding = !1);\r\n  }\r\n  static onContextMenu(e) {\r\n    e.preventDefault();\r\n  }\r\n  static updateTextValue() {\r\n    let value = this.controlValue,\r\n      textContent = null;\r\n    if (this.options.customTextValue)\r\n      textContent = this.options.customTextValue(\r\n        value,\r\n        this.controlMin,\r\n        this.controlMax\r\n      );\r\n    if (textContent === null)\r\n      textContent = value.toString() + this.options.suffix;\r\n    return textContent;\r\n  }\r\n  static buttonPressed(e, $btn) {\r\n    BxNumberStepper.change.call(this, $btn.dataset.type);\r\n  }\r\n  static change(direction) {\r\n    let value = this.controlValue;\r\n    if (((value = this.options.reverse ? -value : value), direction === \"dec\"))\r\n      value = Math.max(this.uiMin, value - this.steps);\r\n    else value = Math.min(this.uiMax, value + this.steps);\r\n    (value = this.options.reverse ? -value : value),\r\n      BxNumberStepper.setValue.call(this, value),\r\n      BxNumberStepper.updateButtonsVisibility.call(this),\r\n      this.onChange && this.onChange(null, this.controlValue);\r\n  }\r\n  static clearIntervalId() {\r\n    this.intervalId && clearInterval(this.intervalId), (this.intervalId = null);\r\n  }\r\n  static updateButtonsVisibility() {\r\n    if (\r\n      (this.$btnDec.classList.toggle(\r\n        \"bx-inactive\",\r\n        this.controlValue === this.uiMin\r\n      ),\r\n      this.$btnInc.classList.toggle(\r\n        \"bx-inactive\",\r\n        this.controlValue === this.uiMax\r\n      ),\r\n      this.controlValue === this.uiMin || this.controlValue === this.uiMax)\r\n    )\r\n      BxNumberStepper.clearIntervalId.call(this);\r\n  }\r\n}\r\nclass SettingElement {\r\n  static renderOptions(key, setting, currentValue, onChange) {\r\n    let $control = CE(\"select\", { tabindex: 0 }),\r\n      $parent;\r\n    if (setting.optionsGroup)\r\n      ($parent = CE(\"optgroup\", { label: setting.optionsGroup })),\r\n        $control.appendChild($parent);\r\n    else $parent = $control;\r\n    for (let value in setting.options) {\r\n      let label = setting.options[value],\r\n        $option = CE(\"option\", { value }, label);\r\n      $parent.appendChild($option);\r\n    }\r\n    return (\r\n      ($control.value = currentValue),\r\n      onChange &&\r\n        $control.addEventListener(\"input\", (e) => {\r\n          let target = e.target,\r\n            value =\r\n              setting.type && setting.type === \"number\"\r\n                ? parseInt(target.value)\r\n                : target.value;\r\n          !e.ignoreOnChange && onChange(e, value);\r\n        }),\r\n      ($control.setValue = (value) => {\r\n        $control.value = value;\r\n      }),\r\n      $control\r\n    );\r\n  }\r\n  static renderMultipleOptions(\r\n    key,\r\n    setting,\r\n    currentValue,\r\n    onChange,\r\n    params = {}\r\n  ) {\r\n    let $control = CE(\"select\", { multiple: !0, tabindex: 0 }),\r\n      totalOptions = Object.keys(setting.multipleOptions).length,\r\n      size = params.size ? Math.min(params.size, totalOptions) : totalOptions;\r\n    $control.setAttribute(\"size\", size.toString());\r\n    for (let value in setting.multipleOptions) {\r\n      let label = setting.multipleOptions[value],\r\n        $option = CE(\"option\", { value }, label);\r\n      ($option.selected = currentValue.indexOf(value) > -1),\r\n        $option.addEventListener(\"mousedown\", function (e) {\r\n          e.preventDefault();\r\n          let target = e.target;\r\n          target.selected = !target.selected;\r\n          let $parent = target.parentElement;\r\n          $parent.focus(), BxEvent.dispatch($parent, \"input\");\r\n        }),\r\n        $control.appendChild($option);\r\n    }\r\n    return (\r\n      $control.addEventListener(\"mousedown\", function (e) {\r\n        let self = this,\r\n          orgScrollTop = self.scrollTop;\r\n        window.setTimeout(() => (self.scrollTop = orgScrollTop), 0);\r\n      }),\r\n      $control.addEventListener(\"mousemove\", (e) => e.preventDefault()),\r\n      onChange &&\r\n        $control.addEventListener(\"input\", (e) => {\r\n          let target = e.target,\r\n            values = Array.from(target.selectedOptions).map((i) => i.value);\r\n          !e.ignoreOnChange && onChange(e, values);\r\n        }),\r\n      Object.defineProperty($control, \"value\", {\r\n        get() {\r\n          return Array.from($control.options)\r\n            .filter((option) => option.selected)\r\n            .map((option) => option.value);\r\n        },\r\n        set(value) {\r\n          let values = value.split(\",\");\r\n          Array.from($control.options).forEach((option) => {\r\n            option.selected = values.includes(option.value);\r\n          });\r\n        },\r\n      }),\r\n      $control\r\n    );\r\n  }\r\n  static renderCheckbox(key, setting, currentValue, onChange) {\r\n    let $control = CE(\"input\", { type: \"checkbox\", tabindex: 0 });\r\n    return (\r\n      ($control.checked = currentValue),\r\n      onChange &&\r\n        $control.addEventListener(\"input\", (e) => {\r\n          !e.ignoreOnChange && onChange(e, e.target.checked);\r\n        }),\r\n      ($control.setValue = (value) => {\r\n        $control.checked = !!value;\r\n      }),\r\n      $control\r\n    );\r\n  }\r\n  static renderNumberStepper(key, setting, value, onChange, options = {}) {\r\n    return BxNumberStepper.create(\r\n      key,\r\n      value,\r\n      setting.min,\r\n      setting.max,\r\n      options,\r\n      onChange\r\n    );\r\n  }\r\n  static METHOD_MAP = {\r\n    options: SettingElement.renderOptions,\r\n    \"multiple-options\": SettingElement.renderMultipleOptions,\r\n    \"number-stepper\": SettingElement.renderNumberStepper,\r\n    checkbox: SettingElement.renderCheckbox,\r\n  };\r\n  static render(type, key, setting, currentValue, onChange, options) {\r\n    let method = SettingElement.METHOD_MAP[type],\r\n      $control = method(...Array.from(arguments).slice(1));\r\n    if (type !== \"number-stepper\")\r\n      $control.id = `bx_setting_${escapeCssSelector(key)}`;\r\n    if (type === \"options\" || type === \"multiple-options\")\r\n      $control.name = $control.id;\r\n    return $control;\r\n  }\r\n  static fromPref(key, onChange, overrideParams = {}) {\r\n    let { definition, storage } = getPrefInfo(key);\r\n    if (!definition) return null;\r\n    let currentValue = storage.getSetting(key),\r\n      type;\r\n    if (\"options\" in definition) type = \"options\";\r\n    else if (\"multipleOptions\" in definition) type = \"multiple-options\";\r\n    else if (typeof definition.default === \"number\") type = \"number-stepper\";\r\n    else type = \"checkbox\";\r\n    let params = {};\r\n    if (\"params\" in definition)\r\n      params = Object.assign(overrideParams, definition.params || {});\r\n    if (params.disabled) currentValue = definition.default;\r\n    return SettingElement.render(\r\n      type,\r\n      key,\r\n      definition,\r\n      currentValue,\r\n      (e, value) => {\r\n        if (isGlobalPref(key)) setGlobalPref(key, value, \"ui\");\r\n        else {\r\n          let id = SettingsManager.getInstance().getTargetGameId();\r\n          setGamePref(id, key, value, \"ui\");\r\n        }\r\n        onChange && onChange(e, value);\r\n      },\r\n      params\r\n    );\r\n  }\r\n}\r\nclass BxSelectElement extends HTMLSelectElement {\r\n  isControllerFriendly;\r\n  optionsList;\r\n  indicatorsList;\r\n  $indicators;\r\n  visibleIndex;\r\n  isMultiple;\r\n  $select;\r\n  $btnNext;\r\n  $btnPrev;\r\n  $label;\r\n  $checkBox;\r\n  static create($select, forceFriendly = !1) {\r\n    let isControllerFriendly =\r\n      forceFriendly || getGlobalPref(\"ui.controllerFriendly\");\r\n    if ($select.multiple && !isControllerFriendly)\r\n      return $select.classList.add(\"bx-select\"), $select;\r\n    $select.removeAttribute(\"tabindex\");\r\n    let $wrapper = CE(\"div\", {\r\n      class: \"bx-select\",\r\n      _dataset: { controllerFriendly: isControllerFriendly },\r\n    });\r\n    if ($select.classList.contains(\"bx-full-width\"))\r\n      $wrapper.classList.add(\"bx-full-width\");\r\n    let $content,\r\n      self = $wrapper;\r\n    (self.isControllerFriendly = isControllerFriendly),\r\n      (self.isMultiple = $select.multiple),\r\n      (self.visibleIndex = $select.selectedIndex),\r\n      (self.$select = $select),\r\n      (self.optionsList = Array.from($select.querySelectorAll(\"option\"))),\r\n      (self.$indicators = CE(\"div\", { class: \"bx-select-indicators\" })),\r\n      (self.indicatorsList = []);\r\n    let $btnPrev, $btnNext;\r\n    if (isControllerFriendly) {\r\n      ($btnPrev = createButton({ label: \"<\", style: 64 })),\r\n        ($btnNext = createButton({ label: \">\", style: 64 })),\r\n        setNearby($wrapper, { orientation: \"horizontal\", focus: $btnNext }),\r\n        (self.$btnNext = $btnNext),\r\n        (self.$btnPrev = $btnPrev);\r\n      let boundOnPrevNext = BxSelectElement.onPrevNext.bind(self);\r\n      $btnPrev.addEventListener(\"click\", boundOnPrevNext),\r\n        $btnNext.addEventListener(\"click\", boundOnPrevNext);\r\n    } else\r\n      $select.addEventListener(\"change\", (e) => {\r\n        (self.visibleIndex = $select.selectedIndex),\r\n          BxSelectElement.resetIndicators.call(self),\r\n          BxSelectElement.render.call(self);\r\n      });\r\n    if (self.isMultiple)\r\n      ($content = CE(\r\n        \"button\",\r\n        { class: \"bx-select-value bx-focusable\", tabindex: 0 },\r\n        CE(\r\n          \"div\",\r\n          !1,\r\n          (self.$checkBox = CE(\"input\", { type: \"checkbox\" })),\r\n          (self.$label = CE(\"span\", !1, \"\"))\r\n        ),\r\n        self.$indicators\r\n      )),\r\n        $content.addEventListener(\"click\", (e) => {\r\n          self.$checkBox.click();\r\n        }),\r\n        self.$checkBox.addEventListener(\"input\", (e) => {\r\n          let $option = BxSelectElement.getOptionAtIndex.call(\r\n            self,\r\n            self.visibleIndex\r\n          );\r\n          $option && ($option.selected = e.target.checked),\r\n            BxEvent.dispatch($select, \"input\");\r\n        });\r\n    else\r\n      $content = CE(\r\n        \"div\",\r\n        !1,\r\n        (self.$label = CE(\"label\", { for: $select.id + \"_checkbox\" }, \"\")),\r\n        self.$indicators\r\n      );\r\n    return (\r\n      $select.addEventListener(\"input\", BxSelectElement.render.bind(self)),\r\n      new MutationObserver((mutationList, observer2) => {\r\n        mutationList.forEach((mutation) => {\r\n          if (mutation.type === \"childList\" || mutation.type === \"attributes\")\r\n            (self.visibleIndex = $select.selectedIndex),\r\n              (self.optionsList = Array.from(\r\n                $select.querySelectorAll(\"option\")\r\n              )),\r\n              BxSelectElement.resetIndicators.call(self),\r\n              BxSelectElement.render.call(self);\r\n        });\r\n      }).observe($select, { subtree: !0, childList: !0, attributes: !0 }),\r\n      self.append($select, $btnPrev || \"\", $content, $btnNext || \"\"),\r\n      BxSelectElement.resetIndicators.call(self),\r\n      BxSelectElement.render.call(self),\r\n      Object.defineProperty(self, \"value\", {\r\n        get() {\r\n          return $select.value;\r\n        },\r\n        set(value) {\r\n          (self.optionsList = Array.from($select.querySelectorAll(\"option\"))),\r\n            ($select.value = value),\r\n            (self.visibleIndex = $select.selectedIndex),\r\n            BxSelectElement.resetIndicators.call(self),\r\n            BxSelectElement.render.call(self);\r\n        },\r\n      }),\r\n      Object.defineProperty(self, \"disabled\", {\r\n        get() {\r\n          return $select.disabled;\r\n        },\r\n        set(value) {\r\n          $select.disabled = value;\r\n        },\r\n      }),\r\n      (self.addEventListener = function () {\r\n        $select.addEventListener.apply($select, arguments);\r\n      }),\r\n      (self.removeEventListener = function () {\r\n        $select.removeEventListener.apply($select, arguments);\r\n      }),\r\n      (self.dispatchEvent = function () {\r\n        return $select.dispatchEvent.apply($select, arguments);\r\n      }),\r\n      (self.appendChild = function (node) {\r\n        return $select.appendChild(node), node;\r\n      }),\r\n      self\r\n    );\r\n  }\r\n  static resetIndicators() {\r\n    let { optionsList, indicatorsList, $indicators } = this,\r\n      targetSize = optionsList.length;\r\n    if (indicatorsList.length > targetSize)\r\n      while (indicatorsList.length > targetSize) indicatorsList.pop()?.remove();\r\n    else if (indicatorsList.length < targetSize)\r\n      while (indicatorsList.length < targetSize) {\r\n        let $indicator = CE(\"span\", {});\r\n        indicatorsList.push($indicator), $indicators.appendChild($indicator);\r\n      }\r\n    for (let $indicator of indicatorsList) clearDataSet($indicator);\r\n    $indicators.classList.toggle(\"bx-invisible\", targetSize <= 1);\r\n  }\r\n  static getOptionAtIndex(index) {\r\n    return this.optionsList[index];\r\n  }\r\n  static render(e) {\r\n    let { $label, $btnNext, $btnPrev, $checkBox, optionsList, indicatorsList } =\r\n      this;\r\n    if (e && e.manualTrigger) this.visibleIndex = this.$select.selectedIndex;\r\n    this.visibleIndex = BxSelectElement.normalizeIndex.call(\r\n      this,\r\n      this.visibleIndex\r\n    );\r\n    let $option = BxSelectElement.getOptionAtIndex.call(\r\n        this,\r\n        this.visibleIndex\r\n      ),\r\n      content = \"\";\r\n    if ($option) {\r\n      let $parent = $option.parentElement,\r\n        hasLabel =\r\n          $parent instanceof HTMLOptGroupElement ||\r\n          this.$select.querySelector(\"optgroup\");\r\n      if (\r\n        ((content = $option.dataset.label || $option.textContent || \"\"),\r\n        content && hasLabel)\r\n      ) {\r\n        let groupLabel =\r\n          $parent instanceof HTMLOptGroupElement ? $parent.label : \" \";\r\n        $label.innerHTML = \"\";\r\n        let fragment = document.createDocumentFragment();\r\n        fragment.appendChild(CE(\"span\", !1, groupLabel)),\r\n          fragment.appendChild(document.createTextNode(content)),\r\n          $label.appendChild(fragment);\r\n      } else $label.textContent = content;\r\n    } else $label.textContent = content;\r\n    if (\r\n      ($label.classList.toggle(\"bx-line-through\", $option && $option.disabled),\r\n      this.isMultiple)\r\n    )\r\n      ($checkBox.checked = $option?.selected || !1),\r\n        $checkBox.classList.toggle(\"bx-gone\", !content);\r\n    let disableButtons = optionsList.length <= 1;\r\n    $btnPrev?.classList.toggle(\"bx-gone\", disableButtons),\r\n      $btnNext?.classList.toggle(\"bx-gone\", disableButtons);\r\n    for (let i = 0; i < optionsList.length; i++) {\r\n      let $option2 = optionsList[i],\r\n        $indicator = indicatorsList[i];\r\n      if (!$option2 || !$indicator) continue;\r\n      if ((clearDataSet($indicator), $option2.selected))\r\n        $indicator.dataset.selected = \"true\";\r\n      if ($option2.index === this.visibleIndex)\r\n        $indicator.dataset.highlighted = \"true\";\r\n    }\r\n  }\r\n  static normalizeIndex(index) {\r\n    return Math.min(Math.max(index, 0), this.optionsList.length - 1);\r\n  }\r\n  static onPrevNext(e) {\r\n    if (!e.target) return;\r\n    let { $btnNext, $select, isMultiple, visibleIndex: currentIndex } = this,\r\n      newIndex =\r\n        e.target.closest(\"button\") === $btnNext\r\n          ? currentIndex + 1\r\n          : currentIndex - 1;\r\n    if (newIndex > this.optionsList.length - 1) newIndex = 0;\r\n    else if (newIndex < 0) newIndex = this.optionsList.length - 1;\r\n    if (\r\n      ((newIndex = BxSelectElement.normalizeIndex.call(this, newIndex)),\r\n      (this.visibleIndex = newIndex),\r\n      !isMultiple && newIndex !== currentIndex)\r\n    )\r\n      $select.selectedIndex = newIndex;\r\n    if (isMultiple) BxSelectElement.render.call(this);\r\n    else BxEvent.dispatch($select, \"input\");\r\n  }\r\n}\r\nclass XboxApi {\r\n  static CACHED_TITLES = {};\r\n  static async getProductTitle(xboxTitleId) {\r\n    if (\r\n      ((xboxTitleId = xboxTitleId.toString()),\r\n      XboxApi.CACHED_TITLES[xboxTitleId])\r\n    )\r\n      return XboxApi.CACHED_TITLES[xboxTitleId];\r\n    let title;\r\n    try {\r\n      let url = `https://displaycatalog.mp.microsoft.com/v7.0/products/lookup?market=US&languages=en&value=${xboxTitleId}&alternateId=XboxTitleId&fieldsTemplate=browse`;\r\n      title = (await (await NATIVE_FETCH(url)).json()).Products[0]\r\n        .LocalizedProperties[0].ProductTitle;\r\n    } catch (e) {\r\n      title = \"Unknown Game #\" + xboxTitleId;\r\n    }\r\n    return (XboxApi.CACHED_TITLES[xboxTitleId] = title), title;\r\n  }\r\n}\r\nclass SettingsManager {\r\n  static instance;\r\n  static getInstance = () =>\r\n    SettingsManager.instance ??\r\n    (SettingsManager.instance = new SettingsManager());\r\n  $streamSettingsSelection;\r\n  $tips;\r\n  playingGameId = -1;\r\n  targetGameId = -1;\r\n  SETTINGS = {\r\n    \"localCoOp.enabled\": {\r\n      onChange: () => {\r\n        BxExposed.toggleLocalCoOp(getStreamPref(\"localCoOp.enabled\"));\r\n      },\r\n    },\r\n    \"deviceVibration.mode\": {\r\n      onChange: StreamSettings.refreshControllerSettings,\r\n    },\r\n    \"deviceVibration.intensity\": {\r\n      onChange: StreamSettings.refreshControllerSettings,\r\n    },\r\n    \"controller.pollingRate\": {\r\n      onChange: StreamSettings.refreshControllerSettings,\r\n    },\r\n    \"controller.settings\": {\r\n      onChange: StreamSettings.refreshControllerSettings,\r\n    },\r\n    \"nativeMkb.scroll.sensitivityX\": {\r\n      onChange: () => {\r\n        let value = getStreamPref(\"nativeMkb.scroll.sensitivityX\");\r\n        NativeMkbHandler.getInstance()?.setHorizontalScrollMultiplier(\r\n          value / 100\r\n        );\r\n      },\r\n    },\r\n    \"nativeMkb.scroll.sensitivityY\": {\r\n      onChange: () => {\r\n        let value = getStreamPref(\"nativeMkb.scroll.sensitivityY\");\r\n        NativeMkbHandler.getInstance()?.setVerticalScrollMultiplier(\r\n          value / 100\r\n        );\r\n      },\r\n    },\r\n    \"video.player.type\": {\r\n      onChange: updateVideoPlayer,\r\n      onChangeUi: onChangeVideoPlayerType,\r\n    },\r\n    \"video.player.powerPreference\": {\r\n      onChange: () => {\r\n        if (!STATES.currentStream.streamPlayerManager) return;\r\n        updateVideoPlayer();\r\n      },\r\n    },\r\n    \"video.processing\": { onChange: updateVideoPlayer },\r\n    \"video.processing.sharpness\": { onChange: updateVideoPlayer },\r\n    \"video.maxFps\": {\r\n      onChange: () => {\r\n        let value = getStreamPref(\"video.maxFps\");\r\n        limitVideoPlayerFps(value);\r\n      },\r\n    },\r\n    \"video.ratio\": { onChange: updateVideoPlayer },\r\n    \"video.brightness\": { onChange: updateVideoPlayer },\r\n    \"video.contrast\": { onChange: updateVideoPlayer },\r\n    \"video.saturation\": { onChange: updateVideoPlayer },\r\n    \"video.position\": { onChange: updateVideoPlayer },\r\n    \"audio.volume\": {\r\n      onChange: () => {\r\n        let value = getStreamPref(\"audio.volume\");\r\n        SoundShortcut.setGainNodeVolume(value);\r\n      },\r\n    },\r\n    \"stats.items\": { onChange: StreamStats.refreshStyles },\r\n    \"stats.quickGlance.enabled\": {\r\n      onChange: () => {\r\n        if (!getStreamPref(\"stats.quickGlance.enabled\"))\r\n          StreamStats.getInstance().stop(!0);\r\n      },\r\n    },\r\n    \"stats.position\": { onChange: StreamStats.refreshStyles },\r\n    \"stats.textSize\": { onChange: StreamStats.refreshStyles },\r\n    \"stats.opacity.all\": { onChange: StreamStats.refreshStyles },\r\n    \"stats.opacity.background\": { onChange: StreamStats.refreshStyles },\r\n    \"stats.colors\": { onChange: StreamStats.refreshStyles },\r\n    \"mkb.p1.preset.mappingId\": { onChange: StreamSettings.refreshMkbSettings },\r\n    \"mkb.p1.slot\": {\r\n      onChange: () => {\r\n        EmulatedMkbHandler.getInstance()?.resetXcloudGamepads();\r\n      },\r\n    },\r\n    \"keyboardShortcuts.preset.inGameId\": {\r\n      onChange: StreamSettings.refreshKeyboardShortcuts,\r\n    },\r\n  };\r\n  constructor() {\r\n    BxEventBus.Stream.on(\"setting.changed\", (data) => {\r\n      if (isStreamPref(data.settingKey))\r\n        this.updateStreamElement(data.settingKey);\r\n    }),\r\n      BxEventBus.Stream.on(\"gameSettings.switched\", ({ id }) => {\r\n        this.switchGameSettings(id);\r\n      }),\r\n      this.renderStreamSettingsSelection();\r\n  }\r\n  updateStreamElement(key, onChanges, onChangeUis) {\r\n    let info = this.SETTINGS[key];\r\n    if (info.onChangeUi)\r\n      if (onChangeUis) onChangeUis.add(info.onChangeUi);\r\n      else info.onChangeUi();\r\n    if (info.onChange && STATES.isPlaying)\r\n      if (onChanges) onChanges.add(info.onChange);\r\n      else info.onChange();\r\n    let $elm = info.$element;\r\n    if (!$elm) return;\r\n    let value = getGamePref(this.targetGameId, key, !0);\r\n    if (\"setValue\" in $elm) $elm.setValue(value);\r\n    else $elm.value = value.toString();\r\n    this.updateDataset($elm, key);\r\n  }\r\n  switchGameSettings(id) {\r\n    if ((setGameIdPref(id), this.targetGameId === id)) return;\r\n    let onChanges = new Set(),\r\n      onChangeUis = new Set(),\r\n      oldGameId = this.targetGameId;\r\n    this.targetGameId = id;\r\n    let key;\r\n    for (key in this.SETTINGS) {\r\n      if (!isStreamPref(key)) continue;\r\n      let oldValue = getGamePref(oldGameId, key, !0),\r\n        newValue = getGamePref(this.targetGameId, key, !0);\r\n      if (oldValue === newValue) continue;\r\n      this.updateStreamElement(key, onChanges, onChangeUis);\r\n    }\r\n    onChangeUis.forEach((fn) => fn && fn()),\r\n      onChanges.forEach((fn) => fn && fn()),\r\n      this.$tips.classList.toggle(\"bx-gone\", id < 0);\r\n  }\r\n  setElement(pref, $elm) {\r\n    if (!this.SETTINGS[pref]) this.SETTINGS[pref] = {};\r\n    this.updateDataset($elm, pref), (this.SETTINGS[pref].$element = $elm);\r\n  }\r\n  getElement(pref, params) {\r\n    if (!this.SETTINGS[pref]) this.SETTINGS[pref] = {};\r\n    let $elm = this.SETTINGS[pref].$element;\r\n    if (!$elm)\r\n      ($elm = SettingElement.fromPref(pref, null, params)),\r\n        (this.SETTINGS[pref].$element = $elm);\r\n    return this.updateDataset($elm, pref), $elm;\r\n  }\r\n  hasElement(pref) {\r\n    return !!this.SETTINGS[pref]?.$element;\r\n  }\r\n  updateDataset($elm, pref) {\r\n    if (\r\n      this.targetGameId === this.playingGameId &&\r\n      hasGamePref(this.playingGameId, pref)\r\n    )\r\n      $elm.dataset.override = \"true\";\r\n    else delete $elm.dataset.override;\r\n  }\r\n  renderStreamSettingsSelection() {\r\n    this.$tips = CE(\r\n      \"p\",\r\n      { class: \"bx-gone\" },\r\n      `⇐ Ｑ ⟶: ${t(\"reset-highlighted-setting\")}`\r\n    );\r\n    let $select = BxSelectElement.create(\r\n      CE(\r\n        \"select\",\r\n        !1,\r\n        CE(\r\n          \"optgroup\",\r\n          { label: t(\"settings-for\") },\r\n          CE(\"option\", { value: -1 }, t(\"all-games\"))\r\n        )\r\n      ),\r\n      !0\r\n    );\r\n    $select.addEventListener(\"input\", (e) => {\r\n      let id = parseInt($select.value);\r\n      BxEventBus.Stream.emit(\"gameSettings.switched\", { id });\r\n    }),\r\n      (this.$streamSettingsSelection = CE(\r\n        \"div\",\r\n        {\r\n          class: \"bx-stream-settings-selection bx-gone\",\r\n          _nearby: { orientation: \"vertical\" },\r\n        },\r\n        CE(\"div\", !1, $select),\r\n        this.$tips\r\n      )),\r\n      BxEventBus.Stream.on(\"xboxTitleId.changed\", async ({ id }) => {\r\n        this.playingGameId = id;\r\n        let gameSettings = STORAGE.Stream.getGameSettings(id),\r\n          selectedId = gameSettings && !gameSettings.isEmpty() ? id : -1;\r\n        setGameIdPref(selectedId);\r\n        let $optGroup = $select.querySelector(\"optgroup\");\r\n        while ($optGroup.childElementCount > 1)\r\n          $optGroup.lastElementChild?.remove();\r\n        if (id >= 0) {\r\n          let title = id === 0 ? \"Xbox\" : await XboxApi.getProductTitle(id);\r\n          $optGroup.appendChild(CE(\"option\", { value: id }, title));\r\n        }\r\n        ($select.value = selectedId.toString()),\r\n          BxEventBus.Stream.emit(\"gameSettings.switched\", { id: selectedId });\r\n      });\r\n  }\r\n  getStreamSettingsSelection() {\r\n    return this.$streamSettingsSelection;\r\n  }\r\n  getTargetGameId() {\r\n    return this.targetGameId;\r\n  }\r\n}\r\nfunction onChangeVideoPlayerType() {\r\n  let playerType = getStreamPref(\"video.player.type\"),\r\n    settingsManager = SettingsManager.getInstance();\r\n  if (!settingsManager.hasElement(\"video.processing\")) return;\r\n  let isDisabled = !1,\r\n    $videoProcessing = settingsManager.getElement(\"video.processing\"),\r\n    $videoSharpness = settingsManager.getElement(\"video.processing.sharpness\"),\r\n    $videoPowerPreference = settingsManager.getElement(\r\n      \"video.player.powerPreference\"\r\n    ),\r\n    $videoMaxFps = settingsManager.getElement(\"video.maxFps\"),\r\n    $optCas = $videoProcessing.querySelector(`option[value=${\"cas\"}]`);\r\n  if (playerType === \"default\") {\r\n    if (\r\n      (($videoProcessing.value = \"usm\"),\r\n      setStreamPref(\"video.processing\", \"usm\", \"direct\"),\r\n      $optCas && ($optCas.disabled = !0),\r\n      UserAgent.isSafari())\r\n    )\r\n      isDisabled = !0;\r\n  } else $optCas && ($optCas.disabled = !1);\r\n  ($videoProcessing.disabled = isDisabled),\r\n    ($videoSharpness.dataset.disabled = isDisabled.toString()),\r\n    $videoPowerPreference\r\n      .closest(\".bx-settings-row\")\r\n      .classList.toggle(\"bx-gone\", playerType !== \"webgl2\"),\r\n    $videoMaxFps\r\n      .closest(\".bx-settings-row\")\r\n      .classList.toggle(\"bx-gone\", playerType === \"default\");\r\n}\r\nfunction limitVideoPlayerFps(targetFps) {\r\n  STATES.currentStream.streamPlayerManager\r\n    ?.getCanvasPlayer()\r\n    ?.setTargetFps(targetFps);\r\n}\r\nfunction updateVideoPlayer() {\r\n  let streamPlayerManager = STATES.currentStream.streamPlayerManager;\r\n  if (!streamPlayerManager) return;\r\n  let options = {\r\n    processing: getStreamPref(\"video.processing\"),\r\n    sharpness: getStreamPref(\"video.processing.sharpness\"),\r\n    saturation: getStreamPref(\"video.saturation\"),\r\n    contrast: getStreamPref(\"video.contrast\"),\r\n    brightness: getStreamPref(\"video.brightness\"),\r\n  };\r\n  streamPlayerManager.switchPlayerType(getStreamPref(\"video.player.type\")),\r\n    limitVideoPlayerFps(getStreamPref(\"video.maxFps\")),\r\n    streamPlayerManager.updateOptions(options),\r\n    streamPlayerManager.refreshPlayer();\r\n}\r\nfunction resizeVideoPlayer() {\r\n  STATES.currentStream.streamPlayerManager?.resizePlayer();\r\n}\r\nwindow.addEventListener(\"resize\", resizeVideoPlayer);\r\nclass NavigationDialog {\r\n  dialogManager;\r\n  onMountedCallbacks = [];\r\n  constructor() {\r\n    this.dialogManager = NavigationDialogManager.getInstance();\r\n  }\r\n  isCancellable() {\r\n    return !0;\r\n  }\r\n  isOverlayVisible() {\r\n    return !0;\r\n  }\r\n  show(configs = {}, clearStack = !1) {\r\n    if (\r\n      (NavigationDialogManager.getInstance().show(this, configs, clearStack),\r\n      !this.getFocusedElement())\r\n    )\r\n      this.focusIfNeeded();\r\n  }\r\n  hide() {\r\n    NavigationDialogManager.getInstance().hide();\r\n  }\r\n  getFocusedElement() {\r\n    let $activeElement = document.activeElement;\r\n    if (!$activeElement) return null;\r\n    if (this.$container.contains($activeElement)) return $activeElement;\r\n    return null;\r\n  }\r\n  onBeforeMount(configs = {}) {}\r\n  onMounted(configs = {}) {\r\n    for (let callback of this.onMountedCallbacks) callback.call(this);\r\n  }\r\n  onBeforeUnmount() {}\r\n  onUnmounted() {}\r\n  handleKeyPress(key) {\r\n    return !1;\r\n  }\r\n  handleGamepad(button) {\r\n    return !1;\r\n  }\r\n}\r\nclass NavigationDialogManager {\r\n  static instance;\r\n  static getInstance = () =>\r\n    NavigationDialogManager.instance ??\r\n    (NavigationDialogManager.instance = new NavigationDialogManager());\r\n  LOG_TAG = \"NavigationDialogManager\";\r\n  static GAMEPAD_POLLING_INTERVAL = 50;\r\n  static GAMEPAD_KEYS = [0, 1, 2, 3, 12, 15, 13, 14, 4, 5, 6, 7, 10, 11, 8, 9];\r\n  static GAMEPAD_DIRECTION_MAP = {\r\n    12: 1,\r\n    13: 3,\r\n    14: 4,\r\n    15: 2,\r\n    100: 1,\r\n    101: 3,\r\n    102: 4,\r\n    103: 2,\r\n  };\r\n  static SIBLING_PROPERTY_MAP = {\r\n    horizontal: { 4: \"previousElementSibling\", 2: \"nextElementSibling\" },\r\n    vertical: { 1: \"previousElementSibling\", 3: \"nextElementSibling\" },\r\n  };\r\n  gamepadPollingIntervalId = null;\r\n  gamepadLastStates = [];\r\n  gamepadHoldingIntervalId = null;\r\n  $overlay;\r\n  $container;\r\n  dialog = null;\r\n  dialogsStack = [];\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.$overlay = CE(\"div\", {\r\n        class: \"bx-navigation-dialog-overlay bx-gone\",\r\n      })),\r\n      this.$overlay.addEventListener(\"click\", (e) => {\r\n        e.preventDefault(),\r\n          e.stopPropagation(),\r\n          this.dialog?.isCancellable() && this.hide();\r\n      }),\r\n      document.documentElement.appendChild(this.$overlay),\r\n      (this.$container = CE(\"div\", { class: \"bx-navigation-dialog bx-gone\" })),\r\n      document.documentElement.appendChild(this.$container),\r\n      window.addEventListener(BxEvent.XCLOUD_GUIDE_MENU_SHOWN, (e) =>\r\n        this.hide()\r\n      ),\r\n      new MutationObserver((mutationList) => {\r\n        if (\r\n          mutationList.length === 0 ||\r\n          mutationList[0].addedNodes.length === 0\r\n        )\r\n          return;\r\n        let $dialog = mutationList[0].addedNodes[0];\r\n        if (!$dialog || !($dialog instanceof HTMLElement)) return;\r\n        calculateSelectBoxes($dialog);\r\n      }).observe(this.$container, { childList: !0 });\r\n  }\r\n  updateActiveInput(input) {\r\n    document.documentElement.dataset.activeInput = input;\r\n  }\r\n  handleEvent(event) {\r\n    switch (event.type) {\r\n      case \"keydown\":\r\n        this.updateActiveInput(\"keyboard\");\r\n        let $target = event.target,\r\n          keyboardEvent = event,\r\n          keyCode = keyboardEvent.code || keyboardEvent.key,\r\n          handled = this.dialog?.handleKeyPress(keyCode);\r\n        if (handled) {\r\n          event.preventDefault(), event.stopPropagation();\r\n          return;\r\n        }\r\n        if (keyCode === \"ArrowUp\" || keyCode === \"ArrowDown\")\r\n          (handled = !0), this.focusDirection(keyCode === \"ArrowUp\" ? 1 : 3);\r\n        else if (keyCode === \"ArrowLeft\" || keyCode === \"ArrowRight\") {\r\n          if (\r\n            !(\r\n              $target instanceof HTMLInputElement &&\r\n              ($target.type === \"text\" || $target.type === \"range\")\r\n            )\r\n          )\r\n            (handled = !0),\r\n              this.focusDirection(keyCode === \"ArrowLeft\" ? 4 : 2);\r\n        } else if (\r\n          keyCode === \"Enter\" ||\r\n          keyCode === \"NumpadEnter\" ||\r\n          keyCode === \"Space\"\r\n        ) {\r\n          if (!($target instanceof HTMLInputElement && $target.type === \"text\"))\r\n            (handled = !0),\r\n              $target.dispatchEvent(new MouseEvent(\"click\", { bubbles: !0 }));\r\n        } else if (keyCode === \"Escape\") (handled = !0), this.hide();\r\n        if (handled) event.preventDefault(), event.stopPropagation();\r\n        break;\r\n    }\r\n  }\r\n  isShowing() {\r\n    return this.$container && !this.$container.classList.contains(\"bx-gone\");\r\n  }\r\n  pollGamepad = () => {\r\n    let gamepads = window.navigator.getGamepads();\r\n    for (let gamepad of gamepads) {\r\n      if (!gamepad || !gamepad.connected) continue;\r\n      if (gamepad.id === VIRTUAL_GAMEPAD_ID) continue;\r\n      let { axes, buttons } = gamepad,\r\n        releasedButton = null,\r\n        heldButton = null,\r\n        lastState = this.gamepadLastStates[gamepad.index],\r\n        lastTimestamp,\r\n        lastKey,\r\n        lastKeyPressed;\r\n      if (lastState) [lastTimestamp, lastKey, lastKeyPressed] = lastState;\r\n      if (lastTimestamp && lastTimestamp === gamepad.timestamp) continue;\r\n      for (let key of NavigationDialogManager.GAMEPAD_KEYS)\r\n        if (lastKey === key && !buttons[key].pressed) {\r\n          releasedButton = key;\r\n          break;\r\n        } else if (buttons[key].pressed) {\r\n          heldButton = key;\r\n          break;\r\n        }\r\n      if (\r\n        heldButton === null &&\r\n        releasedButton === null &&\r\n        axes &&\r\n        axes.length >= 2\r\n      ) {\r\n        if (lastKey) {\r\n          let releasedHorizontal =\r\n              Math.abs(axes[0]) < 0.1 && (lastKey === 102 || lastKey === 103),\r\n            releasedVertical =\r\n              Math.abs(axes[1]) < 0.1 && (lastKey === 100 || lastKey === 101);\r\n          if (releasedHorizontal || releasedVertical) releasedButton = lastKey;\r\n          else heldButton = lastKey;\r\n        } else if (axes[0] < -0.5) heldButton = 102;\r\n        else if (axes[0] > 0.5) heldButton = 103;\r\n        else if (axes[1] < -0.5) heldButton = 100;\r\n        else if (axes[1] > 0.5) heldButton = 101;\r\n      }\r\n      if (heldButton !== null) {\r\n        if (\r\n          ((this.gamepadLastStates[gamepad.index] = [\r\n            gamepad.timestamp,\r\n            heldButton,\r\n            !1,\r\n          ]),\r\n          this.clearGamepadHoldingInterval(),\r\n          NavigationDialogManager.GAMEPAD_DIRECTION_MAP[heldButton])\r\n        )\r\n          this.gamepadHoldingIntervalId = window.setInterval(() => {\r\n            let lastState2 = this.gamepadLastStates[gamepad.index];\r\n            if (lastState2) {\r\n              if (\r\n                (([lastTimestamp, lastKey, lastKeyPressed] = lastState2),\r\n                lastKey === heldButton)\r\n              ) {\r\n                this.handleGamepad(gamepad, heldButton);\r\n                return;\r\n              }\r\n            }\r\n            this.clearGamepadHoldingInterval();\r\n          }, 100);\r\n        continue;\r\n      }\r\n      if (releasedButton === null) {\r\n        this.clearGamepadHoldingInterval();\r\n        continue;\r\n      }\r\n      if (((this.gamepadLastStates[gamepad.index] = null), lastKeyPressed))\r\n        return;\r\n      if (\r\n        (this.updateActiveInput(\"gamepad\"),\r\n        this.handleGamepad(gamepad, releasedButton))\r\n      )\r\n        return;\r\n      if (releasedButton === 0) {\r\n        document.activeElement?.dispatchEvent(\r\n          new MouseEvent(\"click\", { bubbles: !0 })\r\n        );\r\n        return;\r\n      } else if (releasedButton === 1) {\r\n        this.hide();\r\n        return;\r\n      }\r\n    }\r\n  };\r\n  handleGamepad(gamepad, key) {\r\n    let handled = this.dialog?.handleGamepad(key);\r\n    if (handled) return !0;\r\n    let direction = NavigationDialogManager.GAMEPAD_DIRECTION_MAP[key];\r\n    if (!direction) return !1;\r\n    if (\r\n      document.activeElement instanceof HTMLInputElement &&\r\n      document.activeElement.type === \"range\"\r\n    ) {\r\n      let $range = document.activeElement;\r\n      if (direction === 4 || direction === 2) {\r\n        let $numberStepper = $range.closest(\".bx-number-stepper\");\r\n        if ($numberStepper)\r\n          BxNumberStepper.change.call(\r\n            $numberStepper,\r\n            direction === 4 ? \"dec\" : \"inc\"\r\n          );\r\n        else\r\n          ($range.value = (\r\n            parseInt($range.value) +\r\n            parseInt($range.step) * (direction === 4 ? -1 : 1)\r\n          ).toString()),\r\n            $range.dispatchEvent(new InputEvent(\"input\"));\r\n        handled = !0;\r\n      }\r\n    }\r\n    if (!handled) this.focusDirection(direction);\r\n    return (\r\n      this.gamepadLastStates[gamepad.index] &&\r\n        (this.gamepadLastStates[gamepad.index][2] = !0),\r\n      !0\r\n    );\r\n  }\r\n  clearGamepadHoldingInterval() {\r\n    this.gamepadHoldingIntervalId &&\r\n      window.clearInterval(this.gamepadHoldingIntervalId),\r\n      (this.gamepadHoldingIntervalId = null);\r\n  }\r\n  show(dialog, configs = {}, clearStack = !1) {\r\n    this.clearGamepadHoldingInterval(),\r\n      BxEventBus.Script.emit(\"dialog.shown\", {}),\r\n      (window.BX_EXPOSED.disableGamepadPolling = !0),\r\n      document.body.classList.add(\"bx-no-scroll\"),\r\n      this.unmountCurrentDialog(),\r\n      this.dialogsStack.push(dialog),\r\n      (this.dialog = dialog),\r\n      dialog.onBeforeMount(configs),\r\n      this.$container.appendChild(dialog.getContent()),\r\n      dialog.onMounted(configs),\r\n      this.$overlay.classList.remove(\"bx-gone\"),\r\n      this.$overlay.classList.toggle(\r\n        \"bx-invisible\",\r\n        !dialog.isOverlayVisible()\r\n      ),\r\n      this.$container.classList.remove(\"bx-gone\"),\r\n      this.$container.addEventListener(\"keydown\", this),\r\n      this.startGamepadPolling();\r\n  }\r\n  hide() {\r\n    if ((this.clearGamepadHoldingInterval(), !this.isShowing())) return;\r\n    if (\r\n      (document.body.classList.remove(\"bx-no-scroll\"),\r\n      BxEventBus.Script.emit(\"dialog.dismissed\", {}),\r\n      this.$overlay.classList.add(\"bx-gone\"),\r\n      this.$overlay.classList.remove(\"bx-invisible\"),\r\n      this.$container.classList.add(\"bx-gone\"),\r\n      this.$container.removeEventListener(\"keydown\", this),\r\n      this.stopGamepadPolling(),\r\n      this.dialog)\r\n    ) {\r\n      let dialogIndex = this.dialogsStack.indexOf(this.dialog);\r\n      if (dialogIndex > -1)\r\n        this.dialogsStack = this.dialogsStack.slice(0, dialogIndex);\r\n    }\r\n    if (\r\n      (this.unmountCurrentDialog(),\r\n      (window.BX_EXPOSED.disableGamepadPolling = !1),\r\n      this.dialogsStack.length)\r\n    )\r\n      this.dialogsStack[this.dialogsStack.length - 1].show();\r\n  }\r\n  focus($elm) {\r\n    if (!$elm) return !1;\r\n    if ($elm.nearby && $elm.nearby.focus)\r\n      if ($elm.nearby.focus instanceof HTMLElement)\r\n        return this.focus($elm.nearby.focus);\r\n      else return $elm.nearby.focus();\r\n    return $elm.focus(), $elm === document.activeElement;\r\n  }\r\n  getOrientation($elm) {\r\n    let nearby = $elm.nearby || {};\r\n    if (nearby.selfOrientation) return nearby.selfOrientation;\r\n    let orientation,\r\n      $current = $elm.parentElement;\r\n    while ($current !== this.$container) {\r\n      let tmp = $current.nearby?.orientation;\r\n      if ($current.nearby && tmp) {\r\n        orientation = tmp;\r\n        break;\r\n      }\r\n      $current = $current.parentElement;\r\n    }\r\n    return (\r\n      (orientation = orientation || \"vertical\"),\r\n      setNearby($elm, { selfOrientation: orientation }),\r\n      orientation\r\n    );\r\n  }\r\n  findNextTarget($focusing, direction, checkParent = !1, checked = []) {\r\n    if (!$focusing || $focusing === this.$container) return null;\r\n    if (checked.includes($focusing)) return null;\r\n    checked.push($focusing);\r\n    let $target = $focusing,\r\n      $parent = $target.parentElement,\r\n      nearby = $target.nearby || {},\r\n      orientation = this.getOrientation($target);\r\n    if (nearby[1] && direction === 1) return nearby[1];\r\n    else if (nearby[3] && direction === 3) return nearby[3];\r\n    else if (nearby[4] && direction === 4) return nearby[4];\r\n    else if (nearby[2] && direction === 2) return nearby[2];\r\n    let siblingProperty =\r\n      NavigationDialogManager.SIBLING_PROPERTY_MAP[orientation][direction];\r\n    if (siblingProperty) {\r\n      let $sibling = $target;\r\n      while ($sibling[siblingProperty]) {\r\n        $sibling = $sibling[siblingProperty];\r\n        let $focusable = this.findFocusableElement($sibling, direction);\r\n        if ($focusable) return $focusable;\r\n      }\r\n    }\r\n    if (nearby.loop) {\r\n      if (nearby.loop(direction)) return null;\r\n    }\r\n    if (checkParent)\r\n      return this.findNextTarget($parent, direction, checkParent, checked);\r\n    return null;\r\n  }\r\n  findFocusableElement($elm, direction) {\r\n    if (!$elm) return null;\r\n    if (!!$elm.disabled) return null;\r\n    if (!isElementVisible($elm)) return null;\r\n    if ($elm.tabIndex > -1) return $elm;\r\n    let focus = $elm.nearby?.focus;\r\n    if (focus) {\r\n      if (focus instanceof HTMLElement)\r\n        return this.findFocusableElement(focus, direction);\r\n      else if (typeof focus === \"function\") {\r\n        if (focus()) return document.activeElement;\r\n      }\r\n    }\r\n    let children = Array.from($elm.children),\r\n      orientation = $elm.nearby?.orientation || \"vertical\";\r\n    if (\r\n      orientation === \"horizontal\" ||\r\n      (orientation === \"vertical\" && direction === 1)\r\n    )\r\n      children.reverse();\r\n    for (let $child of children) {\r\n      if (!$child || !($child instanceof HTMLElement)) return null;\r\n      let $target = this.findFocusableElement($child, direction);\r\n      if ($target) return $target;\r\n    }\r\n    return null;\r\n  }\r\n  startGamepadPolling() {\r\n    this.stopGamepadPolling(),\r\n      (this.gamepadPollingIntervalId = window.setInterval(\r\n        this.pollGamepad,\r\n        NavigationDialogManager.GAMEPAD_POLLING_INTERVAL\r\n      ));\r\n  }\r\n  stopGamepadPolling() {\r\n    (this.gamepadLastStates = []),\r\n      this.gamepadPollingIntervalId &&\r\n        window.clearInterval(this.gamepadPollingIntervalId),\r\n      (this.gamepadPollingIntervalId = null);\r\n  }\r\n  focusDirection(direction) {\r\n    let dialog = this.dialog;\r\n    if (!dialog) return;\r\n    let $focusing = dialog.getFocusedElement();\r\n    if (!$focusing || !this.findFocusableElement($focusing, direction))\r\n      return dialog.focusIfNeeded(), null;\r\n    let $target = this.findNextTarget($focusing, direction, !0);\r\n    this.focus($target);\r\n  }\r\n  unmountCurrentDialog() {\r\n    let dialog = this.dialog;\r\n    dialog && dialog.onBeforeUnmount(),\r\n      this.$container.firstChild?.remove(),\r\n      dialog && dialog.onUnmounted(),\r\n      (this.dialog = null);\r\n  }\r\n}\r\nvar LOG_TAG = \"TouchController\";\r\nclass TouchController {\r\n  static #EVENT_SHOW_DEFAULT_CONTROLLER = new MessageEvent(\"message\", {\r\n    data: JSON.stringify({\r\n      content: '{\"layoutId\":\"\"}',\r\n      target: \"/streaming/touchcontrols/showlayoutv2\",\r\n      type: \"Message\",\r\n    }),\r\n    origin: \"better-xcloud\",\r\n  });\r\n  static #$style;\r\n  static #enabled = !1;\r\n  static #dataChannel;\r\n  static #customLayouts = {};\r\n  static #baseCustomLayouts = {};\r\n  static #currentLayoutId;\r\n  static #customList;\r\n  static #xboxTitleId = null;\r\n  static setXboxTitleId(xboxTitleId) {\r\n    TouchController.#xboxTitleId = xboxTitleId;\r\n  }\r\n  static getCustomLayouts() {\r\n    let xboxTitleId = TouchController.#xboxTitleId;\r\n    if (!xboxTitleId) return null;\r\n    return TouchController.#customLayouts[xboxTitleId];\r\n  }\r\n  static enable() {\r\n    TouchController.#enabled = !0;\r\n  }\r\n  static disable() {\r\n    TouchController.#enabled = !1;\r\n  }\r\n  static isEnabled() {\r\n    return TouchController.#enabled;\r\n  }\r\n  static #showDefault() {\r\n    TouchController.#dispatchMessage(\r\n      TouchController.#EVENT_SHOW_DEFAULT_CONTROLLER\r\n    );\r\n  }\r\n  static #show() {\r\n    document\r\n      .querySelector(\"#BabylonCanvasContainer-main\")\r\n      ?.parentElement?.classList.remove(\"bx-offscreen\");\r\n  }\r\n  static toggleVisibility() {\r\n    if (!TouchController.#dataChannel) return !1;\r\n    let $container = document.querySelector(\r\n      \"#BabylonCanvasContainer-main\"\r\n    )?.parentElement;\r\n    if (!$container) return !1;\r\n    return (\r\n      $container.classList.toggle(\"bx-offscreen\"),\r\n      !$container.classList.contains(\"bx-offscreen\")\r\n    );\r\n  }\r\n  static reset() {\r\n    (TouchController.#enabled = !1),\r\n      (TouchController.#dataChannel = null),\r\n      (TouchController.#xboxTitleId = null),\r\n      TouchController.#$style && (TouchController.#$style.textContent = \"\");\r\n  }\r\n  static #dispatchMessage(msg) {\r\n    TouchController.#dataChannel &&\r\n      window.setTimeout(() => {\r\n        TouchController.#dataChannel.dispatchEvent(msg);\r\n      }, 10);\r\n  }\r\n  static #dispatchLayouts(data) {\r\n    TouchController.applyCustomLayout(null, 1000),\r\n      BxEvent.dispatch(window, BxEvent.CUSTOM_TOUCH_LAYOUTS_LOADED);\r\n  }\r\n  static async requestCustomLayouts(retries = 1) {\r\n    let xboxTitleId = TouchController.#xboxTitleId;\r\n    if (!xboxTitleId) return;\r\n    if (xboxTitleId in TouchController.#customLayouts) {\r\n      TouchController.#dispatchLayouts(\r\n        TouchController.#customLayouts[xboxTitleId]\r\n      );\r\n      return;\r\n    }\r\n    if (((retries = retries || 1), retries > 2)) {\r\n      (TouchController.#customLayouts[xboxTitleId] = null),\r\n        window.setTimeout(() => TouchController.#dispatchLayouts(null), 1000);\r\n      return;\r\n    }\r\n    try {\r\n      let json = await (\r\n          await NATIVE_FETCH(\r\n            GhPagesUtils.getUrl(`touch-layouts/${xboxTitleId}.json`)\r\n          )\r\n        ).json(),\r\n        layouts = {};\r\n      json.layouts.forEach(async (layoutName) => {\r\n        let baseLayouts = {};\r\n        if (layoutName in TouchController.#baseCustomLayouts)\r\n          baseLayouts = TouchController.#baseCustomLayouts[layoutName];\r\n        else\r\n          try {\r\n            let layoutUrl = GhPagesUtils.getUrl(\r\n              `touch-layouts/layouts/${layoutName}.json`\r\n            );\r\n            (baseLayouts = (await (await NATIVE_FETCH(layoutUrl)).json())\r\n              .layouts),\r\n              (TouchController.#baseCustomLayouts[layoutName] = baseLayouts);\r\n          } catch (e) {}\r\n        Object.assign(layouts, baseLayouts);\r\n      }),\r\n        (json.layouts = layouts),\r\n        (TouchController.#customLayouts[xboxTitleId] = json),\r\n        window.setTimeout(() => TouchController.#dispatchLayouts(json), 1000);\r\n    } catch (e) {\r\n      TouchController.requestCustomLayouts(retries + 1);\r\n    }\r\n  }\r\n  static applyCustomLayout(layoutId, delay = 0) {\r\n    if (!window.BX_EXPOSED.touchLayoutManager) {\r\n      let listener = (e) => {\r\n        if (TouchController.#enabled)\r\n          TouchController.applyCustomLayout(layoutId, 0);\r\n      };\r\n      window.addEventListener(BxEvent.TOUCH_LAYOUT_MANAGER_READY, listener, {\r\n        once: !0,\r\n      });\r\n      return;\r\n    }\r\n    let xboxTitleId = TouchController.#xboxTitleId;\r\n    if (!xboxTitleId) {\r\n      BxLogger.error(LOG_TAG, \"Invalid xboxTitleId\");\r\n      return;\r\n    }\r\n    if (!layoutId)\r\n      layoutId =\r\n        TouchController.#customLayouts[xboxTitleId]?.default_layout || null;\r\n    if (!layoutId) {\r\n      BxLogger.warning(LOG_TAG, \"Invalid layoutId, show default controller\"),\r\n        TouchController.#enabled && TouchController.#showDefault();\r\n      return;\r\n    }\r\n    let layoutChanged = TouchController.#currentLayoutId !== layoutId;\r\n    TouchController.#currentLayoutId = layoutId;\r\n    let layoutData = TouchController.#customLayouts[xboxTitleId];\r\n    if (!xboxTitleId || !layoutId || !layoutData) {\r\n      TouchController.#enabled && TouchController.#showDefault();\r\n      return;\r\n    }\r\n    let layout =\r\n      layoutData.layouts[layoutId] ||\r\n      layoutData.layouts[layoutData.default_layout];\r\n    if (!layout) return;\r\n    let msg,\r\n      html = !1;\r\n    if (layout.author) {\r\n      let author = `<b>${escapeHtml(layout.author)}</b>`;\r\n      (msg = t(\"touch-control-layout-by\", { name: author })), (html = !0);\r\n    } else msg = t(\"touch-control-layout\");\r\n    layoutChanged && Toast.show(msg, layout.name, { html }),\r\n      window.setTimeout(() => {\r\n        (window.BX_EXPOSED.shouldShowSensorControls =\r\n          JSON.stringify(layout).includes(\"gyroscope\")),\r\n          window.BX_EXPOSED.touchLayoutManager.changeLayoutForScope({\r\n            type: \"showLayout\",\r\n            scope: xboxTitleId,\r\n            subscope: \"base\",\r\n            layout: {\r\n              id: \"System.Standard\",\r\n              displayName: \"System\",\r\n              layoutFile: layout,\r\n            },\r\n          });\r\n      }, delay);\r\n  }\r\n  static updateCustomList() {\r\n    TouchController.#customList = GhPagesUtils.getTouchControlCustomList();\r\n  }\r\n  static getCustomList() {\r\n    return TouchController.#customList;\r\n  }\r\n  static setup() {\r\n    window.testTouchLayout = (layout) => {\r\n      let { touchLayoutManager } = window.BX_EXPOSED;\r\n      touchLayoutManager &&\r\n        touchLayoutManager.changeLayoutForScope({\r\n          type: \"showLayout\",\r\n          scope: \"\" + TouchController.#xboxTitleId,\r\n          subscope: \"base\",\r\n          layout: {\r\n            id: \"System.Standard\",\r\n            displayName: \"Custom\",\r\n            layoutFile: layout,\r\n          },\r\n        });\r\n    };\r\n    let $style = document.createElement(\"style\");\r\n    document.documentElement.appendChild($style),\r\n      (TouchController.#$style = $style);\r\n    let PREF_STYLE_STANDARD = getGlobalPref(\"touchController.style.standard\"),\r\n      PREF_STYLE_CUSTOM = getGlobalPref(\"touchController.style.custom\");\r\n    BxEventBus.Stream.on(\"dataChannelCreated\", (payload) => {\r\n      let { dataChannel } = payload;\r\n      if (dataChannel?.label !== \"message\") return;\r\n      let filter = \"\";\r\n      if (TouchController.#enabled) {\r\n        if (PREF_STYLE_STANDARD === \"white\")\r\n          filter = \"grayscale(1) brightness(2)\";\r\n        else if (PREF_STYLE_STANDARD === \"muted\") filter = \"sepia(0.5)\";\r\n      } else if (PREF_STYLE_CUSTOM === \"muted\") filter = \"sepia(0.5)\";\r\n      if (filter)\r\n        $style.textContent = `#babylon-canvas { filter: ${filter} !important; }`;\r\n      else $style.textContent = \"\";\r\n      (TouchController.#dataChannel = dataChannel),\r\n        dataChannel.addEventListener(\"open\", () => {\r\n          window.setTimeout(TouchController.#show, 1000);\r\n        });\r\n      let focused = !1;\r\n      dataChannel.addEventListener(\"message\", (msg) => {\r\n        if (msg.origin === \"better-xcloud\" || typeof msg.data !== \"string\")\r\n          return;\r\n        if (msg.data.includes(\"touchcontrols/showtitledefault\")) {\r\n          if (TouchController.#enabled)\r\n            if (focused) TouchController.requestCustomLayouts();\r\n            else TouchController.#showDefault();\r\n          return;\r\n        }\r\n        try {\r\n          if (msg.data.includes(\"/titleinfo\")) {\r\n            let json = JSON.parse(JSON.parse(msg.data).content);\r\n            if (((focused = json.focused), !json.focused))\r\n              TouchController.#show();\r\n            TouchController.setXboxTitleId(\r\n              parseInt(json.titleid, 16).toString()\r\n            );\r\n          }\r\n        } catch (e) {\r\n          BxLogger.error(LOG_TAG, \"Load custom layout\", e);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\nvar controller_customization_default =\r\n  'var shareButtonPressed=currentGamepad.buttons[17]?.pressed,shareButtonHandled=!1,xCloudGamepad=$xCloudGamepadVar$;if(currentGamepad.id in window.BX_STREAM_SETTINGS.controllers){let controller=window.BX_STREAM_SETTINGS.controllers[currentGamepad.id];if(controller?.customization){let{mapping,ranges}=controller.customization,pressedButtons={},releasedButtons={},isModified=!1;if(ranges.LeftTrigger){let[from,to]=ranges.LeftTrigger;xCloudGamepad.LeftTrigger=xCloudGamepad.LeftTrigger>to?1:xCloudGamepad.LeftTrigger,xCloudGamepad.LeftTrigger=xCloudGamepad.LeftTrigger<from?0:xCloudGamepad.LeftTrigger}if(ranges.RightTrigger){let[from,to]=ranges.RightTrigger;xCloudGamepad.RightTrigger=xCloudGamepad.RightTrigger>to?1:xCloudGamepad.RightTrigger,xCloudGamepad.RightTrigger=xCloudGamepad.RightTrigger<from?0:xCloudGamepad.RightTrigger}if(ranges.LeftThumb){let[from,to]=ranges.LeftThumb,xAxis=xCloudGamepad.LeftThumbXAxis,yAxis=xCloudGamepad.LeftThumbYAxis,range=Math.abs(Math.sqrt(xAxis*xAxis+yAxis*yAxis)),newRange=range>to?1:range;if(newRange=newRange<from?0:newRange,newRange!==range)xCloudGamepad.LeftThumbXAxis=xAxis*(newRange/range),xCloudGamepad.LeftThumbYAxis=yAxis*(newRange/range)}if(ranges.RightThumb){let[from,to]=ranges.RightThumb,xAxis=xCloudGamepad.RightThumbXAxis,yAxis=xCloudGamepad.RightThumbYAxis,range=Math.abs(Math.sqrt(xAxis*xAxis+yAxis*yAxis)),newRange=range>to?1:range;if(newRange=newRange<from?0:newRange,newRange!==range)xCloudGamepad.RightThumbXAxis=xAxis*(newRange/range),xCloudGamepad.RightThumbYAxis=yAxis*(newRange/range)}if(shareButtonPressed&&\"Share\"in mapping){let targetButton=mapping.Share;if(typeof targetButton===\"string\")pressedButtons[targetButton]=1;shareButtonHandled=!0,delete mapping.Share}let key;for(key in mapping){let mappedKey=mapping[key];if(key===\"LeftStickAxes\"||key===\"RightStickAxes\"){let sourceX,sourceY,targetX,targetY;if(key===\"LeftStickAxes\")sourceX=\"LeftThumbXAxis\",sourceY=\"LeftThumbYAxis\",targetX=\"RightThumbXAxis\",targetY=\"RightThumbYAxis\";else sourceX=\"RightThumbXAxis\",sourceY=\"RightThumbYAxis\",targetX=\"LeftThumbXAxis\",targetY=\"LeftThumbYAxis\";if(typeof mappedKey===\"string\"){let rangeX=xCloudGamepad[sourceX],rangeY=xCloudGamepad[sourceY];if(Math.abs(Math.sqrt(rangeX*rangeX+rangeY*rangeY))>=0.1)pressedButtons[targetX]=rangeX,pressedButtons[targetY]=rangeY}releasedButtons[sourceX]=0,releasedButtons[sourceY]=0,isModified=!0}else if(typeof mappedKey===\"string\"){let pressed=!1,value=0;if(key===\"LeftTrigger\"||key===\"RightTrigger\"){let currentRange=xCloudGamepad[key];if(mappedKey===\"LeftTrigger\"||mappedKey===\"RightTrigger\")pressed=currentRange>=0.1,value=currentRange;else pressed=!0,value=currentRange>=0.9?1:0}else if(xCloudGamepad[key])pressed=!0,value=xCloudGamepad[key];if(pressed)pressedButtons[mappedKey]=value,releasedButtons[key]=0,isModified=!0}else if(mappedKey===!1)pressedButtons[key]=0,isModified=!0}isModified&&Object.assign(xCloudGamepad,releasedButtons,pressedButtons)}}if(shareButtonPressed&&!shareButtonHandled)window.dispatchEvent(new Event(BxEvent.CAPTURE_SCREENSHOT));\\n';\r\nvar poll_gamepad_default =\r\n  \"var self=this;if(window.BX_EXPOSED.disableGamepadPolling){self.inputConfiguration.useIntervalWorkerThreadForInput&&self.intervalWorker?self.intervalWorker.scheduleTimer(50):self.pollGamepadssetTimeoutTimerID=window.setTimeout(self.pollGamepads,50);return}var currentGamepad=$gamepadVar$,btnHome=currentGamepad.buttons[16];if(btnHome){if(!self.bxHomeStates)self.bxHomeStates={};let intervalMs=0,hijack=!1;if(btnHome.pressed)if(hijack=!0,intervalMs=16,self.gamepadIsIdle.set(currentGamepad.index,!1),self.bxHomeStates[currentGamepad.index]){let lastTimestamp=self.bxHomeStates[currentGamepad.index].timestamp;if(currentGamepad.timestamp!==lastTimestamp){if(self.bxHomeStates[currentGamepad.index].timestamp=currentGamepad.timestamp,window.BX_EXPOSED.handleControllerShortcut(currentGamepad))self.bxHomeStates[currentGamepad.index].shortcutPressed+=1}}else window.BX_EXPOSED.resetControllerShortcut(currentGamepad.index),self.bxHomeStates[currentGamepad.index]={shortcutPressed:0,timestamp:currentGamepad.timestamp};else if(self.bxHomeStates[currentGamepad.index]){hijack=!0;let info=structuredClone(self.bxHomeStates[currentGamepad.index]);if(self.bxHomeStates[currentGamepad.index]=null,info.shortcutPressed===0){let fakeGamepadMappings=[{GamepadIndex:currentGamepad.index,A:0,B:0,X:0,Y:0,LeftShoulder:0,RightShoulder:0,LeftTrigger:0,RightTrigger:0,View:0,Menu:0,LeftThumb:0,RightThumb:0,DPadUp:0,DPadDown:0,DPadLeft:0,DPadRight:0,Nexus:1,LeftThumbXAxis:0,LeftThumbYAxis:0,RightThumbXAxis:0,RightThumbYAxis:0,PhysicalPhysicality:0,VirtualPhysicality:0,Dirty:!0,Virtual:!1}];intervalMs=currentGamepad.timestamp-info.timestamp>=500?500:100,self.inputSink.onGamepadInput(performance.now()-intervalMs,fakeGamepadMappings)}else intervalMs=window.BX_STREAM_SETTINGS.controllerPollingRate}if(hijack&&intervalMs){self.inputConfiguration.useIntervalWorkerThreadForInput&&self.intervalWorker?self.intervalWorker.scheduleTimer(intervalMs):self.pollGamepadssetTimeoutTimerID=setTimeout(self.pollGamepads,intervalMs);return}}\\n\";\r\nvar expose_stream_session_default =\r\n  'var self=this;window.BX_EXPOSED.streamSession=self;var orgSetMicrophoneState=self.setMicrophoneState.bind(self);self.setMicrophoneState=(state)=>{orgSetMicrophoneState(state),window.BxEventBus.Stream.emit(\"microphone.state.changed\",{state})};window.dispatchEvent(new Event(BxEvent.STREAM_SESSION_READY));var updateDimensionsStr=self.updateDimensions.toString();if(updateDimensionsStr.startsWith(\"function \"))updateDimensionsStr=updateDimensionsStr.substring(9);var renderTargetVar=updateDimensionsStr.match(/if\\\\((\\\\w+)\\\\){/)[1];updateDimensionsStr=updateDimensionsStr.replaceAll(renderTargetVar+\".scroll\",\"scroll\");updateDimensionsStr=updateDimensionsStr.replace(`if(${renderTargetVar}){`,`\\nif (${renderTargetVar}) {\\nconst scrollWidth = ${renderTargetVar}.dataset.width ? parseInt(${renderTargetVar}.dataset.width) : ${renderTargetVar}.scrollWidth;\\nconst scrollHeight = ${renderTargetVar}.dataset.height ? parseInt(${renderTargetVar}.dataset.height) : ${renderTargetVar}.scrollHeight;\\n`);eval(`this.updateDimensions = function ${updateDimensionsStr}`);\\n';\r\nvar game_card_icons_default = `var supportedInputIcons=$supportedInputIcons$,{productId}=$param$;supportedInputIcons.shift();if(window.BX_EXPOSED.localCoOpManager.isSupported(productId))supportedInputIcons.push(window.BX_EXPOSED.createReactLocalCoOpIcon);`;\r\nvar local_co_op_enable_default =\r\n  'this.orgOnGamepadChanged=this.onGamepadChanged;this.orgOnGamepadInput=this.onGamepadInput;var match,onGamepadChangedStr=this.onGamepadChanged.toString();if(onGamepadChangedStr.startsWith(\"function \"))onGamepadChangedStr=onGamepadChangedStr.substring(9);onGamepadChangedStr=onGamepadChangedStr.replaceAll(\"0\",\"arguments[1]\");eval(`this.patchedOnGamepadChanged = function ${onGamepadChangedStr}`);var onGamepadInputStr=this.onGamepadInput.toString();if(onGamepadInputStr.startsWith(\"function \"))onGamepadInputStr=onGamepadInputStr.substring(9);match=onGamepadInputStr.match(/(\\\\w+\\\\.GamepadIndex)/);if(match){let gamepadIndexVar=match[0];onGamepadInputStr=onGamepadInputStr.replace(\"this.gamepadStates.get(\",`this.gamepadStates.get(${gamepadIndexVar},`),eval(`this.patchedOnGamepadInput = function ${onGamepadInputStr}`),BxLogger.info(\"supportLocalCoOp\",\"✅ Successfully patched local co-op support\")}else BxLogger.error(\"supportLocalCoOp\",\"❌ Unable to patch local co-op support\");this.toggleLocalCoOp=(enable)=>{BxLogger.info(\"toggleLocalCoOp\",enable?\"Enabled\":\"Disabled\"),this.onGamepadChanged=enable?this.patchedOnGamepadChanged:this.orgOnGamepadChanged,this.onGamepadInput=enable?this.patchedOnGamepadInput:this.orgOnGamepadInput;let gamepads=window.navigator.getGamepads();for(let gamepad of gamepads){if(!gamepad?.connected)continue;if(gamepad.id.includes(\"Better xCloud\"))continue;gamepad._noToast=!0,window.dispatchEvent(new GamepadEvent(\"gamepaddisconnected\",{gamepad})),window.dispatchEvent(new GamepadEvent(\"gamepadconnected\",{gamepad}))}};window.BX_EXPOSED.toggleLocalCoOp=this.toggleLocalCoOp.bind(null);\\n';\r\nvar remote_play_keep_alive_default = `try{if(JSON.parse(e).reason===\"WarningForBeingIdle\"&&window.location.pathname.includes(\"/consoles/launch/\")){this.sendKeepAlive();return}}catch(ex){console.log(ex)}`;\r\nvar vibration_adjust_default = `if(e?.gamepad?.connected){let gamepadSettings=window.BX_STREAM_SETTINGS.controllers[e.gamepad.id];if(gamepadSettings?.customization){let intensity=gamepadSettings.customization.vibrationIntensity;if(intensity<=0){e.repeat=0;return}else if(intensity<1)e.leftMotorPercent*=intensity,e.rightMotorPercent*=intensity,e.leftTriggerMotorPercent*=intensity,e.rightTriggerMotorPercent*=intensity}}`;\r\nvar stream_hud_default = `var options=arguments[0];window.BX_EXPOSED.showStreamMenu=options.onShowStreamMenu;options.guideUI=null;window.BX_EXPOSED.reactUseEffect(()=>{window.BxEventBus.Stream.emit(\"ui.streamHud.rendered\",{expanded:options.offset.x===0})});`;\r\nvar create_portal_default = `var $dom=arguments[1];if($dom&&$dom instanceof HTMLElement&&$dom.id===\"gamepass-dialog-root\"){let showing=!1,$dialog=$dom.firstElementChild?.firstElementChild;if($dialog)showing=!$dialog.className.includes(\"pageChangeExit\");window.BxEventBus.Script.emit(showing?\"dialog.shown\":\"dialog.dismissed\",{})}`;\r\nclass PatcherUtils {\r\n  static indexOf(txt, searchString, startIndex, maxRange = 0, after = !1) {\r\n    if (startIndex < 0) return -1;\r\n    let index = txt.indexOf(searchString, startIndex);\r\n    if (index < 0 || (maxRange && index - startIndex > maxRange)) return -1;\r\n    return after ? index + searchString.length : index;\r\n  }\r\n  static lastIndexOf(txt, searchString, startIndex, maxRange = 0, after = !1) {\r\n    if (startIndex < 0) return -1;\r\n    let index = txt.lastIndexOf(searchString, startIndex);\r\n    if (index < 0 || (maxRange && startIndex - index > maxRange)) return -1;\r\n    return after ? index + searchString.length : index;\r\n  }\r\n  static insertAt(txt, index, insertString) {\r\n    return txt.substring(0, index) + insertString + txt.substring(index);\r\n  }\r\n  static replaceWith(txt, index, fromString, toString) {\r\n    return (\r\n      txt.substring(0, index) +\r\n      toString +\r\n      txt.substring(index + fromString.length)\r\n    );\r\n  }\r\n  static filterPatches(patches) {\r\n    return patches.filter((item2) => !!item2);\r\n  }\r\n  static patchBeforePageLoad(str, page) {\r\n    let text = `chunkName:()=>\"${page}-page\",`;\r\n    if (!str.includes(text)) return !1;\r\n    return (\r\n      (str = str.replace(\r\n        \"requireAsync(e){\",\r\n        `requireAsync(e){window.BX_EXPOSED.beforePageLoad(\"${page}\");`\r\n      )),\r\n      (str = str.replace(\r\n        \"requireSync(e){\",\r\n        `requireSync(e){window.BX_EXPOSED.beforePageLoad(\"${page}\");`\r\n      )),\r\n      str\r\n    );\r\n  }\r\n  static isVarCharacter(char) {\r\n    let code = char.charCodeAt(0),\r\n      isUppercase = code >= 65 && code <= 90,\r\n      isLowercase = code >= 97 && code <= 122,\r\n      isDigit = code >= 48 && code <= 57;\r\n    return (\r\n      isUppercase || isLowercase || isDigit || char === \"_\" || char === \"$\"\r\n    );\r\n  }\r\n  static getVariableNameBefore(str, index) {\r\n    if (index < 0) return null;\r\n    let end = index,\r\n      start = end - 1;\r\n    while (PatcherUtils.isVarCharacter(str[start])) start -= 1;\r\n    return str.substring(start + 1, end);\r\n  }\r\n  static getVariableNameAfter(str, index) {\r\n    if (index < 0) return null;\r\n    let start = index,\r\n      end = start + 1;\r\n    while (PatcherUtils.isVarCharacter(str[end])) end += 1;\r\n    return str.substring(start, end);\r\n  }\r\n  static injectUseEffect(str, index, group, eventName) {\r\n    let newCode = `window.BX_EXPOSED.reactUseEffect(() => window.BxEventBus.${group}.emit('${eventName}', {}), []);`;\r\n    return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n  }\r\n}\r\nvar LOG_TAG2 = \"Patcher\",\r\n  PATCHES = {\r\n    disableAiTrack(str) {\r\n      let text = \".track=function(\",\r\n        index = str.indexOf(text);\r\n      if (\r\n        index < 0 ||\r\n        PatcherUtils.indexOf(str, '\"AppInsightsCore', index, 200) < 0\r\n      )\r\n        return !1;\r\n      return PatcherUtils.replaceWith(\r\n        str,\r\n        index,\r\n        text,\r\n        \".track=function(e){},!!function(\"\r\n      );\r\n    },\r\n    disableTelemetryProvider(str) {\r\n      let text = \"this.enableLightweightTelemetry=!\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = [\r\n        \"this.trackEvent\",\r\n        \"this.trackPageView\",\r\n        \"this.trackHttpCompleted\",\r\n        \"this.trackHttpFailed\",\r\n        \"this.trackError\",\r\n        \"this.trackErrorLike\",\r\n        \"this.onTrackEvent\",\r\n        \"()=>{}\",\r\n      ].join(\"=\");\r\n      return str.replace(text, newCode + \";\" + text);\r\n    },\r\n    disableIndexDbLogging(str) {\r\n      let text = \",this.logsDb=new\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = \",this.log=()=>{}\";\r\n      return str.replace(text, newCode + text);\r\n    },\r\n    websiteLayout(str) {\r\n      let text = '?\"tv\":\"default\"';\r\n      if (!str.includes(text)) return !1;\r\n      let layout = getGlobalPref(\"ui.layout\") === \"tv\" ? \"tv\" : \"default\";\r\n      return str.replace(text, `?\"${layout}\":\"${layout}\"`);\r\n    },\r\n    remotePlayPostStreamRedirectUrl(str) {\r\n      let text = \".RemotePlayRoot.getLink()):\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replace(text, \".Home.getLink()):\")), str;\r\n    },\r\n    remotePlayKeepAlive(str) {\r\n      let text = \"onServerDisconnectMessage(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (\r\n        (str = str.replace(text, text + remote_play_keep_alive_default)), str\r\n      );\r\n    },\r\n    remotePlayConnectMode(str) {\r\n      let text = 'connectMode:\"cloud-connect\",';\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = `connectMode: window.BX_REMOTE_PLAY_CONFIG ? \"xhome-connect\" : \"cloud-connect\",\r\nremotePlayServerId: (window.BX_REMOTE_PLAY_CONFIG && window.BX_REMOTE_PLAY_CONFIG.serverId) || '',`;\r\n      return str.replace(text, newCode);\r\n    },\r\n    remotePlayDisableAchievementToast(str) {\r\n      let text = \".AchievementUnlock:{\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = \"if (!!window.BX_REMOTE_PLAY_CONFIG) return;\";\r\n      return str.replace(text, text + newCode);\r\n    },\r\n    blockWebRtcStatsCollector(str) {\r\n      let text = \"this.shouldCollectStats=!0\";\r\n      if (!str.includes(text)) return !1;\r\n      return str.replace(text, \"this.shouldCollectStats=!1\");\r\n    },\r\n    patchPollGamepads(str) {\r\n      let index = str.indexOf(\"},this.pollGamepads=()=>{\");\r\n      if (index < 0) return !1;\r\n      let setTimeoutIndex = str.indexOf(\"setTimeout(this.pollGamepads\", index);\r\n      if (setTimeoutIndex < 0) return !1;\r\n      let codeBlock = str.substring(index, setTimeoutIndex),\r\n        tmp = str.substring(setTimeoutIndex, setTimeoutIndex + 150),\r\n        tmpPatched = tmp.replaceAll(\r\n          \"Math.max(0,4-\",\r\n          \"Math.max(0,window.BX_STREAM_SETTINGS.controllerPollingRate - \"\r\n        );\r\n      if (\r\n        ((str = PatcherUtils.replaceWith(\r\n          str,\r\n          setTimeoutIndex,\r\n          tmp,\r\n          tmpPatched\r\n        )),\r\n        getGlobalPref(\"block.tracking\"))\r\n      )\r\n        (codeBlock = codeBlock.replace(\r\n          \"this.inputPollingIntervalStats.addValue\",\r\n          \"\"\r\n        )),\r\n          (codeBlock = codeBlock.replace(\r\n            \"this.inputPollingDurationStats.addValue\",\r\n            \"\"\r\n          ));\r\n      let match = codeBlock.match(\r\n        /this\\.gamepadTimestamps\\.set\\(([A-Za-z0-9_$]+)\\.index/\r\n      );\r\n      if (!match) return !1;\r\n      let newCode = renderString(poll_gamepad_default, {\r\n        gamepadVar: match[1],\r\n      });\r\n      if (\r\n        ((codeBlock = codeBlock.replace(\r\n          \"this.gamepadTimestamps.set\",\r\n          newCode + \"this.gamepadTimestamps.set\"\r\n        )),\r\n        (match = codeBlock.match(\r\n          /let ([A-Za-z0-9_$]+)=this\\.gamepadMappings\\.find/\r\n        )),\r\n        !match)\r\n      )\r\n        return !1;\r\n      let xCloudGamepadVar = match[1],\r\n        inputFeedbackManager = PatcherUtils.indexOf(\r\n          codeBlock,\r\n          \"this.inputFeedbackManager.onGamepadConnected(\",\r\n          0,\r\n          1e4\r\n        ),\r\n        backetIndex = PatcherUtils.indexOf(\r\n          codeBlock,\r\n          \"}\",\r\n          inputFeedbackManager,\r\n          100\r\n        );\r\n      if (backetIndex < 0) return !1;\r\n      let customizationCode = \";\";\r\n      return (\r\n        (customizationCode += renderString(controller_customization_default, {\r\n          xCloudGamepadVar,\r\n        })),\r\n        (codeBlock = PatcherUtils.insertAt(\r\n          codeBlock,\r\n          backetIndex,\r\n          customizationCode\r\n        )),\r\n        (str =\r\n          str.substring(0, index) + codeBlock + str.substring(setTimeoutIndex)),\r\n        str\r\n      );\r\n    },\r\n    enableXcloudLogger(str) {\r\n      let index = str.indexOf(\"this.telemetryProvider.trackErrorLike\");\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"}log(\", index, 1500)),\r\n        index > -1 && (index = PatcherUtils.indexOf(str, \"{\", index, 30, !0)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      let newCode = `\r\nconst [logTag, logLevel, logMessage] = Array.from(arguments);\r\nconst logFunc = [console.debug, console.log, console.warn, console.error][logLevel];\r\nlogFunc(logTag, '//', logMessage);\r\n`;\r\n      return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n    },\r\n    enableConsoleLogging(str) {\r\n      let text = \"static isConsoleLoggingAllowed(){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replaceAll(text, text + \"return true;\")), str;\r\n    },\r\n    playVibration(str) {\r\n      let text = \"}playVibration(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replaceAll(text, text + vibration_adjust_default)), str;\r\n    },\r\n    disableGamepadDisconnectedScreen(str) {\r\n      let index = str.indexOf('\"GamepadDisconnected_Title\",');\r\n      if (index < 0) return !1;\r\n      let constIndex = str.indexOf(\"const\", index - 30);\r\n      return (\r\n        (str =\r\n          str.substring(0, constIndex) +\r\n          \"e.onClose();return null;\" +\r\n          str.substring(constIndex)),\r\n        str\r\n      );\r\n    },\r\n    patchUpdateInputConfigurationAsync(str) {\r\n      let text = \"async updateInputConfigurationAsync(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = \"e.enableTouchInput = true;\";\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    disableStreamGate(str) {\r\n      let index = str.indexOf('case\"partially-ready\":');\r\n      if (index < 0) return !1;\r\n      let bracketIndex = str.indexOf(\"=>{\", index - 150) + 3;\r\n      return (\r\n        (str =\r\n          str.substring(0, bracketIndex) +\r\n          \"return 0;\" +\r\n          str.substring(bracketIndex)),\r\n        str\r\n      );\r\n    },\r\n    exposeTouchLayoutManager(str) {\r\n      let text = \"this._perScopeLayoutsStream=new\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = `\r\ntrue;\r\nwindow.BX_EXPOSED[\"touchLayoutManager\"] = this;\r\nwindow.dispatchEvent(new Event(\"${BxEvent.TOUCH_LAYOUT_MANAGER_READY}\"));\r\n`;\r\n      return (str = str.replace(text, newCode + text)), str;\r\n    },\r\n    patchBabylonRendererClass(str) {\r\n      let index = str.indexOf(\".current.render(),\");\r\n      if (index < 0) return !1;\r\n      index -= 1;\r\n      let newCode = `\r\nif (window.BX_EXPOSED.stopTakRendering) {try {document.getElementById('BabylonCanvasContainer-main')?.parentElement.classList.add('bx-offscreen');${str[index]}.current.dispose();} catch (e) {}window.BX_EXPOSED.stopTakRendering = false;return;}\r\n`;\r\n      return (\r\n        (str = str.substring(0, index) + newCode + str.substring(index)), str\r\n      );\r\n    },\r\n    supportLocalCoOp(str) {\r\n      let text = \"this.gamepadMappingsToSend=[],\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = `true; ${local_co_op_enable_default}; true,`;\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    forceFortniteConsole(str) {\r\n      let text = \"sendTouchInputEnabledMessage(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode =\r\n        \"window.location.pathname.includes('/launch/fortnite/') && (e = false);\";\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    disableTakRenderer(str) {\r\n      let text = \"const{TakRenderer:\";\r\n      if (!str.includes(text)) return !1;\r\n      let autoOffCode = \"\";\r\n      if (getGlobalPref(\"touchController.mode\") === \"off\")\r\n        autoOffCode = \"return;\";\r\n      else if (getGlobalPref(\"touchController.autoOff\"))\r\n        autoOffCode = `\r\nconst gamepads = window.navigator.getGamepads();\r\nlet gamepadFound = false;\r\nfor (let gamepad of gamepads) {if (gamepad && gamepad.connected) {gamepadFound = true;break;}}\r\nif (gamepadFound) {return;}\r\n`;\r\n      let newCode = `\r\n${autoOffCode}\r\nconst titleInfo = window.BX_EXPOSED.getTitleInfo();\r\nif (titleInfo && !titleInfo.details.hasTouchSupport && !titleInfo.details.hasFakeTouchSupport) {return;}\r\n`;\r\n      return (str = str.replace(text, newCode + text)), str;\r\n    },\r\n    streamCombineSources(str) {\r\n      let text =\r\n        \"this.useCombinedAudioVideoStream=!!this.deviceInformation.isTizen\";\r\n      if (!str.includes(text)) return !1;\r\n      return (\r\n        (str = str.replace(text, \"this.useCombinedAudioVideoStream=true\")), str\r\n      );\r\n    },\r\n    patchStreamHud(str) {\r\n      let index = str.indexOf(\"let{onCollapse\");\r\n      if (index < 0) return !1;\r\n      let newCode = stream_hud_default;\r\n      if (getGlobalPref(\"touchController.mode\") === \"off\")\r\n        newCode += \"options.canShowTakHUD = false;\";\r\n      return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n    },\r\n    broadcastPollingMode(str) {\r\n      let text = \".setPollingMode=e=>{\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = `\r\nwindow.BX_STREAM_SETTINGS.xCloudPollingMode = e.toLowerCase();\r\nBxEvent.dispatch(window, BxEvent.XCLOUD_POLLING_MODE_CHANGED);\r\n`;\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    patchGamepadPolling(str) {\r\n      let index = str.indexOf(\".shouldHandleGamepadInput)())return void\");\r\n      if (index < 0) return !1;\r\n      return (\r\n        (index = str.indexOf(\"{\", index - 20) + 1),\r\n        (str =\r\n          str.substring(0, index) +\r\n          \"if (window.BX_EXPOSED.disableGamepadPolling) return;\" +\r\n          str.substring(index)),\r\n        str\r\n      );\r\n    },\r\n    patchXcloudTitleInfo(str) {\r\n      let text = \"async cloudConnect\",\r\n        index = str.indexOf(text);\r\n      if (index < 0) return !1;\r\n      let backetIndex = str.indexOf(\"{\", index),\r\n        params = str.substring(index, backetIndex).match(/\\(([^)]+)\\)/)[1];\r\n      if (!params) return !1;\r\n      let titleInfoVar = params.split(\",\")[0],\r\n        newCode = `\r\n${titleInfoVar} = window.BX_EXPOSED.modifyTitleInfo(${titleInfoVar});\r\nBxLogger.info('patchXcloudTitleInfo', ${titleInfoVar});\r\n`;\r\n      return (\r\n        (str =\r\n          str.substring(0, backetIndex + 1) +\r\n          newCode +\r\n          str.substring(backetIndex + 1)),\r\n        str\r\n      );\r\n    },\r\n    patchRemotePlayMkb(str) {\r\n      let text = \"async homeConsoleConnect\",\r\n        index = str.indexOf(text);\r\n      if (index < 0) return !1;\r\n      let backetIndex = str.indexOf(\"{\", index),\r\n        params = str.substring(index, backetIndex).match(/\\(([^)]+)\\)/)[1];\r\n      if (!params) return !1;\r\n      let configsVar = params.split(\",\")[1],\r\n        newCode = `\r\nObject.assign(${configsVar}.inputConfiguration, {enableMouseInput: false,enableKeyboardInput: false,enableAbsoluteMouse: false,});\r\nBxLogger.info('patchRemotePlayMkb', ${configsVar});\r\n`;\r\n      return (\r\n        (str =\r\n          str.substring(0, backetIndex + 1) +\r\n          newCode +\r\n          str.substring(backetIndex + 1)),\r\n        str\r\n      );\r\n    },\r\n    patchAudioMediaStream(str) {\r\n      let text = \".srcObject=this.audioMediaStream,\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode =\r\n        \"window.BX_EXPOSED.setupGainNode(arguments[1], this.audioMediaStream),\";\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    patchCombinedAudioVideoMediaStream(str) {\r\n      let text = \".srcObject=this.combinedAudioVideoStream\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode =\r\n        \",window.BX_EXPOSED.setupGainNode(arguments[0], this.combinedAudioVideoStream)\";\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    patchTouchControlDefaultOpacity(str) {\r\n      let text = \"opacityMultiplier:1\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = `opacityMultiplier: ${(\r\n        getGlobalPref(\"touchController.opacity.default\") / 100\r\n      ).toFixed(1)}`;\r\n      return (str = str.replace(text, newCode)), str;\r\n    },\r\n    patchShowSensorControls(str) {\r\n      let text = \",{shouldShowSensorControls:\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode =\r\n        \",{shouldShowSensorControls: (window.BX_EXPOSED && window.BX_EXPOSED.shouldShowSensorControls) ||\";\r\n      return (str = str.replace(text, newCode)), str;\r\n    },\r\n    exposeStreamSession(str) {\r\n      let text = \",this._connectionType=\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode =\r\n        `;\r\n${expose_stream_session_default}\r\ntrue` + text;\r\n      return (str = str.replace(text, newCode)), str;\r\n    },\r\n    skipFeedbackDialog(str) {\r\n      let text = \"shouldTransitionToFeedback(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replace(text, text + \"return !1;\")), str;\r\n    },\r\n    enableNativeMkb(str) {\r\n      let index = str.indexOf(\".mouseSupported&&\");\r\n      if (index < 0) return !1;\r\n      let varName = str.charAt(index - 1),\r\n        text = `${varName}.mouseSupported&&${varName}.keyboardSupported&&${varName}.fullscreenSupported;`;\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replace(text, text + \"return true;\")), str;\r\n    },\r\n    patchMouseAndKeyboardEnabled(str) {\r\n      let text = \"get mouseAndKeyboardEnabled(){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replace(text, text + \"return true;\")), str;\r\n    },\r\n    exposeInputChannel(str) {\r\n      let index = str.indexOf(\"this.flushData=\");\r\n      if (index < 0) return !1;\r\n      let newCode = \"window.BX_EXPOSED.inputChannel = this,\";\r\n      return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n    },\r\n    disableNativeRequestPointerLock(str) {\r\n      let text = \"async requestPointerLock(){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replace(text, text + \"return;\")), str;\r\n    },\r\n    patchRequestInfoCrash(str) {\r\n      let text = 'if(!e)throw new Error(\"RequestInfo.origin is falsy\");';\r\n      if (!str.includes(text)) return !1;\r\n      return (\r\n        (str = str.replace(text, 'if (!e) e = \"https://www.xbox.com\";')), str\r\n      );\r\n    },\r\n    exposeDialogRoutes(str) {\r\n      let text = \"return{goBack:function(){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (\r\n        (str = str.replace(\r\n          text,\r\n          \"return window.BX_EXPOSED.dialogRoutes = {goBack:function(){\"\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    enableTvRoutes(str) {\r\n      let index = str.indexOf(\".LoginDeviceCode.path,\");\r\n      if (index < 0) return !1;\r\n      let match = /render:.*?jsx\\)\\(([^,]+),/.exec(\r\n        str.substring(index, index + 100)\r\n      );\r\n      if (!match) return !1;\r\n      let funcName = match[1];\r\n      if (\r\n        ((index = str.indexOf(`const ${funcName}=e=>{`)),\r\n        index > -1 && (index = str.indexOf(\"return \", index)),\r\n        index > -1 && (index = str.indexOf(\"?\", index)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = str.substring(0, index) + \"|| true\" + str.substring(index)), str\r\n      );\r\n    },\r\n    ignoreNewsSection(str) {\r\n      let index = str.indexOf('Logger(\"CarouselRow\")');\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"const \", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (str = PatcherUtils.insertAt(str, index, \"return null;\")), str;\r\n    },\r\n    ignorePlayWithFriendsSection(str) {\r\n      let index = str.indexOf('location:\"PlayWithFriendsRow\",');\r\n      if (index < 0) return !1;\r\n      if (\r\n        ((index = PatcherUtils.lastIndexOf(str, \"return\", index, 50)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.replaceWith(str, index, \"return\", \"return null;\")),\r\n        str\r\n      );\r\n    },\r\n    ignoreAllGamesSection(str) {\r\n      let index = str.indexOf(\r\n        'className:\"AllGamesRow-module__allGamesRowContainer'\r\n      );\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.indexOf(str, \"grid:!0,\", index, 1500)),\r\n        index > -1 && (index = PatcherUtils.lastIndexOf(str, \"(0,\", index, 70)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (str = PatcherUtils.insertAt(str, index, \"true ? null :\")), str;\r\n    },\r\n    ignoreByogSection(str) {\r\n      let index = str.indexOf('\"ByogRow-module__container');\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 100)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (str = PatcherUtils.insertAt(str, index, \"return null;\")), str;\r\n    },\r\n    ignorePlayWithTouchSection(str) {\r\n      let index = str.indexOf('(\"Play_With_Touch\"),');\r\n      if (index < 0) return !1;\r\n      if (\r\n        ((index = PatcherUtils.lastIndexOf(str, \"const \", index, 30)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (str = PatcherUtils.insertAt(str, index, \"return null;\")), str;\r\n    },\r\n    ignoreSiglSections(str) {\r\n      let index = str.indexOf(\"SiglRow-module__heroCard___\");\r\n      if (index < 0) return !1;\r\n      if (\r\n        ((index = PatcherUtils.lastIndexOf(str, \"const[\", index, 300)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      let PREF_HIDE_SECTIONS = getGlobalPref(\"ui.hideSections\"),\r\n        siglIds = [],\r\n        sections = {\r\n          \"native-mkb\": \"8fa264dd-124f-4af3-97e8-596fcdf4b486\",\r\n          \"most-popular\": \"e7590b22-e299-44db-ae22-25c61405454c\",\r\n          \"leaving-soon\": \"393f05bf-e596-4ef6-9487-6d4fa0eab987\",\r\n          \"recently-added\": \"44a55037-770f-4bbf-bde5-a9fa27dba1da\",\r\n        };\r\n      for (let section of PREF_HIDE_SECTIONS) {\r\n        let galleryId = sections[section];\r\n        galleryId && siglIds.push(galleryId);\r\n      }\r\n      let newCode = `\r\nif (e && e.id) {const siglId = e.id;if (${siglIds\r\n        .map((item2) => `siglId === \"${item2}\"`)\r\n        .join(\" || \")}) {return null;}}\r\n`;\r\n      return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n    },\r\n    ignoreGenresSection(str) {\r\n      let index = str.indexOf('=\"GenresRow\"');\r\n      if (\r\n        (index > -1 && (index = PatcherUtils.lastIndexOf(str, \"{\", index)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (str = PatcherUtils.insertAt(str, index + 1, \"return null;\")), str;\r\n    },\r\n    overrideStorageGetSettings(str) {\r\n      let text = \"}getSetting(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      let newCode = `\r\n// console.log('setting', this.baseStorageKey, e);\r\nif (this.baseStorageKey in window.BX_EXPOSED.overrideSettings) {const settings = window.BX_EXPOSED.overrideSettings[this.baseStorageKey];if (e in settings) {return settings[e];}}\r\n`;\r\n      return (str = str.replace(text, text + newCode)), str;\r\n    },\r\n    alwaysShowStreamHud(str) {\r\n      let index = str.indexOf(\",{onShowStreamMenu:\");\r\n      if (index < 0) return !1;\r\n      if (((index = str.indexOf(\"&&(0,\", index - 100)), index < 0)) return !1;\r\n      let commaIndex = str.indexOf(\",\", index - 10);\r\n      return (\r\n        (str = str.substring(0, commaIndex) + \",true\" + str.substring(index)),\r\n        str\r\n      );\r\n    },\r\n    patchSetCurrentFocus(str) {\r\n      let index = str.indexOf(\".setCurrentFocus=(\");\r\n      if (index < 0) return !1;\r\n      return (\r\n        (index = str.indexOf(\"{\", index) + 1),\r\n        (str = PatcherUtils.insertAt(\r\n          str,\r\n          index,\r\n          \"e && BxEvent.dispatch(window, BxEvent.NAVIGATION_FOCUS_CHANGED, { element: e });\"\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    detectProductDetailPage(str) {\r\n      let index = str.indexOf('{location:\"ProductDetailPage\",');\r\n      if (\r\n        (index >= 0 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str =\r\n          str.substring(0, index) +\r\n          'BxEvent.dispatch(window, BxEvent.XCLOUD_RENDERING_COMPONENT, { component: \"product-detail\" });' +\r\n          str.substring(index)),\r\n        str\r\n      );\r\n    },\r\n    detectBrowserRouterReady(str) {\r\n      let index = str.indexOf(\"{history:this.history,\");\r\n      if (\r\n        (index >= 0 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 100)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.insertAt(\r\n          str,\r\n          index,\r\n          \"window.BxEvent.dispatch(window, window.BxEvent.XCLOUD_ROUTER_HISTORY_READY, {history: this.history});\"\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    guideAchievementsDefaultLocked(str) {\r\n      let index = str.indexOf(\"FilterButton-module__container\");\r\n      if (\r\n        (index >= 0 &&\r\n          (index = PatcherUtils.lastIndexOf(str, '\"All\"', index, 150)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      if (\r\n        ((str = PatcherUtils.replaceWith(str, index, '\"All\"', '\"Locked\"')),\r\n        (index = str.indexOf(\r\n          '\"Guide_Achievements_Unlocked_Empty\",\"Guide_Achievements_Locked_Empty\"'\r\n        )),\r\n        index >= 0 && (index = PatcherUtils.indexOf(str, '\"All\"', index, 250)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.replaceWith(str, index, '\"All\"', '\"Locked\"')), str\r\n      );\r\n    },\r\n    disableTouchContextMenu(str) {\r\n      let index = str.indexOf('\"ContextualCardActions-module__container');\r\n      if (\r\n        (index >= 0 &&\r\n          (index = str.indexOf('addEventListener(\"touchstart\"', index)),\r\n        index >= 0 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return \", index, 50)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.replaceWith(\r\n          str,\r\n          index,\r\n          \"return\",\r\n          \"return () => {};\"\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    modifyPreloadedState(str) {\r\n      let text = \"=window.__PRELOADED_STATE__;\";\r\n      if (!str.includes(text)) return !1;\r\n      return (\r\n        (str = str.replace(\r\n          text,\r\n          \"=window.BX_EXPOSED.modifyPreloadedState(window.__PRELOADED_STATE__);\"\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    homePageBeforeLoad(str) {\r\n      return PatcherUtils.patchBeforePageLoad(str, \"home\");\r\n    },\r\n    productDetailPageBeforeLoad(str) {\r\n      return PatcherUtils.patchBeforePageLoad(str, \"product-detail\");\r\n    },\r\n    streamPageBeforeLoad(str) {\r\n      return PatcherUtils.patchBeforePageLoad(str, \"stream\");\r\n    },\r\n    disableAbsoluteMouse(str) {\r\n      let text = \"sendAbsoluteMouseCapableMessage(e){\";\r\n      if (!str.includes(text)) return !1;\r\n      return (str = str.replace(text, text + \"return;\")), str;\r\n    },\r\n    changeNotificationsSubscription(str) {\r\n      let text = \";buildSubscriptionQueryParamsForNotifications(\",\r\n        index = str.indexOf(text);\r\n      if (index < 0) return !1;\r\n      index += text.length;\r\n      let subsVar = str[index];\r\n      index = str.indexOf(\"{\", index) + 1;\r\n      let blockFeatures = getGlobalPref(\"block.features\"),\r\n        filters = [];\r\n      if (blockFeatures.includes(\"notifications-invites\"))\r\n        filters.push(\"GameInvite\", \"PartyInvite\");\r\n      if (blockFeatures.includes(\"friends\")) filters.push(\"Follower\");\r\n      if (blockFeatures.includes(\"notifications-achievements\"))\r\n        filters.push(\"AchievementUnlock\");\r\n      let newCode = `\r\nlet subs = ${subsVar};\r\nsubs = subs.filter(val => !${JSON.stringify(filters)}.includes(val));\r\n${subsVar} = subs;\r\n`;\r\n      return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n    },\r\n    exposeReactCreateComponent(str) {\r\n      let index = str.indexOf(\".prototype.isReactComponent={}\");\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.indexOf(str, \".createElement=\", index)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      if (\r\n        ((str = PatcherUtils.insertAt(\r\n          str,\r\n          index - 1,\r\n          \"window.BX_EXPOSED.reactCreateElement=\"\r\n        )),\r\n        (index = PatcherUtils.indexOf(str, \".useEffect=\", index)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.insertAt(\r\n          str,\r\n          index - 1,\r\n          \"window.BX_EXPOSED.reactUseEffect=\"\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    gameCardCustomIcons(str) {\r\n      let initialIndex = str.indexOf(\"const{supportedInputIcons:\");\r\n      if (initialIndex < 0) return !1;\r\n      let returnIndex = PatcherUtils.lastIndexOf(\r\n        str,\r\n        \"return \",\r\n        str.indexOf(\"SupportedInputsBadge\")\r\n      );\r\n      if (returnIndex < 0) return !1;\r\n      let arrowIndex = PatcherUtils.lastIndexOf(str, \"=>{\", initialIndex, 300);\r\n      if (arrowIndex < 0) return !1;\r\n      let paramVar = PatcherUtils.getVariableNameBefore(str, arrowIndex),\r\n        supportedInputIconsVar = PatcherUtils.getVariableNameAfter(\r\n          str,\r\n          PatcherUtils.indexOf(\r\n            str,\r\n            \"supportedInputIcons:\",\r\n            initialIndex,\r\n            100,\r\n            !0\r\n          )\r\n        );\r\n      if (!paramVar || !supportedInputIconsVar) return !1;\r\n      let newCode = renderString(game_card_icons_default, {\r\n        param: paramVar,\r\n        supportedInputIcons: supportedInputIconsVar,\r\n      });\r\n      return (str = PatcherUtils.insertAt(str, returnIndex, newCode)), str;\r\n    },\r\n    setImageQuality(str) {\r\n      let index = str.indexOf(\"const{size:{width:\");\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.indexOf(\r\n            str,\r\n            \"=new URLSearchParams\",\r\n            index,\r\n            500\r\n          )),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      let paramVar = PatcherUtils.getVariableNameBefore(str, index);\r\n      if (!paramVar) return !1;\r\n      index = PatcherUtils.indexOf(str, \"return\", index, 200);\r\n      let newCode = `${paramVar}.set('q', ${getGlobalPref(\r\n        \"ui.imageQuality\"\r\n      )});`;\r\n      return (str = PatcherUtils.insertAt(str, index, newCode)), str;\r\n    },\r\n    setBackgroundImageQuality(str) {\r\n      let index = str.indexOf(\"}?w=${\");\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.indexOf(str, \"}\", index + 1, 10, !0)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.insertAt(\r\n          str,\r\n          index,\r\n          `&q=${getGlobalPref(\"ui.imageQuality\")}`\r\n        )),\r\n        str\r\n      );\r\n    },\r\n    injectHeaderUseEffect(str) {\r\n      let index = str.indexOf('\"EdgewaterHeader-module__spaceBetween');\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 300)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return PatcherUtils.injectUseEffect(\r\n        str,\r\n        index,\r\n        \"Script\",\r\n        \"ui.header.rendered\"\r\n      );\r\n    },\r\n    injectErrorPageUseEffect(str) {\r\n      let index = str.indexOf('\"PureErrorPage-module__container');\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return PatcherUtils.injectUseEffect(\r\n        str,\r\n        index,\r\n        \"Script\",\r\n        \"ui.error.rendered\"\r\n      );\r\n    },\r\n    injectStreamMenuUseEffect(str) {\r\n      let index = str.indexOf('\"StreamMenu-module__container');\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return PatcherUtils.injectUseEffect(\r\n        str,\r\n        index,\r\n        \"Stream\",\r\n        \"ui.streamMenu.rendered\"\r\n      );\r\n    },\r\n    injectGuideHomeUseEffect(str) {\r\n      let index = str.indexOf(\r\n        '\"HomeLandingPage-module__authenticatedContentContainer'\r\n      );\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return PatcherUtils.injectUseEffect(\r\n        str,\r\n        index,\r\n        \"Script\",\r\n        \"ui.guideHome.rendered\"\r\n      );\r\n    },\r\n    injectCreatePortal(str) {\r\n      let index = str.indexOf(\".createPortal=function\");\r\n      if (\r\n        (index > -1 && (index = PatcherUtils.indexOf(str, \"{\", index, 50, !0)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return (\r\n        (str = PatcherUtils.insertAt(str, index, create_portal_default)), str\r\n      );\r\n    },\r\n    injectAchievementsProgressUseEffect(str) {\r\n      let index = str.indexOf(\r\n        '\"AchievementsButton-module__progressBarContainer'\r\n      );\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"return\", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return PatcherUtils.injectUseEffect(\r\n        str,\r\n        index,\r\n        \"Script\",\r\n        \"ui.guideAchievementProgress.rendered\"\r\n      );\r\n    },\r\n    injectAchievementsDetailUseEffect(str) {\r\n      let index = str.indexOf(\"GuideAchievementDetail.useParams()\");\r\n      if (\r\n        (index > -1 &&\r\n          (index = PatcherUtils.lastIndexOf(str, \"const\", index, 200)),\r\n        index < 0)\r\n      )\r\n        return !1;\r\n      return PatcherUtils.injectUseEffect(\r\n        str,\r\n        index,\r\n        \"Script\",\r\n        \"ui.guideAchievementDetail.rendered\"\r\n      );\r\n    },\r\n  },\r\n  PATCH_ORDERS = PatcherUtils.filterPatches([\r\n    ...(AppInterface && getGlobalPref(\"nativeMkb.mode\") === \"on\"\r\n      ? [\"enableNativeMkb\", \"disableAbsoluteMouse\"]\r\n      : []),\r\n    \"exposeReactCreateComponent\",\r\n    \"injectCreatePortal\",\r\n    \"broadcastPollingMode\",\r\n    getGlobalPref(\"ui.gameCard.waitTime.show\") && \"patchSetCurrentFocus\",\r\n    \"patchGamepadPolling\",\r\n    \"modifyPreloadedState\",\r\n    \"detectBrowserRouterReady\",\r\n    \"exposeStreamSession\",\r\n    \"supportLocalCoOp\",\r\n    \"disableStreamGate\",\r\n    \"exposeDialogRoutes\",\r\n    ...(getGlobalPref(\"ui.imageQuality\") < 90 ? [\"setImageQuality\"] : []),\r\n    \"patchRequestInfoCrash\",\r\n    \"injectErrorPageUseEffect\",\r\n    \"streamPageBeforeLoad\",\r\n    \"injectGuideHomeUseEffect\",\r\n    \"injectAchievementsProgressUseEffect\",\r\n    \"injectAchievementsDetailUseEffect\",\r\n    \"guideAchievementsDefaultLocked\",\r\n    \"injectHeaderUseEffect\",\r\n    \"homePageBeforeLoad\",\r\n    \"gameCardCustomIcons\",\r\n    \"productDetailPageBeforeLoad\",\r\n    \"enableTvRoutes\",\r\n    \"overrideStorageGetSettings\",\r\n    getGlobalPref(\"ui.layout\") !== \"default\" && \"websiteLayout\",\r\n    getGlobalPref(\"game.fortnite.forceConsole\") && \"forceFortniteConsole\",\r\n    ...(STATES.userAgent.capabilities.touch ? [\"disableTouchContextMenu\"] : []),\r\n    ...(getGlobalPref(\"block.tracking\")\r\n      ? [\r\n          \"disableAiTrack\",\r\n          \"blockWebRtcStatsCollector\",\r\n          \"disableIndexDbLogging\",\r\n          \"disableTelemetryProvider\",\r\n        ]\r\n      : []),\r\n    ...(getGlobalPref(\"xhome.enabled\")\r\n      ? [\r\n          \"remotePlayKeepAlive\",\r\n          \"remotePlayDisableAchievementToast\",\r\n          STATES.userAgent.capabilities.touch &&\r\n            \"patchUpdateInputConfigurationAsync\",\r\n        ]\r\n      : []),\r\n    ...(BX_FLAGS.EnableXcloudLogging\r\n      ? [\"enableConsoleLogging\", \"enableXcloudLogger\"]\r\n      : []),\r\n  ]),\r\n  hideSections = getGlobalPref(\"ui.hideSections\"),\r\n  HOME_PAGE_PATCH_ORDERS = PatcherUtils.filterPatches([\r\n    hideSections.includes(\"genres\") && \"ignoreGenresSection\",\r\n    !getGlobalPref(\"block.features\").includes(\"byog\") &&\r\n      hideSections.includes(\"byog\") &&\r\n      \"ignoreByogSection\",\r\n    STATES.browser.capabilities.touch &&\r\n      hideSections.includes(\"touch\") &&\r\n      \"ignorePlayWithTouchSection\",\r\n    getGlobalPref(\"ui.imageQuality\") < 90 && \"setBackgroundImageQuality\",\r\n    hideSections.some((value) =>\r\n      [\"native-mkb\", \"most-popular\"].includes(value)\r\n    ) && \"ignoreSiglSections\",\r\n    hideSections.includes(\"news\") && \"ignoreNewsSection\",\r\n    (getGlobalPref(\"block.features\").includes(\"friends\") ||\r\n      hideSections.includes(\"friends\")) &&\r\n      \"ignorePlayWithFriendsSection\",\r\n    hideSections.includes(\"all-games\") && \"ignoreAllGamesSection\",\r\n    ...(blockSomeNotifications() ? [\"changeNotificationsSubscription\"] : []),\r\n  ]),\r\n  STREAM_PAGE_PATCH_ORDERS = PatcherUtils.filterPatches([\r\n    \"exposeInputChannel\",\r\n    \"patchXcloudTitleInfo\",\r\n    \"disableGamepadDisconnectedScreen\",\r\n    \"patchStreamHud\",\r\n    \"playVibration\",\r\n    \"alwaysShowStreamHud\",\r\n    \"injectStreamMenuUseEffect\",\r\n    getGlobalPref(\"audio.volume.booster.enabled\") &&\r\n      !getGlobalPref(\"stream.video.combineAudio\") &&\r\n      \"patchAudioMediaStream\",\r\n    getGlobalPref(\"audio.volume.booster.enabled\") &&\r\n      getGlobalPref(\"stream.video.combineAudio\") &&\r\n      \"patchCombinedAudioVideoMediaStream\",\r\n    getGlobalPref(\"ui.feedbackDialog.disabled\") && \"skipFeedbackDialog\",\r\n    ...(STATES.userAgent.capabilities.touch\r\n      ? [\r\n          getGlobalPref(\"touchController.mode\") === \"all\" &&\r\n            \"patchShowSensorControls\",\r\n          getGlobalPref(\"touchController.mode\") === \"all\" &&\r\n            \"exposeTouchLayoutManager\",\r\n          (getGlobalPref(\"touchController.mode\") === \"off\" ||\r\n            getGlobalPref(\"touchController.autoOff\")) &&\r\n            \"disableTakRenderer\",\r\n          getGlobalPref(\"touchController.opacity.default\") !== 100 &&\r\n            \"patchTouchControlDefaultOpacity\",\r\n          getGlobalPref(\"touchController.mode\") !== \"off\" &&\r\n            (getGlobalPref(\"mkb.enabled\") ||\r\n              getGlobalPref(\"nativeMkb.mode\") === \"on\") &&\r\n            \"patchBabylonRendererClass\",\r\n        ]\r\n      : []),\r\n    BX_FLAGS.EnableXcloudLogging && \"enableConsoleLogging\",\r\n    \"patchPollGamepads\",\r\n    getGlobalPref(\"stream.video.combineAudio\") && \"streamCombineSources\",\r\n    ...(getGlobalPref(\"xhome.enabled\")\r\n      ? [\r\n          \"remotePlayPostStreamRedirectUrl\",\r\n          \"patchRemotePlayMkb\",\r\n          \"remotePlayConnectMode\",\r\n        ]\r\n      : []),\r\n    ...(AppInterface && getGlobalPref(\"nativeMkb.mode\") === \"on\"\r\n      ? [\"patchMouseAndKeyboardEnabled\", \"disableNativeRequestPointerLock\"]\r\n      : []),\r\n  ]),\r\n  PRODUCT_DETAIL_PAGE_PATCH_ORDERS = PatcherUtils.filterPatches([\r\n    \"detectProductDetailPage\",\r\n  ]),\r\n  ALL_PATCHES = [\r\n    ...PATCH_ORDERS,\r\n    ...HOME_PAGE_PATCH_ORDERS,\r\n    ...STREAM_PAGE_PATCH_ORDERS,\r\n    ...PRODUCT_DETAIL_PAGE_PATCH_ORDERS,\r\n  ];\r\nclass Patcher {\r\n  static remainingPatches = {\r\n    home: HOME_PAGE_PATCH_ORDERS,\r\n    stream: STREAM_PAGE_PATCH_ORDERS,\r\n    \"product-detail\": PRODUCT_DETAIL_PAGE_PATCH_ORDERS,\r\n  };\r\n  static patchPage(page) {\r\n    let remaining = Patcher.remainingPatches[page];\r\n    if (!remaining) return;\r\n    (PATCH_ORDERS = PATCH_ORDERS.concat(remaining)),\r\n      delete Patcher.remainingPatches[page];\r\n  }\r\n  static patchNativeBind() {\r\n    let nativeBind = Function.prototype.bind;\r\n    Function.prototype.bind = function () {\r\n      let valid = !1;\r\n      if (\r\n        this.name.length <= 2 &&\r\n        arguments.length === 2 &&\r\n        arguments[0] === null\r\n      ) {\r\n        if (arguments[1] === 0 || typeof arguments[1] === \"function\")\r\n          valid = !0;\r\n      }\r\n      if (!valid) return nativeBind.apply(this, arguments);\r\n      if (typeof arguments[1] === \"function\")\r\n        BxLogger.info(LOG_TAG2, \"Restored Function.prototype.bind()\"),\r\n          (Function.prototype.bind = nativeBind);\r\n      let orgFunc = this,\r\n        newFunc = (a, item2) => {\r\n          Patcher.checkChunks(item2), orgFunc(a, item2);\r\n        };\r\n      return nativeBind.apply(newFunc, arguments);\r\n    };\r\n  }\r\n  static checkChunks(item) {\r\n    let patchesToCheck,\r\n      appliedPatches,\r\n      chunkData = item[1],\r\n      patchesMap = {},\r\n      patcherCache = PatcherCache.getInstance();\r\n    for (let chunkId in chunkData) {\r\n      appliedPatches = [];\r\n      let cachedPatches = patcherCache.getPatches(chunkId);\r\n      if (cachedPatches)\r\n        (patchesToCheck = cachedPatches.slice(0)),\r\n          patchesToCheck.push(...PATCH_ORDERS);\r\n      else patchesToCheck = PATCH_ORDERS.slice(0);\r\n      if (!patchesToCheck.length) continue;\r\n      let func = chunkData[chunkId],\r\n        funcStr = func.toString(),\r\n        patchedFuncStr = funcStr,\r\n        modified = !1,\r\n        chunkAppliedPatches = [];\r\n      for (\r\n        let patchIndex = 0;\r\n        patchIndex < patchesToCheck.length;\r\n        patchIndex++\r\n      ) {\r\n        let patchName = patchesToCheck[patchIndex];\r\n        if (appliedPatches.indexOf(patchName) > -1) continue;\r\n        if (!PATCHES[patchName]) continue;\r\n        let tmpStr = PATCHES[patchName].call(null, patchedFuncStr);\r\n        if (!tmpStr) continue;\r\n        (modified = !0),\r\n          (patchedFuncStr = tmpStr),\r\n          appliedPatches.push(patchName),\r\n          chunkAppliedPatches.push(patchName),\r\n          patchesToCheck.splice(patchIndex, 1),\r\n          patchIndex--,\r\n          (PATCH_ORDERS = PATCH_ORDERS.filter((item2) => item2 != patchName));\r\n      }\r\n      if (modified) {\r\n        BxLogger.info(\r\n          LOG_TAG2,\r\n          `✅ [${chunkId}] ${chunkAppliedPatches.join(\", \")}`\r\n        ),\r\n          PATCH_ORDERS.length &&\r\n            BxLogger.info(LOG_TAG2, \"Remaining patches\", PATCH_ORDERS),\r\n          BX_FLAGS.Debug && console.time(LOG_TAG2);\r\n        try {\r\n          chunkData[chunkId] = eval(patchedFuncStr);\r\n        } catch (e) {\r\n          if (e instanceof Error)\r\n            BxLogger.error(\r\n              LOG_TAG2,\r\n              \"Error\",\r\n              appliedPatches,\r\n              e.message,\r\n              patchedFuncStr\r\n            );\r\n        }\r\n        BX_FLAGS.Debug && console.timeEnd(LOG_TAG2);\r\n      }\r\n      if (appliedPatches.length) patchesMap[chunkId] = appliedPatches;\r\n    }\r\n    if (Object.keys(patchesMap).length) patcherCache.saveToCache(patchesMap);\r\n  }\r\n  static init() {\r\n    Patcher.patchNativeBind();\r\n  }\r\n}\r\nclass PatcherCache {\r\n  static instance;\r\n  static getInstance = () =>\r\n    PatcherCache.instance ?? (PatcherCache.instance = new PatcherCache());\r\n  KEY_CACHE = \"BetterXcloud.Patches.Cache\";\r\n  KEY_SIGNATURE = \"BetterXcloud.Patches.Cache.Signature\";\r\n  CACHE;\r\n  constructor() {\r\n    this.checkSignature(),\r\n      (this.CACHE = JSON.parse(\r\n        window.localStorage.getItem(this.KEY_CACHE) || \"{}\"\r\n      )),\r\n      BxLogger.info(LOG_TAG2, \"Cache\", this.CACHE);\r\n    let pathName = window.location.pathname;\r\n    if (pathName.includes(\"/play/launch/\")) Patcher.patchPage(\"stream\");\r\n    else if (pathName.includes(\"/play/games/\"))\r\n      Patcher.patchPage(\"product-detail\");\r\n    else if (pathName.endsWith(\"/play\") || pathName.endsWith(\"/play/\"))\r\n      Patcher.patchPage(\"home\");\r\n    (PATCH_ORDERS = this.cleanupPatches(PATCH_ORDERS)),\r\n      (STREAM_PAGE_PATCH_ORDERS = this.cleanupPatches(\r\n        STREAM_PAGE_PATCH_ORDERS\r\n      )),\r\n      (PRODUCT_DETAIL_PAGE_PATCH_ORDERS = this.cleanupPatches(\r\n        PRODUCT_DETAIL_PAGE_PATCH_ORDERS\r\n      )),\r\n      BxLogger.info(LOG_TAG2, \"PATCH_ORDERS\", PATCH_ORDERS.slice(0));\r\n  }\r\n  getSignature() {\r\n    let scriptVersion = SCRIPT_VERSION,\r\n      patches = JSON.stringify(ALL_PATCHES),\r\n      webVersion = \"\",\r\n      $link = document.querySelector(\r\n        'link[data-chunk=\"client\"][href*=\"/client.\"]'\r\n      );\r\n    if ($link) {\r\n      let match = /\\/client\\.([^\\.]+)\\.js/.exec($link.href);\r\n      match && (webVersion = match[1]);\r\n    } else\r\n      webVersion =\r\n        document.querySelector(\"meta[name=gamepass-app-version]\")?.content ??\r\n        \"\";\r\n    return hashCode(scriptVersion + webVersion + patches);\r\n  }\r\n  clear() {\r\n    window.localStorage.removeItem(this.KEY_CACHE), (this.CACHE = {});\r\n  }\r\n  checkSignature() {\r\n    let storedSig = window.localStorage.getItem(this.KEY_SIGNATURE) || 0,\r\n      currentSig = this.getSignature();\r\n    if (currentSig !== parseInt(storedSig))\r\n      BxLogger.warning(LOG_TAG2, \"Signature changed\"),\r\n        window.localStorage.setItem(this.KEY_SIGNATURE, currentSig.toString()),\r\n        this.clear();\r\n    else BxLogger.info(LOG_TAG2, \"Signature unchanged\");\r\n  }\r\n  cleanupPatches(patches) {\r\n    return patches.filter((item2) => {\r\n      for (let id in this.CACHE) if (this.CACHE[id].includes(item2)) return !1;\r\n      return !0;\r\n    });\r\n  }\r\n  getPatches(id) {\r\n    return this.CACHE[id];\r\n  }\r\n  saveToCache(subCache) {\r\n    for (let id in subCache) {\r\n      let patchNames = subCache[id],\r\n        data = this.CACHE[id];\r\n      if (!data) this.CACHE[id] = patchNames;\r\n      else\r\n        for (let patchName of patchNames)\r\n          if (!data.includes(patchName)) data.push(patchName);\r\n    }\r\n    window.localStorage.setItem(this.KEY_CACHE, JSON.stringify(this.CACHE));\r\n  }\r\n}\r\nclass FullscreenText {\r\n  static instance;\r\n  static getInstance = () =>\r\n    FullscreenText.instance ?? (FullscreenText.instance = new FullscreenText());\r\n  LOG_TAG = \"FullscreenText\";\r\n  $text;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.$text = CE(\"div\", { class: \"bx-fullscreen-text bx-gone\" })),\r\n      document.documentElement.appendChild(this.$text);\r\n  }\r\n  show(msg) {\r\n    document.body.classList.add(\"bx-no-scroll\"),\r\n      this.$text.classList.remove(\"bx-gone\"),\r\n      (this.$text.textContent = msg);\r\n  }\r\n  hide() {\r\n    document.body.classList.remove(\"bx-no-scroll\"),\r\n      this.$text.classList.add(\"bx-gone\");\r\n  }\r\n}\r\nclass BaseProfileManagerDialog extends NavigationDialog {\r\n  $container;\r\n  title;\r\n  presetsDb;\r\n  allPresets;\r\n  currentPresetId = null;\r\n  activatedPresetId = null;\r\n  $presets;\r\n  $header;\r\n  $defaultNote;\r\n  $content;\r\n  $btnRename;\r\n  $btnDelete;\r\n  constructor(title, presetsDb) {\r\n    super();\r\n    (this.title = title), (this.presetsDb = presetsDb);\r\n  }\r\n  async renderSummary(presetId) {\r\n    return null;\r\n  }\r\n  updateButtonStates() {\r\n    let isDefaultPreset =\r\n      this.currentPresetId === null || this.currentPresetId <= 0;\r\n    (this.$btnRename.disabled = isDefaultPreset),\r\n      (this.$btnDelete.disabled = isDefaultPreset),\r\n      this.$defaultNote.classList.toggle(\"bx-gone\", !isDefaultPreset);\r\n  }\r\n  async renderPresetsList() {\r\n    if (\r\n      ((this.allPresets = await this.presetsDb.getPresets()),\r\n      this.currentPresetId === null)\r\n    )\r\n      this.currentPresetId = this.allPresets.default[0];\r\n    renderPresetsList(this.$presets, this.allPresets, this.activatedPresetId, {\r\n      selectedIndicator: !0,\r\n    });\r\n  }\r\n  promptNewName(action, value = \"\") {\r\n    let newName = \"\";\r\n    while (!newName) {\r\n      if (\r\n        ((newName = prompt(`[${action}] ${t(\"prompt-preset-name\")}`, value)),\r\n        newName === null)\r\n      )\r\n        return !1;\r\n      newName = newName.trim();\r\n    }\r\n    return newName ? newName : !1;\r\n  }\r\n  async renderDialog() {\r\n    this.$presets = CE(\"select\", { class: \"bx-full-width\", tabindex: -1 });\r\n    let $select = BxSelectElement.create(this.$presets);\r\n    $select.addEventListener(\"input\", (e) => {\r\n      this.switchPreset(parseInt($select.value));\r\n    });\r\n    let $header = CE(\r\n      \"div\",\r\n      {\r\n        class: \"bx-dialog-preset-tools\",\r\n        _nearby: { orientation: \"horizontal\", focus: $select },\r\n      },\r\n      $select,\r\n      (this.$btnRename = createButton({\r\n        title: t(\"rename\"),\r\n        icon: BxIcon.CURSOR_TEXT,\r\n        style: 64,\r\n        onClick: async () => {\r\n          let preset = this.allPresets.data[this.currentPresetId],\r\n            newName = this.promptNewName(t(\"rename\"), preset.name);\r\n          if (!newName) return;\r\n          (preset.name = newName),\r\n            await this.presetsDb.updatePreset(preset),\r\n            await this.refresh();\r\n        },\r\n      })),\r\n      (this.$btnDelete = createButton({\r\n        icon: BxIcon.TRASH,\r\n        title: t(\"delete\"),\r\n        style: 4 | 64,\r\n        onClick: async (e) => {\r\n          if (!confirm(t(\"confirm-delete-preset\"))) return;\r\n          await this.presetsDb.deletePreset(this.currentPresetId),\r\n            delete this.allPresets.data[this.currentPresetId],\r\n            (this.currentPresetId = parseInt(\r\n              Object.keys(this.allPresets.data)[0]\r\n            )),\r\n            await this.refresh();\r\n        },\r\n      })),\r\n      createButton({\r\n        icon: BxIcon.NEW,\r\n        title: t(\"new\"),\r\n        style: 64 | 1,\r\n        onClick: async (e) => {\r\n          let newName = this.promptNewName(t(\"new\"));\r\n          if (!newName) return;\r\n          let newId = await this.presetsDb.newPreset(\r\n            newName,\r\n            this.presetsDb.BLANK_PRESET_DATA\r\n          );\r\n          (this.currentPresetId = newId), await this.refresh();\r\n        },\r\n      }),\r\n      createButton({\r\n        icon: BxIcon.COPY,\r\n        title: t(\"copy\"),\r\n        style: 64 | 1,\r\n        onClick: async (e) => {\r\n          let preset = this.allPresets.data[this.currentPresetId],\r\n            newName = this.promptNewName(t(\"copy\"), `${preset.name} (2)`);\r\n          if (!newName) return;\r\n          let newId = await this.presetsDb.newPreset(newName, preset.data);\r\n          (this.currentPresetId = newId), await this.refresh();\r\n        },\r\n      })\r\n    );\r\n    (this.$header = $header),\r\n      (this.$container = CE(\r\n        \"div\",\r\n        { class: \"bx-centered-dialog\" },\r\n        CE(\r\n          \"div\",\r\n          { class: \"bx-dialog-title\" },\r\n          CE(\"p\", !1, this.title),\r\n          createButton({\r\n            icon: BxIcon.CLOSE,\r\n            style: 64 | 2048 | 8,\r\n            onClick: (e) => this.hide(),\r\n          })\r\n        ),\r\n        CE(\r\n          \"div\",\r\n          !1,\r\n          $header,\r\n          (this.$defaultNote = CE(\r\n            \"div\",\r\n            { class: \"bx-default-preset-note bx-gone\" },\r\n            t(\"default-preset-note\")\r\n          ))\r\n        ),\r\n        CE(\"div\", { class: \"bx-dialog-content\" }, this.$content)\r\n      ));\r\n  }\r\n  async refresh() {\r\n    await this.renderPresetsList(),\r\n      (this.$presets.value = this.currentPresetId.toString()),\r\n      BxEvent.dispatch(this.$presets, \"input\", { manualTrigger: !0 });\r\n  }\r\n  async onBeforeMount(configs = {}) {\r\n    await this.renderPresetsList();\r\n    let valid = !1;\r\n    if (typeof configs?.id === \"number\") {\r\n      if (configs.id in this.allPresets.data)\r\n        (this.currentPresetId = configs.id),\r\n          (this.activatedPresetId = configs.id),\r\n          (valid = !0);\r\n    }\r\n    if (!valid)\r\n      (this.currentPresetId = this.allPresets.default[0]),\r\n        (this.activatedPresetId = null);\r\n    this.refresh();\r\n  }\r\n  getDialog() {\r\n    return this;\r\n  }\r\n  getContent() {\r\n    if (!this.$container) this.renderDialog();\r\n    return this.$container;\r\n  }\r\n  focusIfNeeded() {\r\n    this.dialogManager.focus(this.$header);\r\n  }\r\n}\r\nvar SHORTCUT_ACTIONS = {\r\n  [t(\"better-xcloud\")]: { \"bx.settings.show\": [t(\"settings\"), t(\"show\")] },\r\n  ...(STATES.browser.capabilities.mkb\r\n    ? { [t(\"mouse-and-keyboard\")]: { \"mkb.toggle\": [t(\"toggle\")] } }\r\n    : {}),\r\n  [t(\"controller\")]: {\r\n    \"controller.xbox.press\": [t(\"button-xbox\"), t(\"press\")],\r\n  },\r\n  ...(AppInterface\r\n    ? {\r\n        [t(\"device\")]: {\r\n          \"device.sound.toggle\": [t(\"sound\"), t(\"toggle\")],\r\n          \"device.volume.inc\": [t(\"volume\"), t(\"increase\")],\r\n          \"device.volume.dec\": [t(\"volume\"), t(\"decrease\")],\r\n          \"device.brightness.inc\": [t(\"brightness\"), t(\"increase\")],\r\n          \"device.brightness.dec\": [t(\"brightness\"), t(\"decrease\")],\r\n        },\r\n      }\r\n    : {}),\r\n  [t(\"stream\")]: {\r\n    \"stream.screenshot.capture\": [t(\"take-screenshot\")],\r\n    \"stream.video.toggle\": [t(\"video\"), t(\"toggle\")],\r\n    \"stream.sound.toggle\": [t(\"sound\"), t(\"toggle\")],\r\n    ...(getGlobalPref(\"audio.volume.booster.enabled\")\r\n      ? {\r\n          \"stream.volume.inc\": [t(\"volume\"), t(\"increase\")],\r\n          \"stream.volume.dec\": [t(\"volume\"), t(\"decrease\")],\r\n        }\r\n      : {}),\r\n    \"stream.menu.show\": [t(\"menu\"), t(\"show\")],\r\n    \"stream.stats.toggle\": [t(\"stats\"), t(\"show-hide\")],\r\n    \"stream.microphone.toggle\": [t(\"microphone\"), t(\"toggle\")],\r\n  },\r\n  [t(\"other\")]: { \"ta.open\": [t(\"true-achievements\"), t(\"show\")] },\r\n};\r\nclass ControllerShortcutsManagerDialog extends BaseProfileManagerDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    ControllerShortcutsManagerDialog.instance ??\r\n    (ControllerShortcutsManagerDialog.instance =\r\n      new ControllerShortcutsManagerDialog(t(\"controller-shortcuts\")));\r\n  $content;\r\n  selectActions = {};\r\n  BUTTONS_ORDER = [3, 0, 2, 1, 12, 13, 14, 15, 8, 9, 4, 5, 6, 7, 10, 11];\r\n  constructor(title) {\r\n    super(title, ControllerShortcutsTable.getInstance());\r\n    let $baseSelect = CE(\r\n      \"select\",\r\n      { class: \"bx-full-width\", autocomplete: \"off\" },\r\n      CE(\"option\", { value: \"\" }, \"---\")\r\n    );\r\n    for (let groupLabel in SHORTCUT_ACTIONS) {\r\n      let items = SHORTCUT_ACTIONS[groupLabel];\r\n      if (!items) continue;\r\n      let $optGroup = CE(\"optgroup\", { label: groupLabel });\r\n      for (let action in items) {\r\n        let crumbs = items[action];\r\n        if (!crumbs) continue;\r\n        let label = crumbs.join(\" ❯ \"),\r\n          $option = CE(\"option\", { value: action }, label);\r\n        $optGroup.appendChild($option);\r\n      }\r\n      $baseSelect.appendChild($optGroup);\r\n    }\r\n    let $content = CE(\"div\", {\r\n        class: \"bx-controller-shortcuts-manager-container\",\r\n      }),\r\n      onActionChanged = (e) => {\r\n        if (!e.ignoreOnChange) this.updatePreset();\r\n      },\r\n      fragment = document.createDocumentFragment();\r\n    fragment.appendChild(\r\n      CE(\r\n        \"p\",\r\n        { class: \"bx-shortcut-note\" },\r\n        CE(\"span\", { class: \"bx-prompt\" }, \"\"),\r\n        \": \" + t(\"controller-shortcuts-xbox-note\")\r\n      )\r\n    );\r\n    for (let button of this.BUTTONS_ORDER) {\r\n      let prompt2 = GamepadKeyName[button][1],\r\n        $row = CE(\"div\", {\r\n          class: \"bx-shortcut-row\",\r\n          _nearby: { orientation: \"horizontal\" },\r\n        }),\r\n        $label = CE(\"label\", { class: \"bx-prompt\" }, `${\"\"}${prompt2}`),\r\n        $select = BxSelectElement.create($baseSelect.cloneNode(!0));\r\n      ($select.dataset.button = button.toString()),\r\n        $select.addEventListener(\"input\", onActionChanged),\r\n        (this.selectActions[button] = $select),\r\n        setNearby($row, { focus: $select }),\r\n        $row.append($label, $select),\r\n        fragment.appendChild($row);\r\n    }\r\n    $content.appendChild(fragment), (this.$content = $content);\r\n  }\r\n  switchPreset(id) {\r\n    let preset = this.allPresets.data[id];\r\n    if (!preset) {\r\n      this.currentPresetId = 0;\r\n      return;\r\n    }\r\n    this.currentPresetId = id;\r\n    let isDefaultPreset = id <= 0,\r\n      actions = preset.data,\r\n      button;\r\n    for (button in this.selectActions) {\r\n      let $select = this.selectActions[button];\r\n      ($select.value = actions.mapping[button] || \"\"),\r\n        ($select.disabled = isDefaultPreset),\r\n        BxEvent.dispatch($select, \"input\", {\r\n          ignoreOnChange: !0,\r\n          manualTrigger: !0,\r\n        });\r\n    }\r\n    super.updateButtonStates();\r\n  }\r\n  updatePreset() {\r\n    let newData = deepClone(this.presetsDb.BLANK_PRESET_DATA),\r\n      button;\r\n    for (button in this.selectActions) {\r\n      let action = this.selectActions[button].value;\r\n      if (!action) continue;\r\n      newData.mapping[button] = action;\r\n    }\r\n    let preset = this.allPresets.data[this.currentPresetId];\r\n    (preset.data = newData), this.presetsDb.updatePreset(preset);\r\n  }\r\n  onBeforeUnmount() {\r\n    StreamSettings.refreshControllerSettings(), super.onBeforeUnmount();\r\n  }\r\n}\r\nclass BxDualNumberStepper extends HTMLInputElement {\r\n  controlValues;\r\n  controlMin;\r\n  controlMinDiff;\r\n  controlMax;\r\n  steps;\r\n  options;\r\n  onChange;\r\n  $text;\r\n  $rangeFrom;\r\n  $rangeTo;\r\n  $activeRange;\r\n  onRangeInput;\r\n  setValue;\r\n  getValue;\r\n  normalizeValue;\r\n  static create(key, values, options, onChange) {\r\n    (options.suffix = options.suffix || \"\"),\r\n      (options.disabled = !!options.disabled);\r\n    let $text,\r\n      $rangeFrom,\r\n      $rangeTo,\r\n      self = CE(\r\n        \"div\",\r\n        {\r\n          class: \"bx-dual-number-stepper\",\r\n          id: `bx_setting_${escapeCssSelector(key)}`,\r\n        },\r\n        ($text = CE(\"span\"))\r\n      );\r\n    if (\r\n      ((self.$text = $text),\r\n      (self.onChange = onChange),\r\n      (self.onRangeInput = BxDualNumberStepper.onRangeInput.bind(self)),\r\n      (self.controlMin = options.min),\r\n      (self.controlMax = options.max),\r\n      (self.controlMinDiff = options.minDiff),\r\n      (self.options = options),\r\n      (self.steps = Math.max(options.steps || 1, 1)),\r\n      options.disabled)\r\n    )\r\n      return (self.disabled = !0), self;\r\n    return (\r\n      ($rangeFrom = CE(\"input\", {\r\n        type: \"range\",\r\n        min: self.controlMin,\r\n        max: self.controlMax,\r\n        step: self.steps,\r\n        tabindex: 0,\r\n      })),\r\n      ($rangeTo = $rangeFrom.cloneNode()),\r\n      (self.$rangeFrom = $rangeFrom),\r\n      (self.$rangeTo = $rangeTo),\r\n      (self.$activeRange = $rangeFrom),\r\n      (self.getValue = BxDualNumberStepper.getValues.bind(self)),\r\n      (self.setValue = BxDualNumberStepper.setValues.bind(self)),\r\n      $rangeFrom.addEventListener(\"input\", self.onRangeInput),\r\n      $rangeTo.addEventListener(\"input\", self.onRangeInput),\r\n      self.addEventListener(\"input\", self.onRangeInput),\r\n      self.append(CE(\"div\", !1, $rangeFrom, $rangeTo)),\r\n      BxDualNumberStepper.setValues.call(self, values),\r\n      self.addEventListener(\"contextmenu\", BxDualNumberStepper.onContextMenu),\r\n      setNearby(self, { focus: $rangeFrom, orientation: \"vertical\" }),\r\n      Object.defineProperty(self, \"value\", {\r\n        get() {\r\n          return self.controlValues;\r\n        },\r\n        set(value) {\r\n          let from, to;\r\n          if (typeof value === \"string\") {\r\n            let tmp = value.split(\",\");\r\n            (from = parseInt(tmp[0])), (to = parseInt(tmp[1]));\r\n          } else if (Array.isArray(value)) [from, to] = value;\r\n          if (typeof from !== \"undefined\" && typeof to !== \"undefined\")\r\n            BxDualNumberStepper.setValues.call(self, [from, to]);\r\n        },\r\n      }),\r\n      self\r\n    );\r\n  }\r\n  static setValues(values) {\r\n    let from, to;\r\n    if (values)\r\n      [from, to] = BxDualNumberStepper.normalizeValues.call(this, values);\r\n    else\r\n      (from = this.controlMin), (to = this.controlMax), (values = [from, to]);\r\n    (this.controlValues = [from, to]),\r\n      (this.$text.textContent = BxDualNumberStepper.updateTextValue.call(this)),\r\n      (this.$rangeFrom.value = from.toString()),\r\n      (this.$rangeTo.value = to.toString());\r\n    let ratio = 100 / (this.controlMax - this.controlMin);\r\n    this.style.setProperty(\"--from\", ratio * (from - this.controlMin) + \"%\"),\r\n      this.style.setProperty(\"--to\", ratio * (to - this.controlMin) + \"%\");\r\n  }\r\n  static getValues() {\r\n    return this.controlValues || [this.controlMin, this.controlMax];\r\n  }\r\n  static normalizeValues(values) {\r\n    let [from, to] = values;\r\n    if (this.$activeRange === this.$rangeFrom)\r\n      (to = Math.min(this.controlMax, to)),\r\n        (from = Math.min(from, to)),\r\n        (from = Math.min(to - this.controlMinDiff, from));\r\n    else\r\n      (from = Math.max(this.controlMin, from)),\r\n        (to = Math.max(from, to)),\r\n        (to = Math.max(this.controlMinDiff + from, to));\r\n    return (\r\n      (to = Math.min(this.controlMax, to)),\r\n      (from = Math.min(from, to)),\r\n      [from, to]\r\n    );\r\n  }\r\n  static onRangeInput(e) {\r\n    this.$activeRange = e.target;\r\n    let values = BxDualNumberStepper.normalizeValues.call(this, [\r\n      parseInt(this.$rangeFrom.value),\r\n      parseInt(this.$rangeTo.value),\r\n    ]);\r\n    if (\r\n      (BxDualNumberStepper.setValues.call(this, values),\r\n      !e.ignoreOnChange && this.onChange)\r\n    )\r\n      this.onChange(e, values);\r\n  }\r\n  static onContextMenu(e) {\r\n    e.preventDefault();\r\n  }\r\n  static updateTextValue() {\r\n    let values = this.controlValues,\r\n      textContent = null;\r\n    if (this.options.customTextValue)\r\n      textContent = this.options.customTextValue(\r\n        values,\r\n        this.controlMin,\r\n        this.controlMax\r\n      );\r\n    if (textContent === null) {\r\n      let [from, to] = values;\r\n      if (from === this.controlMin && to === this.controlMax)\r\n        textContent = t(\"default\");\r\n      else {\r\n        let pad = to.toString().length;\r\n        textContent = `${from.toString().padStart(pad)} - ${to\r\n          .toString()\r\n          .padEnd(pad)}${this.options.suffix}`;\r\n      }\r\n    }\r\n    return textContent;\r\n  }\r\n}\r\nclass ControllerCustomizationsManagerDialog extends BaseProfileManagerDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    ControllerCustomizationsManagerDialog.instance ??\r\n    (ControllerCustomizationsManagerDialog.instance =\r\n      new ControllerCustomizationsManagerDialog(t(\"controller-customization\")));\r\n  $vibrationIntensity;\r\n  $leftTriggerRange;\r\n  $rightTriggerRange;\r\n  $leftStickDeadzone;\r\n  $rightStickDeadzone;\r\n  $btnDetect;\r\n  selectsMap = {};\r\n  selectsOrder = [];\r\n  isDetectingButton = !1;\r\n  detectIntervalId = null;\r\n  static BUTTONS_ORDER = [\r\n    0, 1, 2, 3, 12, 15, 13, 14, 4, 5, 6, 7, 10, 11, 104, 204, 8, 9, 17,\r\n  ];\r\n  constructor(title) {\r\n    super(title, ControllerCustomizationsTable.getInstance());\r\n    this.render();\r\n  }\r\n  render() {\r\n    let isControllerFriendly = getGlobalPref(\"ui.controllerFriendly\"),\r\n      $rows = CE(\"div\", { class: \"bx-buttons-grid\" }),\r\n      $baseSelect = CE(\r\n        \"select\",\r\n        { class: \"bx-full-width\" },\r\n        CE(\"option\", { value: \"\" }, \"---\"),\r\n        CE(\r\n          \"option\",\r\n          { value: \"false\", _dataset: { label: \"🚫\" } },\r\n          isControllerFriendly ? \"🚫\" : t(\"off\")\r\n        )\r\n      ),\r\n      $baseButtonSelect = $baseSelect.cloneNode(!0),\r\n      $baseStickSelect = $baseSelect.cloneNode(!0),\r\n      onButtonChanged = (e) => {\r\n        if (!e.ignoreOnChange) this.updatePreset();\r\n      },\r\n      boundUpdatePreset = this.updatePreset.bind(this);\r\n    for (let gamepadKey of ControllerCustomizationsManagerDialog.BUTTONS_ORDER) {\r\n      if (gamepadKey === 17) continue;\r\n      let name = GamepadKeyName[gamepadKey][isControllerFriendly ? 1 : 0];\r\n      (gamepadKey === 104 || gamepadKey === 204\r\n        ? $baseStickSelect\r\n        : $baseButtonSelect\r\n      ).appendChild(\r\n        CE(\r\n          \"option\",\r\n          {\r\n            value: gamepadKey,\r\n            _dataset: { label: GamepadKeyName[gamepadKey][1] },\r\n          },\r\n          name\r\n        )\r\n      );\r\n    }\r\n    for (let gamepadKey of ControllerCustomizationsManagerDialog.BUTTONS_ORDER) {\r\n      let [buttonName, buttonPrompt] = GamepadKeyName[gamepadKey],\r\n        $clonedSelect = (\r\n          gamepadKey === 104 || gamepadKey === 204\r\n            ? $baseStickSelect\r\n            : $baseButtonSelect\r\n        ).cloneNode(!0);\r\n      $clonedSelect.querySelector(`option[value=\"${gamepadKey}\"]`)?.remove();\r\n      let $select = BxSelectElement.create($clonedSelect);\r\n      ($select.dataset.index = gamepadKey.toString()),\r\n        $select.addEventListener(\"input\", onButtonChanged),\r\n        (this.selectsMap[gamepadKey] = $select),\r\n        this.selectsOrder.push(gamepadKey);\r\n      let $row = CE(\r\n        \"div\",\r\n        {\r\n          class: \"bx-controller-key-row\",\r\n          _nearby: { orientation: \"horizontal\" },\r\n        },\r\n        CE(\"label\", { title: buttonName }, buttonPrompt),\r\n        $select\r\n      );\r\n      $rows.append($row);\r\n    }\r\n    if (getGlobalPref(\"ui.controllerFriendly\"))\r\n      for (let i = 0; i < this.selectsOrder.length; i++) {\r\n        let $select = this.selectsMap[this.selectsOrder[i]],\r\n          directions = { 1: i - 2, 3: i + 2, 4: i - 1, 2: i + 1 };\r\n        for (let dir in directions) {\r\n          let idx = directions[dir];\r\n          if (typeof this.selectsOrder[idx] === \"undefined\") continue;\r\n          let $targetSelect = this.selectsMap[this.selectsOrder[idx]];\r\n          setNearby($select, { [dir]: $targetSelect });\r\n        }\r\n      }\r\n    let blankSettings = this.presetsDb.BLANK_PRESET_DATA.settings,\r\n      params = { min: 0, minDiff: 1, max: 100, steps: 1 };\r\n    this.$content = CE(\r\n      \"div\",\r\n      { class: \"bx-controller-customizations-container\" },\r\n      (this.$btnDetect = createButton({\r\n        label: t(\"detect-controller-button\"),\r\n        classes: [\"bx-btn-detect\"],\r\n        style: 4096 | 64 | 128,\r\n        onClick: () => {\r\n          this.startDetectingButton();\r\n        },\r\n      })),\r\n      $rows,\r\n      createSettingRow(\r\n        t(\"vibration-intensity\"),\r\n        (this.$vibrationIntensity = BxNumberStepper.create(\r\n          \"controller_vibration_intensity\",\r\n          50,\r\n          0,\r\n          100,\r\n          {\r\n            steps: 10,\r\n            suffix: \"%\",\r\n            exactTicks: 20,\r\n            customTextValue: (value) => {\r\n              return (\r\n                (value = parseInt(value)), value === 0 ? t(\"off\") : value + \"%\"\r\n              );\r\n            },\r\n          },\r\n          boundUpdatePreset\r\n        ))\r\n      ),\r\n      createSettingRow(\r\n        t(\"left-trigger-range\"),\r\n        (this.$leftTriggerRange = BxDualNumberStepper.create(\r\n          \"left-trigger-range\",\r\n          blankSettings.leftTriggerRange,\r\n          params,\r\n          boundUpdatePreset\r\n        ))\r\n      ),\r\n      createSettingRow(\r\n        t(\"right-trigger-range\"),\r\n        (this.$rightTriggerRange = BxDualNumberStepper.create(\r\n          \"right-trigger-range\",\r\n          blankSettings.rightTriggerRange,\r\n          params,\r\n          boundUpdatePreset\r\n        ))\r\n      ),\r\n      createSettingRow(\r\n        t(\"left-stick-deadzone\"),\r\n        (this.$leftStickDeadzone = BxDualNumberStepper.create(\r\n          \"left-stick-deadzone\",\r\n          blankSettings.leftStickDeadzone,\r\n          params,\r\n          boundUpdatePreset\r\n        ))\r\n      ),\r\n      createSettingRow(\r\n        t(\"right-stick-deadzone\"),\r\n        (this.$rightStickDeadzone = BxDualNumberStepper.create(\r\n          \"right-stick-deadzone\",\r\n          blankSettings.rightStickDeadzone,\r\n          params,\r\n          boundUpdatePreset\r\n        ))\r\n      )\r\n    );\r\n  }\r\n  startDetectingButton() {\r\n    this.isDetectingButton = !0;\r\n    let { $btnDetect } = this;\r\n    $btnDetect.classList.add(\"bx-monospaced\", \"bx-blink-me\"),\r\n      ($btnDetect.disabled = !0);\r\n    let count = 4;\r\n    ($btnDetect.textContent = `[${count}] ${t(\"press-any-button\")}`),\r\n      (this.detectIntervalId = window.setInterval(() => {\r\n        if (((count -= 1), count === 0)) {\r\n          this.stopDetectingButton(), $btnDetect.focus();\r\n          return;\r\n        }\r\n        $btnDetect.textContent = `[${count}] ${t(\"press-any-button\")}`;\r\n      }, 1000));\r\n  }\r\n  stopDetectingButton() {\r\n    let { $btnDetect } = this;\r\n    $btnDetect.classList.remove(\"bx-monospaced\", \"bx-blink-me\"),\r\n      ($btnDetect.textContent = t(\"detect-controller-button\")),\r\n      ($btnDetect.disabled = !1),\r\n      (this.isDetectingButton = !1),\r\n      this.detectIntervalId && window.clearInterval(this.detectIntervalId),\r\n      (this.detectIntervalId = null);\r\n  }\r\n  async onBeforeMount() {\r\n    this.stopDetectingButton(), super.onBeforeMount(...arguments);\r\n  }\r\n  onBeforeUnmount() {\r\n    this.stopDetectingButton(),\r\n      StreamSettings.refreshControllerSettings(),\r\n      super.onBeforeUnmount();\r\n  }\r\n  handleGamepad(button) {\r\n    if (!this.isDetectingButton) return super.handleGamepad(button);\r\n    if (button in ControllerCustomizationsManagerDialog.BUTTONS_ORDER) {\r\n      this.stopDetectingButton();\r\n      let $select = this.selectsMap[button],\r\n        $label = $select.previousElementSibling;\r\n      if (\r\n        ($label.addEventListener(\r\n          \"animationend\",\r\n          () => {\r\n            $label.classList.remove(\"bx-horizontal-shaking\");\r\n          },\r\n          { once: !0 }\r\n        ),\r\n        $label.classList.add(\"bx-horizontal-shaking\"),\r\n        getGlobalPref(\"ui.controllerFriendly\"))\r\n      )\r\n        this.dialogManager.focus($select);\r\n    }\r\n    return !0;\r\n  }\r\n  switchPreset(id) {\r\n    let preset = this.allPresets.data[id];\r\n    if (!preset) {\r\n      this.currentPresetId = 0;\r\n      return;\r\n    }\r\n    let {\r\n        $btnDetect,\r\n        $vibrationIntensity,\r\n        $leftStickDeadzone,\r\n        $rightStickDeadzone,\r\n        $leftTriggerRange,\r\n        $rightTriggerRange,\r\n        selectsMap,\r\n      } = this,\r\n      presetData = preset.data;\r\n    this.currentPresetId = id;\r\n    let isDefaultPreset = id <= 0;\r\n    this.updateButtonStates(),\r\n      $btnDetect.classList.toggle(\"bx-gone\", isDefaultPreset);\r\n    let buttonIndex;\r\n    for (buttonIndex in selectsMap) {\r\n      buttonIndex = buttonIndex;\r\n      let $select = selectsMap[buttonIndex];\r\n      if (!$select) continue;\r\n      let mappedButton = presetData.mapping[buttonIndex];\r\n      ($select.value =\r\n        typeof mappedButton === \"undefined\" ? \"\" : mappedButton.toString()),\r\n        ($select.disabled = isDefaultPreset),\r\n        BxEvent.dispatch($select, \"input\", {\r\n          ignoreOnChange: !0,\r\n          manualTrigger: !0,\r\n        });\r\n    }\r\n    (presetData.settings = Object.assign(\r\n      {},\r\n      this.presetsDb.BLANK_PRESET_DATA.settings,\r\n      presetData.settings\r\n    )),\r\n      ($vibrationIntensity.value =\r\n        presetData.settings.vibrationIntensity.toString()),\r\n      ($vibrationIntensity.dataset.disabled = isDefaultPreset.toString()),\r\n      ($leftStickDeadzone.dataset.disabled =\r\n        $rightStickDeadzone.dataset.disabled =\r\n        $leftTriggerRange.dataset.disabled =\r\n        $rightTriggerRange.dataset.disabled =\r\n          isDefaultPreset.toString()),\r\n      $leftStickDeadzone.setValue(presetData.settings.leftStickDeadzone),\r\n      $rightStickDeadzone.setValue(presetData.settings.rightStickDeadzone),\r\n      $leftTriggerRange.setValue(presetData.settings.leftTriggerRange),\r\n      $rightTriggerRange.setValue(presetData.settings.rightTriggerRange);\r\n  }\r\n  updatePreset() {\r\n    let newData = deepClone(this.presetsDb.BLANK_PRESET_DATA),\r\n      gamepadKey;\r\n    for (gamepadKey in this.selectsMap) {\r\n      let value = this.selectsMap[gamepadKey].value;\r\n      if (!value) continue;\r\n      let mapTo = value === \"false\" ? !1 : parseInt(value);\r\n      newData.mapping[gamepadKey] = mapTo;\r\n    }\r\n    Object.assign(newData.settings, {\r\n      vibrationIntensity: parseInt(this.$vibrationIntensity.value),\r\n      leftStickDeadzone: this.$leftStickDeadzone.getValue(),\r\n      rightStickDeadzone: this.$rightStickDeadzone.getValue(),\r\n      leftTriggerRange: this.$leftTriggerRange.getValue(),\r\n      rightTriggerRange: this.$rightTriggerRange.getValue(),\r\n    });\r\n    let preset = this.allPresets.data[this.currentPresetId];\r\n    (preset.data = newData), this.presetsDb.updatePreset(preset);\r\n  }\r\n  async renderSummary(presetId) {\r\n    let preset = await this.presetsDb.getPreset(presetId);\r\n    if (!preset) return null;\r\n    let presetData = preset.data,\r\n      $content,\r\n      showNote = !1;\r\n    if (Object.keys(presetData.mapping).length > 0) {\r\n      $content = CE(\"div\", { class: \"bx-controller-customization-summary\" });\r\n      for (let gamepadKey of ControllerCustomizationsManagerDialog.BUTTONS_ORDER) {\r\n        if (!(gamepadKey in presetData.mapping)) continue;\r\n        let mappedKey = presetData.mapping[gamepadKey];\r\n        $content.append(\r\n          CE(\r\n            \"span\",\r\n            { class: \"bx-prompt\" },\r\n            getGamepadPrompt(gamepadKey) +\r\n              \" > \" +\r\n              (mappedKey === !1 ? \"🚫\" : getGamepadPrompt(mappedKey))\r\n          )\r\n        );\r\n      }\r\n      showNote = !0;\r\n    }\r\n    let key;\r\n    for (key in presetData.settings) {\r\n      if (key === \"vibrationIntensity\") continue;\r\n      let value = presetData.settings[key];\r\n      if (Array.isArray(value) && (value[0] !== 0 || value[1] !== 100)) {\r\n        showNote = !0;\r\n        break;\r\n      }\r\n    }\r\n    let fragment = document.createDocumentFragment();\r\n    if (showNote) {\r\n      let $note = CE(\r\n        \"div\",\r\n        { class: \"bx-settings-dialog-note\" },\r\n        \"ⓘ \" + t(\"controller-customization-input-latency-note\")\r\n      );\r\n      fragment.appendChild($note);\r\n    }\r\n    if ($content) fragment.appendChild($content);\r\n    return fragment.childElementCount ? fragment : null;\r\n  }\r\n}\r\nclass ControllerExtraSettings extends HTMLElement {\r\n  currentControllerId;\r\n  controllerIds;\r\n  $selectControllers;\r\n  $selectShortcuts;\r\n  $selectCustomization;\r\n  $summaryCustomization;\r\n  updateLayout;\r\n  switchController;\r\n  getCurrentControllerId;\r\n  saveSettings;\r\n  updateCustomizationSummary;\r\n  setValue;\r\n  static renderSettings() {\r\n    let $container = CE(\"label\", {\r\n      class: \"bx-settings-row bx-controller-extra-settings\",\r\n    });\r\n    ($container.prefKey = \"controller.settings\"),\r\n      $container.addEventListener(\"contextmenu\", this.boundOnContextMenu),\r\n      this.settingsManager.setElement(\"controller.settings\", $container),\r\n      ($container.updateLayout =\r\n        ControllerExtraSettings.updateLayout.bind($container)),\r\n      ($container.switchController =\r\n        ControllerExtraSettings.switchController.bind($container)),\r\n      ($container.getCurrentControllerId =\r\n        ControllerExtraSettings.getCurrentControllerId.bind($container)),\r\n      ($container.saveSettings =\r\n        ControllerExtraSettings.saveSettings.bind($container)),\r\n      ($container.setValue = ControllerExtraSettings.setValue.bind($container));\r\n    let $selectControllers = BxSelectElement.create(\r\n        CE(\"select\", {\r\n          class: \"bx-full-width\",\r\n          autocomplete: \"off\",\r\n          _on: {\r\n            input: (e) => {\r\n              $container.switchController($selectControllers.value);\r\n            },\r\n          },\r\n        })\r\n      ),\r\n      $selectShortcuts = BxSelectElement.create(\r\n        CE(\"select\", {\r\n          autocomplete: \"off\",\r\n          _on: { input: $container.saveSettings },\r\n        })\r\n      ),\r\n      $selectCustomization = BxSelectElement.create(\r\n        CE(\"select\", {\r\n          autocomplete: \"off\",\r\n          _on: {\r\n            input: async () => {\r\n              ControllerExtraSettings.updateCustomizationSummary.call(\r\n                $container\r\n              ),\r\n                $container.saveSettings();\r\n            },\r\n          },\r\n        })\r\n      ),\r\n      $rowCustomization = createSettingRow(\r\n        t(\"in-game-controller-customization\"),\r\n        CE(\r\n          \"div\",\r\n          { class: \"bx-preset-row\", _nearby: { orientation: \"horizontal\" } },\r\n          $selectCustomization,\r\n          createButton({\r\n            title: t(\"manage\"),\r\n            icon: BxIcon.MANAGE,\r\n            style: 64 | 1 | 512,\r\n            onClick: () =>\r\n              ControllerCustomizationsManagerDialog.getInstance().show({\r\n                id: $container.$selectCustomization.value\r\n                  ? parseInt($container.$selectCustomization.value)\r\n                  : null,\r\n              }),\r\n          })\r\n        ),\r\n        { multiLines: !0 }\r\n      );\r\n    return (\r\n      $rowCustomization.appendChild(\r\n        ($container.$summaryCustomization = CE(\"div\"))\r\n      ),\r\n      $container.append(\r\n        CE(\"span\", !1, t(\"no-controllers-connected\")),\r\n        CE(\r\n          \"div\",\r\n          { class: \"bx-controller-extra-wrapper\" },\r\n          $selectControllers,\r\n          CE(\r\n            \"div\",\r\n            { class: \"bx-sub-content-box\" },\r\n            createSettingRow(\r\n              t(\"in-game-controller-shortcuts\"),\r\n              CE(\r\n                \"div\",\r\n                {\r\n                  class: \"bx-preset-row\",\r\n                  _nearby: { orientation: \"horizontal\" },\r\n                },\r\n                $selectShortcuts,\r\n                createButton({\r\n                  title: t(\"manage\"),\r\n                  icon: BxIcon.MANAGE,\r\n                  style: 64 | 1 | 512,\r\n                  onClick: () =>\r\n                    ControllerShortcutsManagerDialog.getInstance().show({\r\n                      id: parseInt($container.$selectShortcuts.value),\r\n                    }),\r\n                })\r\n              ),\r\n              { multiLines: !0 }\r\n            ),\r\n            $rowCustomization\r\n          )\r\n        )\r\n      ),\r\n      ($container.$selectControllers = $selectControllers),\r\n      ($container.$selectShortcuts = $selectShortcuts),\r\n      ($container.$selectCustomization = $selectCustomization),\r\n      $container.updateLayout(),\r\n      window.addEventListener(\"gamepadconnected\", $container.updateLayout),\r\n      window.addEventListener(\"gamepaddisconnected\", $container.updateLayout),\r\n      this.onMountedCallbacks.push(() => {\r\n        $container.updateLayout();\r\n      }),\r\n      $container\r\n    );\r\n  }\r\n  static async updateCustomizationSummary() {\r\n    let presetId = parseInt(this.$selectCustomization.value),\r\n      $summaryContent =\r\n        await ControllerCustomizationsManagerDialog.getInstance().renderSummary(\r\n          presetId\r\n        );\r\n    if ((removeChildElements(this.$summaryCustomization), $summaryContent))\r\n      this.$summaryCustomization.appendChild($summaryContent);\r\n  }\r\n  static async updateLayout() {\r\n    if (\r\n      ((this.controllerIds = getUniqueGamepadNames()),\r\n      (this.dataset.hasGamepad = (this.controllerIds.length > 0).toString()),\r\n      this.controllerIds.length === 0)\r\n    )\r\n      return;\r\n    let $fragment = document.createDocumentFragment();\r\n    removeChildElements(this.$selectControllers);\r\n    for (let name of this.controllerIds) {\r\n      let $option = CE(\"option\", { value: name }, simplifyGamepadName(name));\r\n      $fragment.appendChild($option);\r\n    }\r\n    this.$selectControllers.appendChild($fragment);\r\n    let allShortcutPresets =\r\n      await ControllerShortcutsTable.getInstance().getPresets();\r\n    renderPresetsList(this.$selectShortcuts, allShortcutPresets, null, {\r\n      addOffValue: !0,\r\n    });\r\n    let allCustomizationPresets =\r\n      await ControllerCustomizationsTable.getInstance().getPresets();\r\n    renderPresetsList(\r\n      this.$selectCustomization,\r\n      allCustomizationPresets,\r\n      null,\r\n      { addOffValue: !0 }\r\n    );\r\n    for (let name of this.controllerIds) {\r\n      let $option = CE(\"option\", { value: name }, name);\r\n      $fragment.appendChild($option);\r\n    }\r\n    BxEvent.dispatch(this.$selectControllers, \"input\"),\r\n      calculateSelectBoxes(this);\r\n  }\r\n  static async switchController(id) {\r\n    if (((this.currentControllerId = id), !this.getCurrentControllerId()))\r\n      return;\r\n    let controllerSetting = STORAGE.Stream.getControllerSetting(\r\n      this.currentControllerId\r\n    );\r\n    ControllerExtraSettings.updateElements.call(this, controllerSetting);\r\n  }\r\n  static getCurrentControllerId() {\r\n    if (this.currentControllerId) {\r\n      if (this.controllerIds.includes(this.currentControllerId))\r\n        return this.currentControllerId;\r\n      this.currentControllerId = \"\";\r\n    }\r\n    if (!this.currentControllerId)\r\n      this.currentControllerId = this.controllerIds[0];\r\n    if (this.currentControllerId) return this.currentControllerId;\r\n    return null;\r\n  }\r\n  static async saveSettings() {\r\n    if (!this.getCurrentControllerId()) return;\r\n    let controllerSettings = getStreamPref(\"controller.settings\");\r\n    (controllerSettings[this.currentControllerId] = {\r\n      shortcutPresetId: parseInt(this.$selectShortcuts.value),\r\n      customizationPresetId: parseInt(this.$selectCustomization.value),\r\n    }),\r\n      setStreamPref(\"controller.settings\", controllerSettings, \"ui\"),\r\n      StreamSettings.refreshControllerSettings();\r\n  }\r\n  static setValue(value) {\r\n    ControllerExtraSettings.updateElements.call(\r\n      this,\r\n      value[this.currentControllerId]\r\n    );\r\n  }\r\n  static updateElements(controllerSetting) {\r\n    if (!controllerSetting) return;\r\n    (this.$selectShortcuts.value =\r\n      controllerSetting.shortcutPresetId.toString()),\r\n      (this.$selectCustomization.value =\r\n        controllerSetting.customizationPresetId.toString()),\r\n      ControllerExtraSettings.updateCustomizationSummary.call(this);\r\n  }\r\n}\r\nclass SuggestionsSetting {\r\n  static async renderSuggestions(e) {\r\n    let $btnSuggest = e.target.closest(\"div\");\r\n    $btnSuggest.toggleAttribute(\"bx-open\");\r\n    let $content = $btnSuggest.nextElementSibling;\r\n    if ($content) {\r\n      BxEvent.dispatch($content.querySelector(\"select\"), \"input\");\r\n      return;\r\n    }\r\n    let settingTabGroup;\r\n    for (settingTabGroup in this.SETTINGS_UI) {\r\n      let settingTab = this.SETTINGS_UI[settingTabGroup];\r\n      if (\r\n        !settingTab ||\r\n        !settingTab.items ||\r\n        typeof settingTab.items === \"function\"\r\n      )\r\n        continue;\r\n      for (let settingTabContent of settingTab.items) {\r\n        if (\r\n          !settingTabContent ||\r\n          settingTabContent instanceof HTMLElement ||\r\n          !settingTabContent.items\r\n        )\r\n          continue;\r\n        for (let setting of settingTabContent.items) {\r\n          let prefKey;\r\n          if (typeof setting === \"string\") prefKey = setting;\r\n          else if (typeof setting === \"object\") prefKey = setting.pref;\r\n          if (prefKey) this.settingLabels[prefKey] = settingTabContent.label;\r\n        }\r\n      }\r\n    }\r\n    let recommendedDevice = \"\";\r\n    if (BX_FLAGS.DeviceInfo.deviceType.includes(\"android\")) {\r\n      if (BX_FLAGS.DeviceInfo.androidInfo)\r\n        recommendedDevice =\r\n          await SuggestionsSetting.getRecommendedSettings.call(\r\n            this,\r\n            BX_FLAGS.DeviceInfo.androidInfo\r\n          );\r\n    }\r\n    let hasRecommendedSettings =\r\n        Object.keys(this.suggestedSettings.recommended).length > 0,\r\n      deviceType = BX_FLAGS.DeviceInfo.deviceType;\r\n    if (deviceType === \"android-handheld\")\r\n      SuggestionsSetting.addDefaultSuggestedSetting.call(\r\n        this,\r\n        \"touchController.mode\",\r\n        \"off\"\r\n      ),\r\n        SuggestionsSetting.addDefaultSuggestedSetting.call(\r\n          this,\r\n          \"deviceVibration.mode\",\r\n          \"on\"\r\n        );\r\n    else if (deviceType === \"android\")\r\n      SuggestionsSetting.addDefaultSuggestedSetting.call(\r\n        this,\r\n        \"deviceVibration.mode\",\r\n        \"auto\"\r\n      );\r\n    else if (deviceType === \"android-tv\")\r\n      SuggestionsSetting.addDefaultSuggestedSetting.call(\r\n        this,\r\n        \"touchController.mode\",\r\n        \"off\"\r\n      );\r\n    SuggestionsSetting.generateDefaultSuggestedSettings.call(this);\r\n    let $suggestedSettings = CE(\"div\", { class: \"bx-suggest-wrapper\" }),\r\n      $select = CE(\r\n        \"select\",\r\n        !1,\r\n        hasRecommendedSettings &&\r\n          CE(\"option\", { value: \"recommended\" }, t(\"recommended\")),\r\n        !hasRecommendedSettings &&\r\n          CE(\"option\", { value: \"highest\" }, t(\"highest-quality\")),\r\n        CE(\"option\", { value: \"default\" }, t(\"default\")),\r\n        CE(\"option\", { value: \"lowest\" }, t(\"lowest-quality\"))\r\n      );\r\n    $select.addEventListener(\"input\", (e2) => {\r\n      let profile = $select.value;\r\n      removeChildElements($suggestedSettings);\r\n      let fragment = document.createDocumentFragment(),\r\n        note;\r\n      if (profile === \"recommended\")\r\n        note = t(\"recommended-settings-for-device\", {\r\n          device: recommendedDevice,\r\n        });\r\n      else if (profile === \"highest\") note = \"⚠️ \" + t(\"highest-quality-note\");\r\n      note &&\r\n        fragment.appendChild(CE(\"div\", { class: \"bx-suggest-note\" }, note));\r\n      let settings = this.suggestedSettings[profile];\r\n      for (let key in settings) {\r\n        let { storage, definition } = getPrefInfo(key),\r\n          prefKey;\r\n        if (storage === STORAGE.Stream) prefKey = key;\r\n        else prefKey = key;\r\n        let suggestedValue;\r\n        if (definition && definition.transformValue)\r\n          suggestedValue = definition.transformValue.get.call(\r\n            definition,\r\n            settings[prefKey]\r\n          );\r\n        else suggestedValue = settings[prefKey];\r\n        let currentValue = storage.getSetting(prefKey, !1),\r\n          currentValueText = storage.getValueText(prefKey, currentValue),\r\n          isSameValue = currentValue === suggestedValue,\r\n          $child,\r\n          $value;\r\n        if (isSameValue) $value = currentValueText;\r\n        else {\r\n          let suggestedValueText = storage.getValueText(\r\n            prefKey,\r\n            suggestedValue\r\n          );\r\n          $value = currentValueText + \" ➔ \" + suggestedValueText;\r\n        }\r\n        let $checkbox,\r\n          breadcrumb =\r\n            this.settingLabels[prefKey] + \" ❯ \" + storage.getLabel(prefKey),\r\n          id = escapeCssSelector(`bx_suggest_${prefKey}`);\r\n        if (\r\n          (($child = CE(\r\n            \"div\",\r\n            {\r\n              class: `bx-suggest-row ${\r\n                isSameValue ? \"bx-suggest-ok\" : \"bx-suggest-change\"\r\n              }`,\r\n            },\r\n            ($checkbox = CE(\"input\", {\r\n              type: \"checkbox\",\r\n              tabindex: 0,\r\n              checked: !0,\r\n              id,\r\n            })),\r\n            CE(\r\n              \"label\",\r\n              { for: id },\r\n              CE(\"div\", { class: \"bx-suggest-label\" }, breadcrumb),\r\n              CE(\"div\", { class: \"bx-suggest-value\" }, $value)\r\n            )\r\n          )),\r\n          isSameValue)\r\n        )\r\n          ($checkbox.disabled = !0), ($checkbox.checked = !0);\r\n        fragment.appendChild($child);\r\n      }\r\n      $suggestedSettings.appendChild(fragment);\r\n    }),\r\n      BxEvent.dispatch($select, \"input\");\r\n    let onClickApply = () => {\r\n        let profile = $select.value,\r\n          settings = this.suggestedSettings[profile],\r\n          prefKey,\r\n          settingsManager = SettingsManager.getInstance();\r\n        for (prefKey in settings) {\r\n          let suggestedValue = settings[prefKey],\r\n            $checkBox = $content.querySelector(\r\n              `#bx_suggest_${escapeCssSelector(prefKey)}`\r\n            );\r\n          if (!$checkBox.checked || $checkBox.disabled) continue;\r\n          let $control = settingsManager.getElement(prefKey);\r\n          if (!$control) {\r\n            setPref(prefKey, suggestedValue, \"direct\");\r\n            continue;\r\n          }\r\n          let { definition: settingDefinition } = getPrefInfo(prefKey);\r\n          if (settingDefinition?.transformValue)\r\n            suggestedValue = settingDefinition.transformValue.get.call(\r\n              settingDefinition,\r\n              suggestedValue\r\n            );\r\n          if (\"setValue\" in $control) $control.setValue(suggestedValue);\r\n          else $control.value = suggestedValue;\r\n          BxEvent.dispatch($control, \"input\", { manualTrigger: !0 });\r\n        }\r\n        BxEvent.dispatch($select, \"input\");\r\n      },\r\n      $btnApply = createButton({\r\n        label: t(\"apply\"),\r\n        style: 128 | 64,\r\n        onClick: onClickApply,\r\n      });\r\n    ($content = CE(\r\n      \"div\",\r\n      {\r\n        class: \"bx-sub-content-box bx-suggest-box\",\r\n        _nearby: { orientation: \"vertical\" },\r\n      },\r\n      BxSelectElement.create($select),\r\n      $suggestedSettings,\r\n      $btnApply,\r\n      BX_FLAGS.DeviceInfo.deviceType.includes(\"android\") &&\r\n        CE(\r\n          \"a\",\r\n          {\r\n            class: \"bx-suggest-link bx-focusable\",\r\n            href: \"https://better-xcloud.github.io/guide/android-webview-tweaks/\",\r\n            target: \"_blank\",\r\n            tabindex: 0,\r\n          },\r\n          \"🤓 \" + t(\"how-to-improve-app-performance\")\r\n        ),\r\n      BX_FLAGS.DeviceInfo.deviceType.includes(\"android\") &&\r\n        !hasRecommendedSettings &&\r\n        CE(\r\n          \"a\",\r\n          {\r\n            class: \"bx-suggest-link bx-focusable\",\r\n            href: \"https://github.com/redphx/better-xcloud-devices\",\r\n            target: \"_blank\",\r\n            tabindex: 0,\r\n          },\r\n          t(\"suggest-settings-link\")\r\n        )\r\n    )),\r\n      $btnSuggest.insertAdjacentElement(\"afterend\", $content);\r\n  }\r\n  static async getRecommendedSettings(androidInfo) {\r\n    function normalize(str) {\r\n      return str\r\n        .toLowerCase()\r\n        .trim()\r\n        .replaceAll(/\\s+/g, \"-\")\r\n        .replaceAll(/-+/g, \"-\");\r\n    }\r\n    try {\r\n      let { brand, board, model } = androidInfo;\r\n      (brand = normalize(brand)),\r\n        (board = normalize(board)),\r\n        (model = normalize(model));\r\n      let url = GhPagesUtils.getUrl(`devices/${brand}/${board}-${model}.json`),\r\n        json = await (await NATIVE_FETCH(url)).json(),\r\n        recommended = {};\r\n      if (json.schema_version !== 2) return null;\r\n      let scriptSettings = json.settings.script;\r\n      if (scriptSettings._base) {\r\n        let base =\r\n          typeof scriptSettings._base === \"string\"\r\n            ? [scriptSettings._base]\r\n            : scriptSettings._base;\r\n        for (let profile of base)\r\n          Object.assign(recommended, this.suggestedSettings[profile]);\r\n        delete scriptSettings._base;\r\n      }\r\n      let key;\r\n      for (key in scriptSettings) recommended[key] = scriptSettings[key];\r\n      return (\r\n        (BX_FLAGS.DeviceInfo.deviceType = json.device_type),\r\n        (this.suggestedSettings.recommended = recommended),\r\n        json.device_name\r\n      );\r\n    } catch (e) {}\r\n    return null;\r\n  }\r\n  static addDefaultSuggestedSetting(prefKey, value) {\r\n    let key;\r\n    for (key in this.suggestedSettings)\r\n      if (key !== \"default\" && !(prefKey in this.suggestedSettings))\r\n        this.suggestedSettings[key][prefKey] = value;\r\n  }\r\n  static generateDefaultSuggestedSettings() {\r\n    let key;\r\n    for (key in this.suggestedSettings) {\r\n      if (key === \"default\") continue;\r\n      let prefKey;\r\n      for (prefKey in this.suggestedSettings[key])\r\n        if (!(prefKey in this.suggestedSettings.default))\r\n          this.suggestedSettings.default[prefKey] =\r\n            getPrefInfo(prefKey).definition.default;\r\n    }\r\n  }\r\n}\r\nclass BxKeyBindingButton extends HTMLButtonElement {\r\n  title;\r\n  isPrompt = !1;\r\n  allowedFlags;\r\n  keyInfo = null;\r\n  bindKey;\r\n  unbindKey;\r\n  static create(options) {\r\n    let $btn = CE(\"button\", {\r\n      class: \"bx-binding-button bx-focusable\",\r\n      type: \"button\",\r\n    });\r\n    return (\r\n      ($btn.title = options.title),\r\n      ($btn.isPrompt = !!options.isPrompt),\r\n      ($btn.allowedFlags = options.allowedFlags),\r\n      ($btn.bindKey = BxKeyBindingButton.bindKey.bind($btn)),\r\n      ($btn.unbindKey = BxKeyBindingButton.unbindKey.bind($btn)),\r\n      $btn.addEventListener(\"click\", BxKeyBindingButton.onClick.bind($btn)),\r\n      $btn.addEventListener(\"contextmenu\", BxKeyBindingButton.onContextMenu),\r\n      $btn.addEventListener(\"change\", options.onChanged),\r\n      $btn\r\n    );\r\n  }\r\n  static onClick(e) {\r\n    KeyBindingDialog.getInstance().show({ $elm: this });\r\n  }\r\n  static onContextMenu = (e) => {\r\n    e.preventDefault();\r\n    let $btn = e.target;\r\n    if (!$btn.disabled) $btn.unbindKey.apply($btn);\r\n  };\r\n  static bindKey(key, force = !1) {\r\n    if (!key) return;\r\n    if (\r\n      force ||\r\n      this.keyInfo === null ||\r\n      key.code !== this.keyInfo?.code ||\r\n      key.modifiers !== this.keyInfo?.modifiers\r\n    ) {\r\n      if (\r\n        ((this.textContent = KeyHelper.codeToKeyName(key)),\r\n        (this.keyInfo = key),\r\n        !force)\r\n      )\r\n        BxEvent.dispatch(this, \"change\");\r\n    }\r\n  }\r\n  static unbindKey(force = !1) {\r\n    (this.textContent = \"\"),\r\n      (this.keyInfo = null),\r\n      !force && BxEvent.dispatch(this, \"change\");\r\n  }\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\nclass KeyBindingDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    KeyBindingDialog.instance ??\r\n    (KeyBindingDialog.instance = new KeyBindingDialog());\r\n  $dialog;\r\n  $wait;\r\n  $title;\r\n  $inputList;\r\n  $overlay;\r\n  $currentElm;\r\n  countdownIntervalId;\r\n  constructor() {\r\n    (this.$overlay = CE(\"div\", {\r\n      class: \"bx-key-binding-dialog-overlay bx-gone\",\r\n    })),\r\n      this.$overlay.addEventListener(\"contextmenu\", (e) => e.preventDefault()),\r\n      document.documentElement.appendChild(this.$overlay),\r\n      (this.$dialog = CE(\r\n        \"div\",\r\n        { class: \"bx-key-binding-dialog bx-gone\" },\r\n        (this.$title = CE(\"h2\", {})),\r\n        CE(\r\n          \"div\",\r\n          { class: \"bx-key-binding-dialog-content\" },\r\n          CE(\r\n            \"div\",\r\n            !1,\r\n            (this.$wait = CE(\"p\", { class: \"bx-blink-me\" })),\r\n            (this.$inputList = CE(\r\n              \"ul\",\r\n              !1,\r\n              CE(\"li\", { _dataset: { flag: 1 } }, t(\"keyboard-key\")),\r\n              CE(\"li\", { _dataset: { flag: 2 } }, t(\"modifiers-note\")),\r\n              CE(\"li\", { _dataset: { flag: 4 } }, t(\"mouse-click\")),\r\n              CE(\"li\", { _dataset: { flag: 8 } }, t(\"mouse-wheel\"))\r\n            )),\r\n            CE(\"i\", !1, t(\"press-esc-to-cancel\"))\r\n          )\r\n        )\r\n      )),\r\n      this.$dialog.addEventListener(\"contextmenu\", (e) => e.preventDefault()),\r\n      document.documentElement.appendChild(this.$dialog);\r\n  }\r\n  show(options) {\r\n    (this.$currentElm = options.$elm), this.addEventListeners();\r\n    let allowedFlags = this.$currentElm.allowedFlags;\r\n    (this.$inputList.dataset.flags = \"[\" + allowedFlags.join(\"][\") + \"]\"),\r\n      document.activeElement && document.activeElement.blur(),\r\n      (this.$title.textContent = this.$currentElm.title),\r\n      this.$title.classList.toggle(\"bx-prompt\", this.$currentElm.isPrompt),\r\n      this.$dialog.classList.remove(\"bx-gone\"),\r\n      this.$overlay.classList.remove(\"bx-gone\"),\r\n      this.startCountdown();\r\n  }\r\n  startCountdown() {\r\n    this.stopCountdown();\r\n    let count = 9;\r\n    (this.$wait.textContent = `[${count}] ${t(\"waiting-for-input\")}`),\r\n      (this.countdownIntervalId = window.setInterval(() => {\r\n        if (((count -= 1), count === 0)) {\r\n          this.stopCountdown(), this.hide();\r\n          return;\r\n        }\r\n        this.$wait.textContent = `[${count}] ${t(\"waiting-for-input\")}`;\r\n      }, 1000));\r\n  }\r\n  stopCountdown() {\r\n    this.countdownIntervalId && clearInterval(this.countdownIntervalId),\r\n      (this.countdownIntervalId = null);\r\n  }\r\n  hide = () => {\r\n    this.clearEventListeners(),\r\n      this.$dialog.classList.add(\"bx-gone\"),\r\n      this.$overlay.classList.add(\"bx-gone\");\r\n  };\r\n  addEventListeners() {\r\n    let allowedFlags = this.$currentElm.allowedFlags;\r\n    if (allowedFlags.includes(1)) window.addEventListener(\"keyup\", this);\r\n    if (allowedFlags.includes(4)) window.addEventListener(\"mousedown\", this);\r\n    if (allowedFlags.includes(8)) window.addEventListener(\"wheel\", this);\r\n  }\r\n  clearEventListeners() {\r\n    window.removeEventListener(\"keyup\", this),\r\n      window.removeEventListener(\"mousedown\", this),\r\n      window.removeEventListener(\"wheel\", this);\r\n  }\r\n  handleEvent(e) {\r\n    let allowedFlags = this.$currentElm.allowedFlags,\r\n      handled = !1,\r\n      valid = !1;\r\n    switch (e.type) {\r\n      case \"wheel\":\r\n        if (((handled = !0), allowedFlags.includes(8))) valid = !0;\r\n        break;\r\n      case \"mousedown\":\r\n        if (((handled = !0), allowedFlags.includes(4))) valid = !0;\r\n        break;\r\n      case \"keyup\":\r\n        if (((handled = !0), allowedFlags.includes(1))) {\r\n          let keyboardEvent = e;\r\n          if (\r\n            ((valid = keyboardEvent.code !== \"Escape\"),\r\n            valid && allowedFlags.includes(2))\r\n          ) {\r\n            let key = keyboardEvent.key;\r\n            (valid = key !== \"Control\" && key !== \"Shift\" && key !== \"Alt\"),\r\n              (handled = valid);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n    if (handled) {\r\n      if ((e.preventDefault(), e.stopPropagation(), valid))\r\n        this.$currentElm.bindKey(KeyHelper.getKeyFromEvent(e)),\r\n          this.stopCountdown();\r\n      else this.startCountdown();\r\n      window.setTimeout(this.hide, 200);\r\n    }\r\n  }\r\n}\r\nclass MkbMappingManagerDialog extends BaseProfileManagerDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    MkbMappingManagerDialog.instance ??\r\n    (MkbMappingManagerDialog.instance = new MkbMappingManagerDialog(\r\n      t(\"virtual-controller\")\r\n    ));\r\n  KEYS_PER_BUTTON = 2;\r\n  BUTTONS_ORDER = [\r\n    16, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 101, 102, 103,\r\n    11, 200, 201, 202, 203,\r\n  ];\r\n  allKeyElements = [];\r\n  $mouseMapTo;\r\n  $mouseSensitivityX;\r\n  $mouseSensitivityY;\r\n  $mouseDeadzone;\r\n  $unbindNote;\r\n  constructor(title) {\r\n    super(title, MkbMappingPresetsTable.getInstance());\r\n    this.render();\r\n  }\r\n  onBindingKey = (e) => {\r\n    if (e.target.disabled) return;\r\n    if (e.button !== 0) return;\r\n  };\r\n  parseDataset($btn) {\r\n    let dataset = $btn.dataset;\r\n    return {\r\n      keySlot: parseInt(dataset.keySlot),\r\n      buttonIndex: parseInt(dataset.buttonIndex),\r\n    };\r\n  }\r\n  onKeyChanged = (e) => {\r\n    let $current = e.target,\r\n      keyInfo = $current.keyInfo;\r\n    if (keyInfo) {\r\n      for (let $elm of this.allKeyElements)\r\n        if ($elm !== $current && $elm.keyInfo?.code === keyInfo.code)\r\n          $elm.unbindKey(!0);\r\n    }\r\n    this.savePreset();\r\n  };\r\n  render() {\r\n    let $rows = CE(\r\n      \"div\",\r\n      !1,\r\n      (this.$unbindNote = CE(\r\n        \"i\",\r\n        { class: \"bx-mkb-note\" },\r\n        t(\"right-click-to-unbind\")\r\n      ))\r\n    );\r\n    for (let buttonIndex of this.BUTTONS_ORDER) {\r\n      let [buttonName, buttonPrompt] = GamepadKeyName[buttonIndex],\r\n        $elm,\r\n        $fragment = document.createDocumentFragment();\r\n      for (let i = 0; i < this.KEYS_PER_BUTTON; i++)\r\n        ($elm = BxKeyBindingButton.create({\r\n          title: buttonPrompt,\r\n          isPrompt: !0,\r\n          allowedFlags: [1, 4, 8],\r\n          onChanged: this.onKeyChanged,\r\n        })),\r\n          ($elm.dataset.buttonIndex = buttonIndex.toString()),\r\n          ($elm.dataset.keySlot = i.toString()),\r\n          $elm.addEventListener(\"mouseup\", this.onBindingKey),\r\n          $fragment.appendChild($elm),\r\n          this.allKeyElements.push($elm);\r\n      let $keyRow = CE(\r\n        \"div\",\r\n        { class: \"bx-mkb-key-row\", _nearby: { orientation: \"horizontal\" } },\r\n        CE(\"label\", { title: buttonName }, buttonPrompt),\r\n        $fragment\r\n      );\r\n      $rows.appendChild($keyRow);\r\n    }\r\n    let savePreset = () => this.savePreset(),\r\n      $extraSettings = CE(\r\n        \"div\",\r\n        !1,\r\n        createSettingRow(\r\n          t(\"map-mouse-to\"),\r\n          (this.$mouseMapTo = BxSelectElement.create(\r\n            CE(\r\n              \"select\",\r\n              { _on: { input: savePreset } },\r\n              CE(\"option\", { value: 2 }, t(\"right-stick\")),\r\n              CE(\"option\", { value: 1 }, t(\"left-stick\")),\r\n              CE(\"option\", { value: 0 }, t(\"off\"))\r\n            )\r\n          ))\r\n        ),\r\n        createSettingRow(\r\n          t(\"horizontal-sensitivity\"),\r\n          (this.$mouseSensitivityX = BxNumberStepper.create(\r\n            \"hor_sensitivity\",\r\n            0,\r\n            1,\r\n            300,\r\n            { suffix: \"%\", exactTicks: 50 },\r\n            savePreset\r\n          ))\r\n        ),\r\n        createSettingRow(\r\n          t(\"vertical-sensitivity\"),\r\n          (this.$mouseSensitivityY = BxNumberStepper.create(\r\n            \"ver_sensitivity\",\r\n            0,\r\n            1,\r\n            300,\r\n            { suffix: \"%\", exactTicks: 50 },\r\n            savePreset\r\n          ))\r\n        ),\r\n        createSettingRow(\r\n          t(\"deadzone-counterweight\"),\r\n          (this.$mouseDeadzone = BxNumberStepper.create(\r\n            \"deadzone_counterweight\",\r\n            0,\r\n            1,\r\n            50,\r\n            { suffix: \"%\", exactTicks: 10 },\r\n            savePreset\r\n          ))\r\n        )\r\n      );\r\n    this.$content = CE(\"div\", !1, $rows, $extraSettings);\r\n  }\r\n  switchPreset(id) {\r\n    let preset = this.allPresets.data[id];\r\n    if (!preset) {\r\n      this.currentPresetId = 0;\r\n      return;\r\n    }\r\n    let presetData = preset.data;\r\n    this.currentPresetId = id;\r\n    let isDefaultPreset = id <= 0;\r\n    this.updateButtonStates(),\r\n      this.$unbindNote.classList.toggle(\"bx-gone\", isDefaultPreset);\r\n    for (let $elm of this.allKeyElements) {\r\n      let { buttonIndex, keySlot } = this.parseDataset($elm),\r\n        buttonKeys = presetData.mapping[buttonIndex];\r\n      if (buttonKeys && buttonKeys[keySlot])\r\n        $elm.bindKey({ code: buttonKeys[keySlot] }, !0);\r\n      else $elm.unbindKey(!0);\r\n      $elm.disabled = isDefaultPreset;\r\n    }\r\n    let mouse = presetData.mouse;\r\n    (this.$mouseMapTo.value = mouse.mapTo.toString()),\r\n      (this.$mouseSensitivityX.value = mouse.sensitivityX.toString()),\r\n      (this.$mouseSensitivityY.value = mouse.sensitivityY.toString()),\r\n      (this.$mouseDeadzone.value = mouse.deadzoneCounterweight.toString()),\r\n      (this.$mouseMapTo.disabled = isDefaultPreset),\r\n      (this.$mouseSensitivityX.dataset.disabled = isDefaultPreset.toString()),\r\n      (this.$mouseSensitivityY.dataset.disabled = isDefaultPreset.toString()),\r\n      (this.$mouseDeadzone.dataset.disabled = isDefaultPreset.toString());\r\n  }\r\n  savePreset() {\r\n    let presetData = deepClone(this.presetsDb.BLANK_PRESET_DATA);\r\n    for (let $elm of this.allKeyElements) {\r\n      let { buttonIndex, keySlot } = this.parseDataset($elm),\r\n        mapping = presetData.mapping;\r\n      if (!mapping[buttonIndex]) mapping[buttonIndex] = [];\r\n      if (!$elm.keyInfo) delete mapping[buttonIndex][keySlot];\r\n      else mapping[buttonIndex][keySlot] = $elm.keyInfo.code;\r\n    }\r\n    let mouse = presetData.mouse;\r\n    (mouse.mapTo = parseInt(this.$mouseMapTo.value)),\r\n      (mouse.sensitivityX = parseInt(this.$mouseSensitivityX.value)),\r\n      (mouse.sensitivityY = parseInt(this.$mouseSensitivityY.value)),\r\n      (mouse.deadzoneCounterweight = parseInt(this.$mouseDeadzone.value));\r\n    let oldPreset = this.allPresets.data[this.currentPresetId],\r\n      newPreset = {\r\n        id: this.currentPresetId,\r\n        name: oldPreset.name,\r\n        data: presetData,\r\n      };\r\n    this.presetsDb.updatePreset(newPreset),\r\n      (this.allPresets.data[this.currentPresetId] = newPreset);\r\n  }\r\n  onBeforeUnmount() {\r\n    StreamSettings.refreshMkbSettings(), super.onBeforeUnmount();\r\n  }\r\n}\r\nclass KeyboardShortcutsManagerDialog extends BaseProfileManagerDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    KeyboardShortcutsManagerDialog.instance ??\r\n    (KeyboardShortcutsManagerDialog.instance =\r\n      new KeyboardShortcutsManagerDialog(t(\"keyboard-shortcuts\")));\r\n  $content;\r\n  $unbindNote;\r\n  allKeyElements = [];\r\n  constructor(title) {\r\n    super(title, KeyboardShortcutsTable.getInstance());\r\n    let $rows = CE(\"div\", { class: \"bx-keyboard-shortcuts-manager-container\" });\r\n    for (let groupLabel in SHORTCUT_ACTIONS) {\r\n      let items = SHORTCUT_ACTIONS[groupLabel];\r\n      if (!items) continue;\r\n      let $fieldSet = CE(\"fieldset\", !1, CE(\"legend\", !1, groupLabel));\r\n      for (let action in items) {\r\n        let crumbs = items[action];\r\n        if (!crumbs) continue;\r\n        let label = crumbs.join(\" ❯ \"),\r\n          $btn = BxKeyBindingButton.create({\r\n            title: label,\r\n            isPrompt: !1,\r\n            onChanged: this.onKeyChanged,\r\n            allowedFlags: [1, 2],\r\n          });\r\n        $btn.classList.add(\"bx-full-width\"),\r\n          ($btn.dataset.action = action),\r\n          this.allKeyElements.push($btn);\r\n        let $row = createSettingRow(\r\n          label,\r\n          CE(\"div\", { class: \"bx-binding-button-wrapper\" }, $btn)\r\n        );\r\n        $fieldSet.appendChild($row);\r\n      }\r\n      if ($fieldSet.childElementCount > 1) $rows.appendChild($fieldSet);\r\n    }\r\n    this.$content = CE(\r\n      \"div\",\r\n      !1,\r\n      (this.$unbindNote = CE(\r\n        \"i\",\r\n        { class: \"bx-mkb-note\" },\r\n        t(\"right-click-to-unbind\")\r\n      )),\r\n      $rows\r\n    );\r\n  }\r\n  onKeyChanged = (e) => {\r\n    let $current = e.target,\r\n      keyInfo = $current.keyInfo;\r\n    if (keyInfo)\r\n      for (let $elm of this.allKeyElements) {\r\n        if ($elm === $current) continue;\r\n        if (\r\n          $elm.keyInfo?.code === keyInfo.code &&\r\n          $elm.keyInfo?.modifiers === keyInfo.modifiers\r\n        )\r\n          $elm.unbindKey(!0);\r\n      }\r\n    this.savePreset();\r\n  };\r\n  parseDataset($btn) {\r\n    return { action: $btn.dataset.action };\r\n  }\r\n  switchPreset(id) {\r\n    let preset = this.allPresets.data[id];\r\n    if (!preset) {\r\n      this.currentPresetId = 0;\r\n      return;\r\n    }\r\n    let presetData = preset.data;\r\n    this.currentPresetId = id;\r\n    let isDefaultPreset = id <= 0;\r\n    this.updateButtonStates(),\r\n      this.$unbindNote.classList.toggle(\"bx-gone\", isDefaultPreset);\r\n    for (let $elm of this.allKeyElements) {\r\n      let { action } = this.parseDataset($elm),\r\n        keyInfo = presetData.mapping[action];\r\n      if (keyInfo) $elm.bindKey(keyInfo, !0);\r\n      else $elm.unbindKey(!0);\r\n      $elm.disabled = isDefaultPreset;\r\n    }\r\n  }\r\n  savePreset() {\r\n    let presetData = deepClone(this.presetsDb.BLANK_PRESET_DATA);\r\n    for (let $elm of this.allKeyElements) {\r\n      let { action } = this.parseDataset($elm),\r\n        mapping = presetData.mapping;\r\n      if ($elm.keyInfo) mapping[action] = $elm.keyInfo;\r\n    }\r\n    let oldPreset = this.allPresets.data[this.currentPresetId],\r\n      newPreset = {\r\n        id: this.currentPresetId,\r\n        name: oldPreset.name,\r\n        data: presetData,\r\n      };\r\n    this.presetsDb.updatePreset(newPreset),\r\n      (this.allPresets.data[this.currentPresetId] = newPreset);\r\n  }\r\n  onBeforeUnmount() {\r\n    StreamSettings.refreshKeyboardShortcuts(), super.onBeforeUnmount();\r\n  }\r\n}\r\nclass MkbExtraSettings extends HTMLElement {\r\n  $mappingPresets;\r\n  $shortcutsPresets;\r\n  updateLayout;\r\n  saveMkbSettings;\r\n  saveShortcutsSettings;\r\n  static renderSettings() {\r\n    let $container = document.createDocumentFragment();\r\n    ($container.updateLayout = MkbExtraSettings.updateLayout.bind($container)),\r\n      ($container.saveMkbSettings =\r\n        MkbExtraSettings.saveMkbSettings.bind($container)),\r\n      ($container.saveShortcutsSettings =\r\n        MkbExtraSettings.saveShortcutsSettings.bind($container));\r\n    let $mappingPresets = BxSelectElement.create(\r\n        CE(\"select\", {\r\n          autocomplete: \"off\",\r\n          _on: { input: $container.saveMkbSettings },\r\n        })\r\n      ),\r\n      $shortcutsPresets = BxSelectElement.create(\r\n        CE(\"select\", {\r\n          autocomplete: \"off\",\r\n          _on: { input: $container.saveShortcutsSettings },\r\n        })\r\n      );\r\n    return (\r\n      $container.append(\r\n        ...(getGlobalPref(\"mkb.enabled\")\r\n          ? [\r\n              createSettingRow(\r\n                t(\"virtual-controller\"),\r\n                CE(\r\n                  \"div\",\r\n                  {\r\n                    class: \"bx-preset-row\",\r\n                    _nearby: { orientation: \"horizontal\" },\r\n                  },\r\n                  $mappingPresets,\r\n                  createButton({\r\n                    title: t(\"manage\"),\r\n                    icon: BxIcon.MANAGE,\r\n                    style: 64 | 1 | 512,\r\n                    onClick: () =>\r\n                      MkbMappingManagerDialog.getInstance().show({\r\n                        id: parseInt($container.$mappingPresets.value),\r\n                      }),\r\n                  })\r\n                ),\r\n                {\r\n                  multiLines: !0,\r\n                  onContextMenu: this.boundOnContextMenu,\r\n                  pref: \"mkb.p1.preset.mappingId\",\r\n                }\r\n              ),\r\n              createSettingRow(\r\n                t(\"virtual-controller-slot\"),\r\n                this.settingsManager.getElement(\"mkb.p1.slot\"),\r\n                { onContextMenu: this.boundOnContextMenu, pref: \"mkb.p1.slot\" }\r\n              ),\r\n            ]\r\n          : []),\r\n        createSettingRow(\r\n          t(\"in-game-keyboard-shortcuts\"),\r\n          CE(\r\n            \"div\",\r\n            { class: \"bx-preset-row\", _nearby: { orientation: \"horizontal\" } },\r\n            $shortcutsPresets,\r\n            createButton({\r\n              title: t(\"manage\"),\r\n              icon: BxIcon.MANAGE,\r\n              style: 64 | 1 | 512,\r\n              onClick: () =>\r\n                KeyboardShortcutsManagerDialog.getInstance().show({\r\n                  id: parseInt($container.$shortcutsPresets.value),\r\n                }),\r\n            })\r\n          ),\r\n          {\r\n            multiLines: !0,\r\n            onContextMenu: this.boundOnContextMenu,\r\n            pref: \"keyboardShortcuts.preset.inGameId\",\r\n          }\r\n        )\r\n      ),\r\n      ($container.$mappingPresets = $mappingPresets),\r\n      ($container.$shortcutsPresets = $shortcutsPresets),\r\n      this.settingsManager.setElement(\r\n        \"keyboardShortcuts.preset.inGameId\",\r\n        $shortcutsPresets\r\n      ),\r\n      this.settingsManager.setElement(\r\n        \"mkb.p1.preset.mappingId\",\r\n        $mappingPresets\r\n      ),\r\n      $container.updateLayout(),\r\n      this.onMountedCallbacks.push(() => {\r\n        $container.updateLayout();\r\n      }),\r\n      $container\r\n    );\r\n  }\r\n  static async updateLayout() {\r\n    let mappingPresets =\r\n      await MkbMappingPresetsTable.getInstance().getPresets();\r\n    renderPresetsList(\r\n      this.$mappingPresets,\r\n      mappingPresets,\r\n      getStreamPref(\"mkb.p1.preset.mappingId\")\r\n    );\r\n    let shortcutsPresets =\r\n      await KeyboardShortcutsTable.getInstance().getPresets();\r\n    renderPresetsList(\r\n      this.$shortcutsPresets,\r\n      shortcutsPresets,\r\n      getStreamPref(\"keyboardShortcuts.preset.inGameId\"),\r\n      { addOffValue: !0 }\r\n    );\r\n  }\r\n  static async saveMkbSettings() {\r\n    let presetId = parseInt(this.$mappingPresets.value);\r\n    setStreamPref(\"mkb.p1.preset.mappingId\", presetId, \"ui\");\r\n  }\r\n  static async saveShortcutsSettings() {\r\n    let presetId = parseInt(this.$shortcutsPresets.value);\r\n    setStreamPref(\"keyboardShortcuts.preset.inGameId\", presetId, \"ui\");\r\n  }\r\n}\r\nclass SettingsDialog extends NavigationDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    SettingsDialog.instance ?? (SettingsDialog.instance = new SettingsDialog());\r\n  LOG_TAG = \"SettingsNavigationDialog\";\r\n  $container;\r\n  $tabs;\r\n  $tabContents;\r\n  $btnReload;\r\n  $btnGlobalReload;\r\n  $noteGlobalReload;\r\n  $btnSuggestion;\r\n  $streamSettingsSelection;\r\n  renderFullSettings;\r\n  boundOnContextMenu;\r\n  suggestedSettings = { recommended: {}, default: {}, lowest: {}, highest: {} };\r\n  settingLabels = {};\r\n  settingsManager;\r\n  TAB_GLOBAL_ITEMS = [\r\n    {\r\n      group: \"general\",\r\n      label: t(\"better-xcloud\"),\r\n      helpUrl: \"https://better-xcloud.github.io/features/\",\r\n      items: [\r\n        ($parent) => {\r\n          let PREF_LATEST_VERSION = getGlobalPref(\"version.latest\"),\r\n            topButtons = [];\r\n          if (\r\n            !SCRIPT_VERSION.includes(\"beta\") &&\r\n            PREF_LATEST_VERSION &&\r\n            PREF_LATEST_VERSION != SCRIPT_VERSION\r\n          ) {\r\n            let opts = {\r\n              label:\r\n                \"🌟 \" +\r\n                t(\"new-version-available\", { version: PREF_LATEST_VERSION }),\r\n              style: 1 | 64 | 128,\r\n            };\r\n            if (AppInterface && AppInterface.updateLatestScript)\r\n              opts.onClick = (e) => AppInterface.updateLatestScript();\r\n            else\r\n              opts.url =\r\n                \"https://github.com/redphx/better-xcloud/releases/latest\";\r\n            topButtons.push(createButton(opts));\r\n          }\r\n          if (AppInterface)\r\n            topButtons.push(\r\n              createButton({\r\n                label: t(\"app-settings\"),\r\n                icon: BxIcon.STREAM_SETTINGS,\r\n                style: 128 | 64,\r\n                onClick: (e) => {\r\n                  AppInterface.openAppSettings &&\r\n                    AppInterface.openAppSettings(),\r\n                    this.hide();\r\n                },\r\n              })\r\n            );\r\n          else if (UserAgent.getDefault().toLowerCase().includes(\"android\"))\r\n            topButtons.push(\r\n              createButton({\r\n                label: \"🔥 \" + t(\"install-android\"),\r\n                style: 128 | 64,\r\n                url: \"https://better-xcloud.github.io/android\",\r\n              })\r\n            );\r\n          (this.$btnGlobalReload = createButton({\r\n            label: t(\"settings-reload\"),\r\n            classes: [\"bx-settings-reload-button\", \"bx-gone\"],\r\n            style: 64 | 128,\r\n            onClick: (e) => {\r\n              this.reloadPage();\r\n            },\r\n          })),\r\n            topButtons.push(this.$btnGlobalReload),\r\n            (this.$noteGlobalReload = CE(\r\n              \"span\",\r\n              { class: \"bx-settings-reload-note\" },\r\n              t(\"settings-reload-note\")\r\n            )),\r\n            topButtons.push(this.$noteGlobalReload),\r\n            (this.$btnSuggestion = CE(\r\n              \"div\",\r\n              { class: \"bx-suggest-toggler bx-focusable\", tabindex: 0 },\r\n              CE(\"label\", !1, t(\"suggest-settings\")),\r\n              CE(\"span\", !1, \"❯\")\r\n            )),\r\n            this.$btnSuggestion.addEventListener(\r\n              \"click\",\r\n              SuggestionsSetting.renderSuggestions.bind(this)\r\n            ),\r\n            topButtons.push(this.$btnSuggestion);\r\n          let $div = CE(\r\n            \"div\",\r\n            { class: \"bx-top-buttons\", _nearby: { orientation: \"vertical\" } },\r\n            ...topButtons\r\n          );\r\n          $parent.appendChild($div);\r\n        },\r\n        { pref: \"bx.locale\", multiLines: !0 },\r\n        \"server.bypassRestriction\",\r\n        \"ui.controllerFriendly\",\r\n        \"xhome.enabled\",\r\n      ],\r\n    },\r\n    {\r\n      group: \"server\",\r\n      label: t(\"server\"),\r\n      items: [\r\n        { pref: \"server.region\", multiLines: !0 },\r\n        { pref: \"stream.locale\", multiLines: !0 },\r\n        \"server.ipv6.prefer\",\r\n      ],\r\n    },\r\n    {\r\n      group: \"stream\",\r\n      label: t(\"stream\"),\r\n      items: [\r\n        \"stream.video.resolution\",\r\n        \"stream.video.codecProfile\",\r\n        \"stream.video.maxBitrate\",\r\n        \"audio.volume.booster.enabled\",\r\n        \"screenshot.applyFilters\",\r\n        \"audio.mic.onPlaying\",\r\n        \"game.fortnite.forceConsole\",\r\n        \"stream.video.combineAudio\",\r\n      ],\r\n    },\r\n    {\r\n      requiredVariants: \"full\",\r\n      group: \"mkb\",\r\n      label: t(\"mouse-and-keyboard\"),\r\n      items: [\r\n        \"nativeMkb.mode\",\r\n        {\r\n          pref: \"nativeMkb.forcedGames\",\r\n          multiLines: !0,\r\n          note: CE(\r\n            \"a\",\r\n            {\r\n              href: \"https://github.com/redphx/better-xcloud/discussions/574\",\r\n              target: \"_blank\",\r\n            },\r\n            t(\"unofficial-game-list\")\r\n          ),\r\n        },\r\n        \"mkb.enabled\",\r\n        \"mkb.cursor.hideIdle\",\r\n      ],\r\n      ...(!STATES.browser.capabilities.emulatedNativeMkb &&\r\n      (!STATES.userAgent.capabilities.mkb || !STATES.browser.capabilities.mkb)\r\n        ? {\r\n            unsupported: !0,\r\n            unsupportedNote: CE(\r\n              \"a\",\r\n              {\r\n                href: \"https://github.com/redphx/better-xcloud/issues/206#issuecomment-1920475657\",\r\n                target: \"_blank\",\r\n              },\r\n              \"⚠️ \" + t(\"browser-unsupported-feature\")\r\n            ),\r\n          }\r\n        : {}),\r\n    },\r\n    {\r\n      requiredVariants: \"full\",\r\n      group: \"touch-control\",\r\n      label: t(\"touch-controller\"),\r\n      items: [\r\n        {\r\n          pref: \"touchController.mode\",\r\n          note: CE(\r\n            \"a\",\r\n            {\r\n              href: \"https://github.com/redphx/better-xcloud/discussions/241\",\r\n              target: \"_blank\",\r\n            },\r\n            t(\"unofficial-game-list\")\r\n          ),\r\n        },\r\n        \"touchController.autoOff\",\r\n        \"touchController.opacity.default\",\r\n        \"touchController.style.standard\",\r\n        \"touchController.style.custom\",\r\n      ],\r\n      ...(!STATES.userAgent.capabilities.touch\r\n        ? {\r\n            unsupported: !0,\r\n            unsupportedNote: \"⚠️ \" + t(\"device-unsupported-touch\"),\r\n          }\r\n        : {}),\r\n    },\r\n    {\r\n      group: \"ui\",\r\n      label: t(\"ui\"),\r\n      items: [\r\n        \"ui.layout\",\r\n        \"ui.theme\",\r\n        \"ui.imageQuality\",\r\n        \"ui.gameCard.waitTime.show\",\r\n        \"ui.controllerStatus.show\",\r\n        \"ui.streamMenu.simplify\",\r\n        \"ui.splashVideo.skip\",\r\n        !AppInterface && \"ui.hideScrollbar\",\r\n        \"ui.systemMenu.hideHandle\",\r\n        \"ui.feedbackDialog.disabled\",\r\n        \"ui.reduceAnimations\",\r\n        { pref: \"ui.hideSections\", multiLines: !0 },\r\n        { pref: \"block.features\", multiLines: !0 },\r\n      ],\r\n    },\r\n    {\r\n      requiredVariants: \"full\",\r\n      group: \"game-bar\",\r\n      label: t(\"game-bar\"),\r\n      items: [\"gameBar.position\"],\r\n    },\r\n    {\r\n      group: \"loading-screen\",\r\n      label: t(\"loading-screen\"),\r\n      items: [\r\n        \"loadingScreen.gameArt.show\",\r\n        \"loadingScreen.waitTime.show\",\r\n        \"loadingScreen.rocket\",\r\n      ],\r\n    },\r\n    { group: \"other\", label: t(\"other\"), items: [\"block.tracking\"] },\r\n    {\r\n      group: \"advanced\",\r\n      label: t(\"advanced\"),\r\n      items: [\r\n        {\r\n          pref: \"userAgent.profile\",\r\n          multiLines: !0,\r\n          onCreated: (setting, $control) => {\r\n            let defaultUserAgent =\r\n                window.navigator.orgUserAgent || window.navigator.userAgent,\r\n              $inpCustomUserAgent = CE(\"input\", {\r\n                type: \"text\",\r\n                placeholder: defaultUserAgent,\r\n                autocomplete: \"off\",\r\n                class: \"bx-settings-custom-user-agent\",\r\n                tabindex: 0,\r\n              });\r\n            $inpCustomUserAgent.addEventListener(\"input\", (e) => {\r\n              let profile = $control.value,\r\n                custom = e.target.value.trim();\r\n              UserAgent.updateStorage(profile, custom),\r\n                this.onGlobalSettingChanged(e);\r\n            }),\r\n              $control.insertAdjacentElement(\"afterend\", $inpCustomUserAgent),\r\n              setNearby($inpCustomUserAgent.parentElement, {\r\n                orientation: \"vertical\",\r\n              });\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      group: \"footer\",\r\n      items: [\r\n        ($parent) => {\r\n          try {\r\n            let appVersion = document.querySelector(\r\n                \"meta[name=gamepass-app-version]\"\r\n              ).content,\r\n              appDate = new Date(\r\n                document.querySelector(\"meta[name=gamepass-app-date]\").content\r\n              )\r\n                .toISOString()\r\n                .substring(0, 10);\r\n            $parent.appendChild(\r\n              CE(\r\n                \"div\",\r\n                { class: \"bx-settings-app-version\" },\r\n                `xCloud website version ${appVersion} (${appDate})`\r\n              )\r\n            );\r\n          } catch (e) {}\r\n        },\r\n        ($parent) => {\r\n          $parent.appendChild(\r\n            CE(\r\n              \"a\",\r\n              {\r\n                class: \"bx-donation-link\",\r\n                href: \"https://ko-fi.com/redphx\",\r\n                target: \"_blank\",\r\n                tabindex: 0,\r\n              },\r\n              `❤️ ${t(\"support-better-xcloud\")}`\r\n            )\r\n          );\r\n        },\r\n        ($parent) => {\r\n          $parent.appendChild(\r\n            createButton({\r\n              label: t(\"clear-data\"),\r\n              style: 8 | 128 | 64,\r\n              onClick: (e) => {\r\n                if (confirm(t(\"clear-data-confirm\"))) clearAllData();\r\n              },\r\n            })\r\n          );\r\n        },\r\n        ($parent) => {\r\n          $parent.appendChild(\r\n            CE(\r\n              \"div\",\r\n              { class: \"bx-debug-info\" },\r\n              createButton({\r\n                label: \"Debug info\",\r\n                style: 8 | 128 | 64,\r\n                onClick: (e) => {\r\n                  let $button = e.target.closest(\"button\");\r\n                  if (!$button) return;\r\n                  let $pre = $button.nextElementSibling;\r\n                  if (!$pre) {\r\n                    let debugInfo = deepClone(BX_FLAGS.DeviceInfo);\r\n                    (debugInfo.settings = JSON.parse(\r\n                      window.localStorage.getItem(\"BetterXcloud\") || \"{}\"\r\n                    )),\r\n                      ($pre = CE(\r\n                        \"pre\",\r\n                        {\r\n                          class: \"bx-focusable bx-gone\",\r\n                          tabindex: 0,\r\n                          _on: {\r\n                            click: async (e2) => {\r\n                              await copyToClipboard(e2.target.innerText);\r\n                            },\r\n                          },\r\n                        },\r\n                        \"```\\n\" +\r\n                          JSON.stringify(debugInfo, null, \"  \") +\r\n                          \"\\n```\"\r\n                      )),\r\n                      $button.insertAdjacentElement(\"afterend\", $pre);\r\n                  }\r\n                  $pre.classList.toggle(\"bx-gone\"), $pre.scrollIntoView();\r\n                },\r\n              })\r\n            )\r\n          );\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  TAB_DISPLAY_ITEMS = [\r\n    {\r\n      requiredVariants: \"full\",\r\n      group: \"audio\",\r\n      label: t(\"audio\"),\r\n      helpUrl: \"https://better-xcloud.github.io/ingame-features/#audio\",\r\n      items: [\r\n        {\r\n          pref: \"audio.volume\",\r\n          params: { disabled: !getGlobalPref(\"audio.volume.booster.enabled\") },\r\n          onCreated: (setting, $elm) => {\r\n            let $range = $elm.querySelector(\"input[type=range\");\r\n            BxEventBus.Stream.on(\"setting.changed\", (payload) => {\r\n              let { settingKey } = payload;\r\n              if (settingKey === \"audio.volume\")\r\n                ($range.value = getStreamPref(settingKey).toString()),\r\n                  BxEvent.dispatch($range, \"input\", { ignoreOnChange: !0 });\r\n            });\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      group: \"video\",\r\n      label: t(\"video\"),\r\n      helpUrl: \"https://better-xcloud.github.io/ingame-features/#video\",\r\n      items: [\r\n        \"video.player.type\",\r\n        \"video.maxFps\",\r\n        \"video.player.powerPreference\",\r\n        \"video.processing\",\r\n        \"video.ratio\",\r\n        \"video.position\",\r\n        \"video.processing.sharpness\",\r\n        \"video.saturation\",\r\n        \"video.contrast\",\r\n        \"video.brightness\",\r\n      ],\r\n    },\r\n  ];\r\n  TAB_CONTROLLER_ITEMS = [\r\n    {\r\n      group: \"controller\",\r\n      label: t(\"controller\"),\r\n      helpUrl: \"https://better-xcloud.github.io/ingame-features/#controller\",\r\n      items: [\r\n        \"localCoOp.enabled\",\r\n        \"controller.pollingRate\",\r\n        ($parent) => {\r\n          $parent.appendChild(\r\n            ControllerExtraSettings.renderSettings.apply(this)\r\n          );\r\n        },\r\n      ],\r\n    },\r\n    STATES.userAgent.capabilities.touch && {\r\n      group: \"touch-control\",\r\n      label: t(\"touch-controller\"),\r\n      items: [\r\n        {\r\n          label: t(\"layout\"),\r\n          content: CE(\r\n            \"select\",\r\n            { disabled: !0 },\r\n            CE(\"option\", !1, t(\"default\"))\r\n          ),\r\n          onCreated: (setting, $elm) => {\r\n            $elm.addEventListener(\"input\", (e) => {\r\n              TouchController.applyCustomLayout($elm.value, 1000);\r\n            }),\r\n              window.addEventListener(\r\n                BxEvent.CUSTOM_TOUCH_LAYOUTS_LOADED,\r\n                (e) => {\r\n                  let customLayouts = TouchController.getCustomLayouts();\r\n                  while ($elm.firstChild) $elm.removeChild($elm.firstChild);\r\n                  if ((($elm.disabled = !customLayouts), !customLayouts)) {\r\n                    $elm.appendChild(CE(\"option\", { value: \"\" }, t(\"default\"))),\r\n                      ($elm.value = \"\"),\r\n                      $elm.dispatchEvent(new Event(\"input\"));\r\n                    return;\r\n                  }\r\n                  let $fragment = document.createDocumentFragment();\r\n                  for (let key in customLayouts.layouts) {\r\n                    let layout = customLayouts.layouts[key],\r\n                      name;\r\n                    if (layout.author)\r\n                      name = `${layout.name} (${layout.author})`;\r\n                    else name = layout.name;\r\n                    let $option = CE(\"option\", { value: key }, name);\r\n                    $fragment.appendChild($option);\r\n                  }\r\n                  $elm.appendChild($fragment),\r\n                    ($elm.value = customLayouts.default_layout);\r\n                }\r\n              );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    STATES.browser.capabilities.deviceVibration && {\r\n      group: \"device\",\r\n      label: t(\"device\"),\r\n      items: [\r\n        {\r\n          pref: \"deviceVibration.mode\",\r\n          multiLines: !0,\r\n          unsupported: !STATES.browser.capabilities.deviceVibration,\r\n        },\r\n        {\r\n          pref: \"deviceVibration.intensity\",\r\n          unsupported: !STATES.browser.capabilities.deviceVibration,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  TAB_MKB_ITEMS = [\r\n    {\r\n      requiredVariants: \"full\",\r\n      group: \"mkb\",\r\n      label: t(\"mouse-and-keyboard\"),\r\n      helpUrl: \"https://better-xcloud.github.io/mouse-and-keyboard/\",\r\n      items: [\r\n        ($parent) => {\r\n          $parent.appendChild(MkbExtraSettings.renderSettings.apply(this));\r\n        },\r\n      ],\r\n    },\r\n    NativeMkbHandler.isAllowed() && {\r\n      requiredVariants: \"full\",\r\n      group: \"native-mkb\",\r\n      label: t(\"native-mkb\"),\r\n      items: [\"nativeMkb.scroll.sensitivityY\", \"nativeMkb.scroll.sensitivityX\"],\r\n    },\r\n  ];\r\n  TAB_STATS_ITEMS = [\r\n    {\r\n      group: \"stats\",\r\n      label: t(\"stream-stats\"),\r\n      helpUrl: \"https://better-xcloud.github.io/stream-stats/\",\r\n      items: [\r\n        \"stats.showWhenPlaying\",\r\n        \"stats.quickGlance.enabled\",\r\n        \"stats.items\",\r\n        \"stats.position\",\r\n        \"stats.textSize\",\r\n        \"stats.opacity.all\",\r\n        \"stats.opacity.background\",\r\n        \"stats.colors\",\r\n      ],\r\n    },\r\n  ];\r\n  SETTINGS_UI = {\r\n    global: {\r\n      group: \"global\",\r\n      icon: BxIcon.HOME,\r\n      items: this.TAB_GLOBAL_ITEMS,\r\n    },\r\n    stream: {\r\n      group: \"stream\",\r\n      icon: BxIcon.DISPLAY,\r\n      items: this.TAB_DISPLAY_ITEMS,\r\n    },\r\n    controller: {\r\n      group: \"controller\",\r\n      icon: BxIcon.CONTROLLER,\r\n      items: this.TAB_CONTROLLER_ITEMS,\r\n      requiredVariants: \"full\",\r\n    },\r\n    mkb: {\r\n      group: \"mkb\",\r\n      icon: BxIcon.NATIVE_MKB,\r\n      items: this.TAB_MKB_ITEMS,\r\n      requiredVariants: \"full\",\r\n    },\r\n    stats: {\r\n      group: \"stats\",\r\n      icon: BxIcon.STREAM_STATS,\r\n      items: this.TAB_STATS_ITEMS,\r\n    },\r\n  };\r\n  constructor() {\r\n    super();\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.boundOnContextMenu = this.onContextMenu.bind(this)),\r\n      (this.settingsManager = SettingsManager.getInstance()),\r\n      (this.renderFullSettings = STATES.supportedRegion && STATES.isSignedIn),\r\n      this.setupDialog(),\r\n      this.onMountedCallbacks.push(() => {\r\n        if ((onChangeVideoPlayerType(), STATES.userAgent.capabilities.touch))\r\n          BxEvent.dispatch(window, BxEvent.CUSTOM_TOUCH_LAYOUTS_LOADED);\r\n        let $selectUserAgent = document.querySelector(\r\n          `#bx_setting_${escapeCssSelector(\"userAgent.profile\")}`\r\n        );\r\n        if ($selectUserAgent)\r\n          ($selectUserAgent.disabled = !0),\r\n            BxEvent.dispatch($selectUserAgent, \"input\", {}),\r\n            ($selectUserAgent.disabled = !1);\r\n      }),\r\n      BxEventBus.Stream.on(\"gameSettings.switched\", ({ id }) => {\r\n        this.$tabContents.dataset.gameId = id.toString();\r\n      });\r\n  }\r\n  getDialog() {\r\n    return this;\r\n  }\r\n  getContent() {\r\n    return this.$container;\r\n  }\r\n  onMounted() {\r\n    super.onMounted();\r\n  }\r\n  isOverlayVisible() {\r\n    return !STATES.isPlaying;\r\n  }\r\n  reloadPage() {\r\n    (this.$btnGlobalReload.disabled = !0),\r\n      (this.$btnGlobalReload.firstElementChild.textContent =\r\n        t(\"settings-reloading\")),\r\n      this.hide(),\r\n      FullscreenText.getInstance().show(t(\"settings-reloading\")),\r\n      window.location.reload();\r\n  }\r\n  isSupportedVariant(requiredVariants) {\r\n    if (typeof requiredVariants === \"undefined\") return !0;\r\n    return (\r\n      (requiredVariants =\r\n        typeof requiredVariants === \"string\"\r\n          ? [requiredVariants]\r\n          : requiredVariants),\r\n      requiredVariants.includes(SCRIPT_VARIANT)\r\n    );\r\n  }\r\n  onTabClicked = (e) => {\r\n    let $svg = e.target.closest(\"svg\"),\r\n      $child,\r\n      children = Array.from(this.$tabContents.children);\r\n    for ($child of children)\r\n      if ($child.dataset.tabGroup === $svg.dataset.group)\r\n        $child.classList.remove(\"bx-gone\"), calculateSelectBoxes($child);\r\n      else if ($child.dataset.tabGroup) $child.classList.add(\"bx-gone\");\r\n    this.$streamSettingsSelection.classList.toggle(\r\n      \"bx-gone\",\r\n      $svg.dataset.group === \"global\"\r\n    );\r\n    for (let $child2 of Array.from(this.$tabs.children))\r\n      $child2.classList.remove(\"bx-active\");\r\n    $svg.classList.add(\"bx-active\");\r\n  };\r\n  renderTab(settingTab) {\r\n    let $svg = createSvgIcon(settingTab.icon);\r\n    return (\r\n      ($svg.dataset.group = settingTab.group),\r\n      ($svg.tabIndex = 0),\r\n      $svg.addEventListener(\"click\", this.onTabClicked),\r\n      $svg\r\n    );\r\n  }\r\n  onGlobalSettingChanged = (e) => {\r\n    PatcherCache.getInstance().clear(),\r\n      this.$btnReload.classList.add(\"bx-danger\"),\r\n      this.$noteGlobalReload.classList.add(\"bx-gone\"),\r\n      this.$btnGlobalReload.classList.remove(\"bx-gone\"),\r\n      this.$btnGlobalReload.classList.add(\"bx-danger\");\r\n  };\r\n  onContextMenu(e) {\r\n    e.preventDefault();\r\n    let $elm = e.target;\r\n    $elm instanceof HTMLElement && this.resetHighlightedSetting($elm);\r\n  }\r\n  renderServerSetting(setting) {\r\n    let selectedValue = getGlobalPref(\"server.region\"),\r\n      continents = {\r\n        \"america-north\": { label: t(\"continent-north-america\") },\r\n        \"america-south\": { label: t(\"continent-south-america\") },\r\n        asia: { label: t(\"continent-asia\") },\r\n        australia: { label: t(\"continent-australia\") },\r\n        europe: { label: t(\"continent-europe\") },\r\n        other: { label: t(\"other\") },\r\n      },\r\n      $control = CE(\"select\", {\r\n        id: `bx_setting_${escapeCssSelector(setting.pref)}`,\r\n        tabindex: 0,\r\n      });\r\n    ($control.name = $control.id),\r\n      $control.addEventListener(\"input\", (e) => {\r\n        setGlobalPref(setting.pref, e.target.value, \"ui\"),\r\n          this.onGlobalSettingChanged(e);\r\n      }),\r\n      (setting.options = {});\r\n    for (let regionName in STATES.serverRegions) {\r\n      let region = STATES.serverRegions[regionName],\r\n        value = regionName,\r\n        label = `${region.shortName} - ${regionName}`;\r\n      if (region.isDefault) {\r\n        if (\r\n          ((label += ` (${t(\"default\")})`),\r\n          (value = \"default\"),\r\n          selectedValue === regionName)\r\n        )\r\n          selectedValue = \"default\";\r\n      }\r\n      setting.options[value] = label;\r\n      let $option = CE(\"option\", { value }, label),\r\n        continent = continents[region.contintent];\r\n      if (!continent.children) continent.children = [];\r\n      continent.children.push($option);\r\n    }\r\n    let fragment = document.createDocumentFragment(),\r\n      key;\r\n    for (key in continents) {\r\n      let continent = continents[key];\r\n      if (!continent.children) continue;\r\n      fragment.appendChild(\r\n        CE(\"optgroup\", { label: continent.label }, ...continent.children)\r\n      );\r\n    }\r\n    return (\r\n      $control.appendChild(fragment),\r\n      ($control.disabled = Object.keys(STATES.serverRegions).length === 0),\r\n      ($control.value = selectedValue),\r\n      $control\r\n    );\r\n  }\r\n  renderSettingRow(settingTab, $tabContent, settingTabContent, setting) {\r\n    if (typeof setting === \"string\") setting = { pref: setting };\r\n    let pref = setting.pref,\r\n      $control;\r\n    if (setting.content)\r\n      if (typeof setting.content === \"function\")\r\n        $control = setting.content.apply(this);\r\n      else $control = setting.content;\r\n    else if (!setting.unsupported) {\r\n      if (pref === \"server.region\")\r\n        $control = this.renderServerSetting(setting);\r\n      else if (pref === \"bx.locale\")\r\n        $control = SettingElement.fromPref(pref, async (e) => {\r\n          let newLocale = e.target.value;\r\n          if (getGlobalPref(\"ui.controllerFriendly\")) {\r\n            let timeoutId = e.target.timeoutId;\r\n            timeoutId && window.clearTimeout(timeoutId),\r\n              (e.target.timeoutId = window.setTimeout(() => {\r\n                Translations.refreshLocale(newLocale),\r\n                  Translations.updateTranslations();\r\n              }, 500));\r\n          } else\r\n            Translations.refreshLocale(newLocale),\r\n              Translations.updateTranslations();\r\n          this.onGlobalSettingChanged(e);\r\n        });\r\n      else if (pref === \"userAgent.profile\")\r\n        $control = SettingElement.fromPref(\"userAgent.profile\", (e) => {\r\n          let value = e.target.value,\r\n            isCustom = value === \"custom\",\r\n            userAgent2 = UserAgent.get(value);\r\n          UserAgent.updateStorage(value);\r\n          let $inp = $control.nextElementSibling;\r\n          ($inp.value = userAgent2),\r\n            ($inp.readOnly = !isCustom),\r\n            ($inp.disabled = !isCustom),\r\n            !e.target.disabled && this.onGlobalSettingChanged(e);\r\n        });\r\n      else if (\r\n        (($control = this.settingsManager.getElement(pref, setting.params)),\r\n        settingTab.group === \"global\")\r\n      )\r\n        $control.addEventListener(\"input\", this.onGlobalSettingChanged);\r\n      if ($control instanceof HTMLSelectElement)\r\n        $control = BxSelectElement.create($control);\r\n    }\r\n    let prefDefinition = null;\r\n    if (pref) prefDefinition = getPrefInfo(pref).definition;\r\n    if (\r\n      prefDefinition &&\r\n      !this.isSupportedVariant(prefDefinition.requiredVariants)\r\n    )\r\n      return;\r\n    let label = prefDefinition?.label || setting.label || \"\",\r\n      note = prefDefinition?.note || setting.note,\r\n      unsupportedNote =\r\n        prefDefinition?.unsupportedNote || setting.unsupportedNote,\r\n      experimental = prefDefinition?.experimental || setting.experimental;\r\n    if (typeof note === \"function\") note = note();\r\n    if (typeof unsupportedNote === \"function\")\r\n      unsupportedNote = unsupportedNote();\r\n    if (settingTabContent.label && setting.pref) {\r\n      if (prefDefinition?.suggest)\r\n        typeof prefDefinition.suggest.lowest !== \"undefined\" &&\r\n          (this.suggestedSettings.lowest[setting.pref] =\r\n            prefDefinition.suggest.lowest),\r\n          typeof prefDefinition.suggest.highest !== \"undefined\" &&\r\n            (this.suggestedSettings.highest[setting.pref] =\r\n              prefDefinition.suggest.highest);\r\n    }\r\n    if (experimental)\r\n      if (((label = \"🧪 \" + label), !note)) note = t(\"experimental\");\r\n      else note = `${t(\"experimental\")}: ${note}`;\r\n    let $note;\r\n    if (unsupportedNote)\r\n      $note = CE(\"div\", { class: \"bx-settings-dialog-note\" }, unsupportedNote);\r\n    else if (note)\r\n      $note = CE(\"div\", { class: \"bx-settings-dialog-note\" }, note);\r\n    let $row = createSettingRow(\r\n      label,\r\n      !prefDefinition?.unsupported && $control,\r\n      {\r\n        $note,\r\n        multiLines: setting.multiLines,\r\n        icon: prefDefinition?.labelIcon,\r\n        onContextMenu: this.boundOnContextMenu,\r\n        pref,\r\n      }\r\n    );\r\n    if (pref) $row.htmlFor = `bx_setting_${escapeCssSelector(pref)}`;\r\n    if (\r\n      (($row.dataset.type = settingTabContent.group),\r\n      !STATES.supportedRegion && setting.pref === \"server.bypassRestriction\")\r\n    )\r\n      $row.classList.add(\"bx-settings-important-row\");\r\n    $tabContent.appendChild($row),\r\n      !prefDefinition?.unsupported &&\r\n        setting.onCreated &&\r\n        setting.onCreated(setting, $control);\r\n  }\r\n  renderSettingsSection(settingTab, sections) {\r\n    let $tabContent = CE(\"div\", {\r\n      class: \"bx-gone\",\r\n      _dataset: { tabGroup: settingTab.group },\r\n    });\r\n    for (let section of sections) {\r\n      if (!section) continue;\r\n      if (section instanceof HTMLElement) {\r\n        $tabContent.appendChild(section);\r\n        continue;\r\n      }\r\n      if (!this.isSupportedVariant(section.requiredVariants)) continue;\r\n      if (\r\n        !this.renderFullSettings &&\r\n        settingTab.group === \"global\" &&\r\n        section.group !== \"general\" &&\r\n        section.group !== \"footer\"\r\n      )\r\n        continue;\r\n      let label = section.label;\r\n      if (label === t(\"better-xcloud\")) {\r\n        if (((label += \" \" + SCRIPT_VERSION), SCRIPT_VARIANT === \"lite\"))\r\n          label += \" (Lite)\";\r\n        label = createButton({\r\n          label,\r\n          url: \"https://github.com/redphx/better-xcloud/releases\",\r\n          style: 4096 | 16 | 64,\r\n        });\r\n      }\r\n      if (label) {\r\n        let $title = CE(\r\n          \"h2\",\r\n          { _nearby: { orientation: \"horizontal\" } },\r\n          CE(\"span\", !1, label),\r\n          section.helpUrl &&\r\n            createButton({\r\n              icon: BxIcon.QUESTION,\r\n              style: 8 | 64,\r\n              url: section.helpUrl,\r\n              title: t(\"help\"),\r\n            })\r\n        );\r\n        $tabContent.appendChild($title);\r\n      }\r\n      if (section.unsupportedNote) {\r\n        let $note = CE(\r\n          \"b\",\r\n          { class: \"bx-note-unsupported\" },\r\n          section.unsupportedNote\r\n        );\r\n        $tabContent.appendChild($note);\r\n      }\r\n      if (section.unsupported) continue;\r\n      if (section.content) {\r\n        $tabContent.appendChild(section.content);\r\n        continue;\r\n      }\r\n      section.items = section.items || [];\r\n      for (let setting of section.items) {\r\n        if (setting === !1) continue;\r\n        if (typeof setting === \"function\") {\r\n          setting.apply(this, [$tabContent]);\r\n          continue;\r\n        }\r\n        this.renderSettingRow(settingTab, $tabContent, section, setting);\r\n      }\r\n    }\r\n    return $tabContent;\r\n  }\r\n  setupDialog() {\r\n    let $tabs,\r\n      $tabContents,\r\n      $container = CE(\r\n        \"div\",\r\n        { class: \"bx-settings-dialog\", _nearby: { orientation: \"horizontal\" } },\r\n        CE(\r\n          \"div\",\r\n          {\r\n            class: \"bx-settings-tabs-container\",\r\n            _nearby: {\r\n              orientation: \"vertical\",\r\n              focus: () => {\r\n                return this.dialogManager.focus($tabs);\r\n              },\r\n              loop: (direction) => {\r\n                if (direction === 1 || direction === 3)\r\n                  return (\r\n                    this.focusVisibleTab(direction === 1 ? \"last\" : \"first\"), !0\r\n                  );\r\n                return !1;\r\n              },\r\n            },\r\n          },\r\n          ($tabs = CE(\"div\", {\r\n            class: \"bx-settings-tabs bx-hide-scroll-bar\",\r\n            _nearby: { focus: () => this.focusActiveTab() },\r\n          })),\r\n          CE(\r\n            \"div\",\r\n            !1,\r\n            (this.$btnReload = createButton({\r\n              icon: BxIcon.REFRESH,\r\n              style: 64 | 32,\r\n              onClick: (e) => {\r\n                this.reloadPage();\r\n              },\r\n            })),\r\n            createButton({\r\n              icon: BxIcon.CLOSE,\r\n              style: 64 | 32,\r\n              onClick: (e) => {\r\n                this.dialogManager.hide();\r\n              },\r\n            })\r\n          )\r\n        ),\r\n        CE(\r\n          \"div\",\r\n          {\r\n            class: \"bx-settings-tab-contents\",\r\n            _nearby: {\r\n              orientation: \"vertical\",\r\n              loop: (direction) => {\r\n                if (direction === 1 || direction === 3)\r\n                  return (\r\n                    this.focusVisibleSetting(\r\n                      direction === 1 ? \"last\" : \"first\"\r\n                    ),\r\n                    !0\r\n                  );\r\n                return !1;\r\n              },\r\n            },\r\n          },\r\n          (this.$streamSettingsSelection =\r\n            SettingsManager.getInstance().getStreamSettingsSelection()),\r\n          ($tabContents = CE(\"div\", {\r\n            class: \"bx-settings-tab-content\",\r\n            _nearby: {\r\n              orientation: \"vertical\",\r\n              focus: () => this.jumpToSettingGroup(\"next\"),\r\n            },\r\n          }))\r\n        )\r\n      );\r\n    (this.$container = $container),\r\n      (this.$tabs = $tabs),\r\n      (this.$tabContents = $tabContents),\r\n      $container.addEventListener(\"click\", (e) => {\r\n        if (e.target === $container)\r\n          e.preventDefault(), e.stopPropagation(), this.hide();\r\n      });\r\n    let settingTabGroup;\r\n    for (settingTabGroup in this.SETTINGS_UI) {\r\n      let settingTab = this.SETTINGS_UI[settingTabGroup];\r\n      if (!settingTab) continue;\r\n      if (!this.isSupportedVariant(settingTab.requiredVariants)) continue;\r\n      if (settingTab.group !== \"global\" && !this.renderFullSettings) continue;\r\n      let $svg = this.renderTab(settingTab);\r\n      $tabs.appendChild($svg);\r\n      let $tabContent = this.renderSettingsSection.call(\r\n        this,\r\n        settingTab,\r\n        settingTab.items\r\n      );\r\n      $tabContents.appendChild($tabContent);\r\n    }\r\n    $tabs.firstElementChild.dispatchEvent(new Event(\"click\"));\r\n  }\r\n  focusTab(tabId) {\r\n    let $tab = this.$container.querySelector(\r\n      `.bx-settings-tabs svg[data-group=${tabId}]`\r\n    );\r\n    $tab && $tab.dispatchEvent(new Event(\"click\"));\r\n  }\r\n  focusIfNeeded() {\r\n    this.jumpToSettingGroup(\"next\");\r\n  }\r\n  focusActiveTab() {\r\n    let $currentTab = this.$tabs.querySelector(\".bx-active\");\r\n    return $currentTab && $currentTab.focus(), !0;\r\n  }\r\n  focusVisibleSetting(type = \"first\") {\r\n    let controls = Array.from(\r\n      this.$tabContents.querySelectorAll(\r\n        \"div[data-tab-group]:not(.bx-gone) > *\"\r\n      )\r\n    );\r\n    if (!controls.length) return !1;\r\n    if (type === \"last\") controls.reverse();\r\n    for (let $control of controls) {\r\n      if (!($control instanceof HTMLElement)) continue;\r\n      let $focusable = this.dialogManager.findFocusableElement($control);\r\n      if ($focusable) {\r\n        if (this.dialogManager.focus($focusable)) return !0;\r\n      }\r\n    }\r\n    return !1;\r\n  }\r\n  focusVisibleTab(type = \"first\") {\r\n    let tabs = Array.from(this.$tabs.querySelectorAll(\"svg:not(.bx-gone)\"));\r\n    if (!tabs.length) return !1;\r\n    if (type === \"last\") tabs.reverse();\r\n    for (let $tab of tabs) if (this.dialogManager.focus($tab)) return !0;\r\n    return !1;\r\n  }\r\n  jumpToSettingGroup(direction) {\r\n    let $tabContent = this.$tabContents.querySelector(\r\n      \"div[data-tab-group]:not(.bx-gone)\"\r\n    );\r\n    if (!$tabContent) return !1;\r\n    let $header,\r\n      $focusing = document.activeElement;\r\n    if (!$focusing || !$tabContent.contains($focusing))\r\n      $header = $tabContent.querySelector(\"h2\");\r\n    else {\r\n      let $parent = $focusing.closest(\"[data-tab-group] > *\"),\r\n        siblingProperty =\r\n          direction === \"next\" ? \"nextSibling\" : \"previousSibling\",\r\n        $tmp = $parent,\r\n        times = 0;\r\n      while (!0) {\r\n        if (!$tmp) break;\r\n        if ($tmp.tagName === \"H2\") {\r\n          if (\r\n            (($header = $tmp),\r\n            !$tmp.nextElementSibling?.classList.contains(\"bx-note-unsupported\"))\r\n          ) {\r\n            if ((++times, direction === \"next\" || times >= 2)) break;\r\n          }\r\n        }\r\n        $tmp = $tmp[siblingProperty];\r\n      }\r\n    }\r\n    let $target;\r\n    if ($header) $target = this.dialogManager.findNextTarget($header, 3, !1);\r\n    if ($target) return this.dialogManager.focus($target);\r\n    return !1;\r\n  }\r\n  resetHighlightedSetting($elm) {\r\n    let targetGameId = SettingsManager.getInstance().getTargetGameId();\r\n    if (targetGameId < 0) return;\r\n    if (!$elm)\r\n      $elm =\r\n        document.activeElement instanceof HTMLElement\r\n          ? document.activeElement\r\n          : void 0;\r\n    let $row = $elm?.closest(\"div[data-tab-group] > .bx-settings-row\");\r\n    if (!$row) return;\r\n    let pref = $row.prefKey;\r\n    if (!pref) alert(\"Pref not found: \" + $row.id);\r\n    if (!isStreamPref(pref)) return;\r\n    let deleted = STORAGE.Stream.deleteSettingByGame(targetGameId, pref);\r\n    if (deleted)\r\n      BxEventBus.Stream.emit(\"setting.changed\", {\r\n        storageKey: `${\"BetterXcloud.Stream\"}.${targetGameId}`,\r\n        settingKey: pref,\r\n      });\r\n    return deleted;\r\n  }\r\n  handleKeyPress(key) {\r\n    let handled = !0;\r\n    switch (key) {\r\n      case \"Tab\":\r\n        this.focusActiveTab();\r\n        break;\r\n      case \"Home\":\r\n        this.focusVisibleSetting(\"first\");\r\n        break;\r\n      case \"End\":\r\n        this.focusVisibleSetting(\"last\");\r\n        break;\r\n      case \"PageUp\":\r\n        this.jumpToSettingGroup(\"previous\");\r\n        break;\r\n      case \"PageDown\":\r\n        this.jumpToSettingGroup(\"next\");\r\n        break;\r\n      case \"KeyQ\":\r\n        this.resetHighlightedSetting();\r\n        break;\r\n      default:\r\n        handled = !1;\r\n        break;\r\n    }\r\n    return handled;\r\n  }\r\n  handleGamepad(button) {\r\n    let handled = !0;\r\n    switch (button) {\r\n      case 1:\r\n        let $focusing = document.activeElement;\r\n        if ($focusing && this.$tabs.contains($focusing)) this.hide();\r\n        else this.focusActiveTab();\r\n        break;\r\n      case 4:\r\n      case 5:\r\n        this.focusActiveTab();\r\n        break;\r\n      case 6:\r\n        this.jumpToSettingGroup(\"previous\");\r\n        break;\r\n      case 7:\r\n        this.jumpToSettingGroup(\"next\");\r\n        break;\r\n      case 2:\r\n        this.resetHighlightedSetting();\r\n        break;\r\n      default:\r\n        handled = !1;\r\n        break;\r\n    }\r\n    return handled;\r\n  }\r\n}\r\nclass ScreenshotManager {\r\n  static instance;\r\n  static getInstance = () =>\r\n    ScreenshotManager.instance ??\r\n    (ScreenshotManager.instance = new ScreenshotManager());\r\n  LOG_TAG = \"ScreenshotManager\";\r\n  $download;\r\n  $canvas;\r\n  canvasContext;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.$download = CE(\"a\")),\r\n      (this.$canvas = CE(\"canvas\", { class: \"bx-gone\" })),\r\n      (this.canvasContext = this.$canvas.getContext(\"2d\", {\r\n        alpha: !1,\r\n        willReadFrequently: !1,\r\n      }));\r\n  }\r\n  updateCanvasSize(width, height) {\r\n    (this.$canvas.width = width), (this.$canvas.height = height);\r\n  }\r\n  updateCanvasFilters(filters) {\r\n    this.canvasContext.filter = filters;\r\n  }\r\n  onAnimationEnd(e) {\r\n    e.target.classList.remove(\"bx-taking-screenshot\");\r\n  }\r\n  takeScreenshot(callback) {\r\n    let currentStream = STATES.currentStream,\r\n      streamPlayerManager = currentStream.streamPlayerManager,\r\n      $canvas = this.$canvas;\r\n    if (!streamPlayerManager || !$canvas) return;\r\n    let $player;\r\n    if (getGlobalPref(\"screenshot.applyFilters\"))\r\n      $player = streamPlayerManager.getPlayerElement();\r\n    else $player = streamPlayerManager.getPlayerElement(\"video\");\r\n    if (!$player || !$player.isConnected) return;\r\n    let canvasContext = this.canvasContext;\r\n    if ($player instanceof HTMLCanvasElement)\r\n      streamPlayerManager.getCanvasPlayer()?.updateFrame();\r\n    canvasContext.drawImage($player, 0, 0);\r\n    let $gameStream = $player.closest(\"#game-stream\");\r\n    if ($gameStream)\r\n      $gameStream.addEventListener(\"animationend\", this.onAnimationEnd, {\r\n        once: !0,\r\n      }),\r\n        $gameStream.classList.add(\"bx-taking-screenshot\");\r\n    if (AppInterface) {\r\n      let data = $canvas.toDataURL(\"image/png\").split(\";base64,\")[1];\r\n      AppInterface.saveScreenshot(currentStream.titleSlug, data),\r\n        canvasContext.clearRect(0, 0, $canvas.width, $canvas.height),\r\n        callback && callback();\r\n      return;\r\n    }\r\n    $canvas.toBlob((blob) => {\r\n      if (!blob) return;\r\n      let now = +new Date(),\r\n        $download = this.$download;\r\n      ($download.download = `${currentStream.titleSlug}-${now}.png`),\r\n        ($download.href = URL.createObjectURL(blob)),\r\n        $download.click(),\r\n        URL.revokeObjectURL($download.href),\r\n        ($download.href = \"\"),\r\n        ($download.download = \"\"),\r\n        canvasContext.clearRect(0, 0, $canvas.width, $canvas.height),\r\n        callback && callback();\r\n    }, \"image/png\");\r\n  }\r\n}\r\nclass RendererShortcut {\r\n  static toggleVisibility() {\r\n    let $mediaContainer = document.querySelector(\r\n      '#game-stream div[data-testid=\"media-container\"]'\r\n    );\r\n    if (!$mediaContainer) {\r\n      BxEventBus.Stream.emit(\"video.visibility.changed\", { isVisible: !0 });\r\n      return;\r\n    }\r\n    $mediaContainer.classList.toggle(\"bx-gone\");\r\n    let isVisible = !$mediaContainer.classList.contains(\"bx-gone\");\r\n    limitVideoPlayerFps(isVisible ? getStreamPref(\"video.maxFps\") : 0),\r\n      BxEventBus.Stream.emit(\"video.visibility.changed\", { isVisible });\r\n  }\r\n}\r\nclass TrueAchievements {\r\n  static instance;\r\n  static getInstance = () =>\r\n    TrueAchievements.instance ??\r\n    (TrueAchievements.instance = new TrueAchievements());\r\n  LOG_TAG = \"TrueAchievements\";\r\n  $link;\r\n  $button;\r\n  $hiddenLink;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.$link = createButton({\r\n        label: t(\"true-achievements\"),\r\n        url: \"#\",\r\n        icon: BxIcon.TRUE_ACHIEVEMENTS,\r\n        style: 64 | 8 | 128 | 8192,\r\n        onClick: this.onClick,\r\n      })),\r\n      (this.$button = createButton({\r\n        label: t(\"true-achievements\"),\r\n        title: t(\"true-achievements\"),\r\n        icon: BxIcon.TRUE_ACHIEVEMENTS,\r\n        style: 64,\r\n        onClick: this.onClick,\r\n      })),\r\n      (this.$hiddenLink = CE(\"a\", { target: \"_blank\" }));\r\n  }\r\n  onClick = (e) => {\r\n    e.preventDefault(), window.BX_EXPOSED.dialogRoutes?.closeAll();\r\n    let dataset = this.$link.dataset;\r\n    this.open(!0, dataset.xboxTitleId, dataset.id);\r\n  };\r\n  updateIds(xboxTitleId, id) {\r\n    let $link = this.$link,\r\n      $button = this.$button;\r\n    if ((clearDataSet($link), clearDataSet($button), xboxTitleId))\r\n      ($link.dataset.xboxTitleId = xboxTitleId),\r\n        ($button.dataset.xboxTitleId = xboxTitleId);\r\n    if (id) ($link.dataset.id = id), ($button.dataset.id = id);\r\n  }\r\n  injectAchievementsProgress($elm) {\r\n    if (SCRIPT_VARIANT !== \"full\") return;\r\n    let $parent = $elm.parentElement,\r\n      $div = CE(\"div\", { class: \"bx-guide-home-achievements-progress\" }, $elm),\r\n      xboxTitleId;\r\n    try {\r\n      let $container = $parent.closest(\r\n        \"div[class*=AchievementsPreview-module__container]\"\r\n      );\r\n      if ($container)\r\n        xboxTitleId =\r\n          getReactProps($container).children.props.data.data.xboxTitleId;\r\n    } catch (e) {}\r\n    if (!xboxTitleId) xboxTitleId = this.getStreamXboxTitleId();\r\n    if (typeof xboxTitleId !== \"undefined\")\r\n      xboxTitleId = xboxTitleId.toString();\r\n    if ((this.updateIds(xboxTitleId), document.body.dataset.mediaType === \"tv\"))\r\n      $div.appendChild(this.$link);\r\n    else $div.appendChild(this.$button);\r\n    $parent.appendChild($div);\r\n  }\r\n  injectAchievementDetailPage($parent) {\r\n    if (SCRIPT_VARIANT !== \"full\") return;\r\n    let props = getReactProps($parent);\r\n    if (!props) return;\r\n    try {\r\n      let achievementList = props.children.props.data.data,\r\n        $header = $parent.querySelector(\"div[class*=AchievementDetailHeader]\"),\r\n        achievementName =\r\n          getReactProps($header).children[0].props.achievementName,\r\n        id,\r\n        xboxTitleId;\r\n      for (let achiev of achievementList)\r\n        if (achiev.name === achievementName) {\r\n          (id = achiev.id), (xboxTitleId = achiev.title.id);\r\n          break;\r\n        }\r\n      if (id) this.updateIds(xboxTitleId, id), $parent.appendChild(this.$link);\r\n    } catch (e) {}\r\n  }\r\n  getStreamXboxTitleId() {\r\n    return (\r\n      STATES.currentStream.xboxTitleId ||\r\n      STATES.currentStream.titleInfo?.details.xboxTitleId\r\n    );\r\n  }\r\n  open(override, xboxTitleId, id) {\r\n    if (!xboxTitleId || xboxTitleId === \"undefined\")\r\n      xboxTitleId = this.getStreamXboxTitleId();\r\n    if (AppInterface && AppInterface.openTrueAchievementsLink) {\r\n      AppInterface.openTrueAchievementsLink(\r\n        override,\r\n        xboxTitleId?.toString(),\r\n        id?.toString()\r\n      );\r\n      return;\r\n    }\r\n    let url = \"https://www.trueachievements.com\";\r\n    if (xboxTitleId) {\r\n      if (((url += `/deeplink/${xboxTitleId}`), id)) url += `/${id}`;\r\n    }\r\n    (this.$hiddenLink.href = url), this.$hiddenLink.click();\r\n  }\r\n}\r\nclass VirtualControllerShortcut {\r\n  static pressXboxButton() {\r\n    let streamSession = window.BX_EXPOSED.streamSession;\r\n    if (!streamSession) return;\r\n    let released = generateVirtualControllerMapping(0),\r\n      pressed = generateVirtualControllerMapping(0, {\r\n        Nexus: 1,\r\n        VirtualPhysicality: 1024,\r\n      });\r\n    streamSession.onVirtualGamepadInput(\"systemMenu\", performance.now(), [\r\n      pressed,\r\n    ]),\r\n      setTimeout(() => {\r\n        streamSession.onVirtualGamepadInput(\"systemMenu\", performance.now(), [\r\n          released,\r\n        ]);\r\n      }, 100);\r\n  }\r\n}\r\nclass ShortcutHandler {\r\n  static runAction(action) {\r\n    switch (action) {\r\n      case \"bx.settings.show\":\r\n        SettingsDialog.getInstance().show();\r\n        break;\r\n      case \"stream.screenshot.capture\":\r\n        ScreenshotManager.getInstance().takeScreenshot();\r\n        break;\r\n      case \"stream.video.toggle\":\r\n        RendererShortcut.toggleVisibility();\r\n        break;\r\n      case \"stream.stats.toggle\":\r\n        StreamStats.getInstance().toggle();\r\n        break;\r\n      case \"stream.microphone.toggle\":\r\n        MicrophoneShortcut.toggle();\r\n        break;\r\n      case \"stream.menu.show\":\r\n        StreamUiShortcut.showHideStreamMenu();\r\n        break;\r\n      case \"stream.sound.toggle\":\r\n        SoundShortcut.muteUnmute();\r\n        break;\r\n      case \"stream.volume.inc\":\r\n        SoundShortcut.adjustGainNodeVolume(10);\r\n        break;\r\n      case \"stream.volume.dec\":\r\n        SoundShortcut.adjustGainNodeVolume(-10);\r\n        break;\r\n      case \"device.brightness.inc\":\r\n      case \"device.brightness.dec\":\r\n      case \"device.sound.toggle\":\r\n      case \"device.volume.inc\":\r\n      case \"device.volume.dec\":\r\n        AppInterface &&\r\n          AppInterface.runShortcut &&\r\n          AppInterface.runShortcut(action);\r\n        break;\r\n      case \"mkb.toggle\":\r\n        if (STATES.currentStream.titleInfo?.details.hasMkbSupport)\r\n          NativeMkbHandler.getInstance()?.toggle();\r\n        else EmulatedMkbHandler.getInstance()?.toggle();\r\n        break;\r\n      case \"ta.open\":\r\n        TrueAchievements.getInstance().open(!1);\r\n        break;\r\n      case \"controller.xbox.press\":\r\n        VirtualControllerShortcut.pressXboxButton();\r\n        break;\r\n    }\r\n  }\r\n}\r\nclass ControllerShortcut {\r\n  static buttonsCache = {};\r\n  static buttonsStatus = {};\r\n  static reset(index) {\r\n    (ControllerShortcut.buttonsCache[index] = []),\r\n      (ControllerShortcut.buttonsStatus[index] = []);\r\n  }\r\n  static handle(gamepad) {\r\n    let controllerSettings = window.BX_STREAM_SETTINGS.controllers[gamepad.id];\r\n    if (!controllerSettings) return !1;\r\n    let actions = controllerSettings.shortcuts;\r\n    if (!actions) return !1;\r\n    let gamepadIndex = gamepad.index;\r\n    (ControllerShortcut.buttonsCache[gamepadIndex] =\r\n      ControllerShortcut.buttonsStatus[gamepadIndex].slice(0)),\r\n      (ControllerShortcut.buttonsStatus[gamepadIndex] = []);\r\n    let pressed = [],\r\n      otherButtonPressed = !1,\r\n      entries = gamepad.buttons.entries(),\r\n      index,\r\n      button;\r\n    for ([index, button] of entries)\r\n      if (button.pressed && index !== 16) {\r\n        if (\r\n          ((otherButtonPressed = !0),\r\n          (pressed[index] = !0),\r\n          actions[index] &&\r\n            !ControllerShortcut.buttonsCache[gamepadIndex][index])\r\n        ) {\r\n          let idx = index;\r\n          setTimeout(() => ShortcutHandler.runAction(actions[idx]), 0);\r\n        }\r\n      }\r\n    return (\r\n      (ControllerShortcut.buttonsStatus[gamepadIndex] = pressed),\r\n      otherButtonPressed\r\n    );\r\n  }\r\n}\r\nvar FeatureGates = {\r\n    PwaPrompt: !1,\r\n    EnableWifiWarnings: !1,\r\n    EnableUpdateRequiredPage: !1,\r\n    ShowForcedUpdateScreen: !1,\r\n    EnableTakControlResizing: !0,\r\n    EnableLazyLoadedHome: !1,\r\n    EnableRemotePlay: getGlobalPref(\"xhome.enabled\"),\r\n  },\r\n  nativeMkbMode = getGlobalPref(\"nativeMkb.mode\");\r\nif (nativeMkbMode !== \"default\")\r\n  FeatureGates.EnableMouseAndKeyboard = nativeMkbMode === \"on\";\r\nvar blockFeatures = getGlobalPref(\"block.features\");\r\nif (blockFeatures.includes(\"chat\")) FeatureGates.EnableGuideChatTab = !1;\r\nif (blockFeatures.includes(\"friends\"))\r\n  FeatureGates.EnableFriendsAndFollowers = !1;\r\nif (blockFeatures.includes(\"byog\"))\r\n  (FeatureGates.EnableBYOG = !1), (FeatureGates.EnableBYOGPurchase = !1);\r\nif (BX_FLAGS.FeatureGates)\r\n  FeatureGates = Object.assign(BX_FLAGS.FeatureGates, FeatureGates);\r\nclass LocalCoOpManager {\r\n  static instance;\r\n  static getInstance = () =>\r\n    LocalCoOpManager.instance ??\r\n    (LocalCoOpManager.instance = new LocalCoOpManager());\r\n  supportedIds;\r\n  constructor() {\r\n    BxEventBus.Script.once(\"list.localCoOp.updated\", (e) => {\r\n      this.supportedIds = e.ids;\r\n    }),\r\n      (this.supportedIds = GhPagesUtils.getLocalCoOpList()),\r\n      console.log(\"this.supportedIds\", this.supportedIds);\r\n  }\r\n  isSupported(productId) {\r\n    return this.supportedIds.has(productId);\r\n  }\r\n}\r\nvar BxExposed = {\r\n  getTitleInfo: () => STATES.currentStream.titleInfo,\r\n  modifyPreloadedState: (state) => {\r\n    let LOG_TAG3 = \"PreloadState\";\r\n    try {\r\n      state.appContext.requestInfo.userAgent = window.navigator.userAgent;\r\n    } catch (e) {\r\n      BxLogger.error(LOG_TAG3, e);\r\n    }\r\n    try {\r\n      for (let exp in FeatureGates)\r\n        state.experiments.overrideFeatureGates[exp.toLocaleLowerCase()] =\r\n          FeatureGates[exp];\r\n    } catch (e) {\r\n      BxLogger.error(LOG_TAG3, e);\r\n    }\r\n    try {\r\n      let sigls = state.xcloud.sigls;\r\n      if (STATES.userAgent.capabilities.touch) {\r\n        let customList = TouchController.getCustomList(),\r\n          siglId = \"ce573635-7c18-4d0c-9d68-90b932393470\";\r\n        if (siglId in sigls) {\r\n          let allGames = sigls[siglId].data.products;\r\n          (customList = customList.filter((id) => allGames.includes(id))),\r\n            sigls[\"9c86f07a-f3e8-45ad-82a0-a1f759597059\"]?.data.products.push(\r\n              ...customList\r\n            );\r\n        } else BxLogger.warning(LOG_TAG3, \"Sigl not found: \" + siglId);\r\n      }\r\n    } catch (e) {\r\n      BxLogger.error(LOG_TAG3, e);\r\n    }\r\n    try {\r\n      let sigls = state.xcloud.sigls;\r\n      if (BX_FLAGS.ForceNativeMkbTitles)\r\n        sigls[\"8fa264dd-124f-4af3-97e8-596fcdf4b486\"]?.data.products.push(\r\n          ...BX_FLAGS.ForceNativeMkbTitles\r\n        );\r\n    } catch (e) {\r\n      BxLogger.error(LOG_TAG3, e);\r\n    }\r\n    try {\r\n      (state.uhf.headerMode = \"Off\"), (state.uhf.footerMode = \"Off\");\r\n    } catch (e) {\r\n      BxLogger.error(LOG_TAG3, e);\r\n    }\r\n    try {\r\n      let xCloud = state.xcloud.authentication.authStatusByStrategy.XCloud;\r\n      if (xCloud.type === 3 && xCloud.error.type === \"UnsupportedMarketError\")\r\n        window.stop(),\r\n          (window.location.href = \"https://www.xbox.com/en-US/play\");\r\n    } catch (e) {\r\n      BxLogger.error(LOG_TAG3, e);\r\n    }\r\n    return state;\r\n  },\r\n  modifyTitleInfo: function (titleInfo) {\r\n    titleInfo = deepClone(titleInfo);\r\n    let supportedInputTypes = titleInfo.details.supportedInputTypes;\r\n    if (BX_FLAGS.ForceNativeMkbTitles?.includes(titleInfo.details.productId))\r\n      supportedInputTypes.push(\"MKB\");\r\n    if (getGlobalPref(\"nativeMkb.mode\") === \"off\")\r\n      supportedInputTypes = supportedInputTypes.filter((i) => i !== \"MKB\");\r\n    if (\r\n      ((titleInfo.details.hasMkbSupport = supportedInputTypes.includes(\"MKB\")),\r\n      STATES.userAgent.capabilities.touch)\r\n    ) {\r\n      let touchControllerAvailability = getGlobalPref(\"touchController.mode\");\r\n      if (\r\n        touchControllerAvailability !== \"off\" &&\r\n        getGlobalPref(\"touchController.autoOff\")\r\n      ) {\r\n        let gamepads = window.navigator.getGamepads(),\r\n          gamepadFound = !1;\r\n        for (let gamepad of gamepads)\r\n          if (gamepad && gamepad.connected) {\r\n            gamepadFound = !0;\r\n            break;\r\n          }\r\n        gamepadFound && (touchControllerAvailability = \"off\");\r\n      }\r\n      if (touchControllerAvailability === \"off\")\r\n        (supportedInputTypes = supportedInputTypes.filter(\r\n          (i) => i !== \"CustomTouchOverlay\" && i !== \"GenericTouch\"\r\n        )),\r\n          (titleInfo.details.supportedTabs = []);\r\n      if (\r\n        ((titleInfo.details.hasNativeTouchSupport =\r\n          supportedInputTypes.includes(\"NativeTouch\")),\r\n        (titleInfo.details.hasTouchSupport =\r\n          titleInfo.details.hasNativeTouchSupport ||\r\n          supportedInputTypes.includes(\"CustomTouchOverlay\") ||\r\n          supportedInputTypes.includes(\"GenericTouch\")),\r\n        !titleInfo.details.hasTouchSupport &&\r\n          touchControllerAvailability === \"all\")\r\n      )\r\n        (titleInfo.details.hasFakeTouchSupport = !0),\r\n          supportedInputTypes.push(\"GenericTouch\");\r\n    }\r\n    return (\r\n      (titleInfo.details.supportedInputTypes = supportedInputTypes),\r\n      (STATES.currentStream.titleInfo = titleInfo),\r\n      BxEventBus.Script.emit(\"titleInfo.ready\", {}),\r\n      titleInfo\r\n    );\r\n  },\r\n  setupGainNode: ($media, audioStream) => {\r\n    if ($media instanceof HTMLAudioElement)\r\n      ($media.muted = !0),\r\n        $media.addEventListener(\"playing\", (e) => {\r\n          ($media.muted = !0), $media.pause();\r\n        });\r\n    else\r\n      ($media.muted = !0),\r\n        $media.addEventListener(\"playing\", (e) => {\r\n          $media.muted = !0;\r\n        });\r\n    try {\r\n      let audioCtx = STATES.currentStream.audioContext,\r\n        source = audioCtx.createMediaStreamSource(audioStream),\r\n        gainNode = audioCtx.createGain();\r\n      source.connect(gainNode).connect(audioCtx.destination);\r\n    } catch (e) {\r\n      BxLogger.error(\"setupGainNode\", e),\r\n        (STATES.currentStream.audioGainNode = null);\r\n    }\r\n  },\r\n  handleControllerShortcut: ControllerShortcut.handle,\r\n  resetControllerShortcut: ControllerShortcut.reset,\r\n  overrideSettings: { Tv_settings: { hasCompletedOnboarding: !0 } },\r\n  disableGamepadPolling: !1,\r\n  backButtonPressed: () => {\r\n    let navigationDialogManager = NavigationDialogManager.getInstance();\r\n    if (navigationDialogManager.isShowing())\r\n      return navigationDialogManager.hide(), !0;\r\n    let dict = {\r\n      bubbles: !0,\r\n      cancelable: !0,\r\n      key: \"XF86Back\",\r\n      code: \"XF86Back\",\r\n      keyCode: 4,\r\n      which: 4,\r\n    };\r\n    return (\r\n      document.body.dispatchEvent(new KeyboardEvent(\"keydown\", dict)),\r\n      document.body.dispatchEvent(new KeyboardEvent(\"keyup\", dict)),\r\n      !1\r\n    );\r\n  },\r\n  GameSlugRegexes: [/[;,/?:@&=+_`~$%#^*()!^™\\xae\\xa9]/g, / {2,}/g, / /g],\r\n  toggleLocalCoOp(enable) {},\r\n  beforePageLoad: (page) => {\r\n    BxLogger.info(\"beforePageLoad\", page), Patcher.patchPage(page);\r\n  },\r\n  localCoOpManager: LocalCoOpManager.getInstance(),\r\n  reactCreateElement: function (...args) {},\r\n  reactUseEffect: function (...args) {},\r\n  createReactLocalCoOpIcon: (attrs) => {\r\n    let reactCE = window.BX_EXPOSED.reactCreateElement;\r\n    return reactCE(\r\n      \"svg\",\r\n      {\r\n        xmlns: \"http://www.w3.org/2000/svg\",\r\n        width: \"1em\",\r\n        height: \"1em\",\r\n        viewBox: \"0 0 32 32\",\r\n        \"fill-rule\": \"evenodd\",\r\n        \"stroke-linecap\": \"round\",\r\n        \"stroke-linejoin\": \"round\",\r\n        ...attrs,\r\n      },\r\n      reactCE(\r\n        \"g\",\r\n        null,\r\n        reactCE(\"path\", {\r\n          d: \"M24.272 11.165h-3.294l-3.14 3.564c-.391.391-.922.611-1.476.611a2.1 2.1 0 0 1-2.087-2.088 2.09 2.09 0 0 1 .031-.362l1.22-6.274a3.89 3.89 0 0 1 3.81-3.206h6.57c1.834 0 3.439 1.573 3.833 3.295l1.205 6.185a2.09 2.09 0 0 1 .031.362 2.1 2.1 0 0 1-2.087 2.088c-.554 0-1.085-.22-1.476-.611l-3.14-3.564\",\r\n          fill: \"none\",\r\n          stroke: \"#fff\",\r\n          \"stroke-width\": \"2\",\r\n        }),\r\n        reactCE(\"circle\", { cx: \"22.625\", cy: \"5.874\", r: \".879\" }),\r\n        reactCE(\"path\", {\r\n          d: \"M11.022 24.415H7.728l-3.14 3.564c-.391.391-.922.611-1.476.611a2.1 2.1 0 0 1-2.087-2.088 2.09 2.09 0 0 1 .031-.362l1.22-6.274a3.89 3.89 0 0 1 3.81-3.206h6.57c1.834 0 3.439 1.573 3.833 3.295l1.205 6.185a2.09 2.09 0 0 1 .031.362 2.1 2.1 0 0 1-2.087 2.088c-.554 0-1.085-.22-1.476-.611l-3.14-3.564\",\r\n          fill: \"none\",\r\n          stroke: \"#fff\",\r\n          \"stroke-width\": \"2\",\r\n        }),\r\n        reactCE(\"circle\", { cx: \"9.375\", cy: \"19.124\", r: \".879\" })\r\n      )\r\n    );\r\n  },\r\n};\r\nfunction localRedirect(path) {\r\n  let url = window.location.href.substring(0, 31) + path,\r\n    $pageContent = document.getElementById(\"PageContent\");\r\n  if (!$pageContent) return;\r\n  let $anchor = CE(\"a\", { href: url, class: \"bx-hidden bx-offscreen\" }, \"\");\r\n  $anchor.addEventListener(\"click\", (e) => {\r\n    window.setTimeout(() => {\r\n      $pageContent.removeChild($anchor);\r\n    }, 1000);\r\n  }),\r\n    $pageContent.appendChild($anchor),\r\n    $anchor.click();\r\n}\r\nwindow.localRedirect = localRedirect;\r\nfunction getPreferredServerRegion(shortName = !1) {\r\n  let preferredRegion = getGlobalPref(\"server.region\"),\r\n    serverRegions = STATES.serverRegions;\r\n  if (preferredRegion in serverRegions)\r\n    if (shortName && serverRegions[preferredRegion].shortName)\r\n      return serverRegions[preferredRegion].shortName;\r\n    else return preferredRegion;\r\n  for (let regionName in serverRegions) {\r\n    let region = serverRegions[regionName];\r\n    if (!region.isDefault) continue;\r\n    if (shortName && region.shortName) return region.shortName;\r\n    else return regionName;\r\n  }\r\n  return null;\r\n}\r\nclass HeaderSection {\r\n  static instance;\r\n  static getInstance = () =>\r\n    HeaderSection.instance ?? (HeaderSection.instance = new HeaderSection());\r\n  LOG_TAG = \"HeaderSection\";\r\n  $btnRemotePlay;\r\n  $btnSettings;\r\n  $buttonsWrapper;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"),\r\n      (this.$btnRemotePlay = createButton({\r\n        classes: [\"bx-header-remote-play-button\", \"bx-gone\"],\r\n        icon: BxIcon.REMOTE_PLAY,\r\n        title: t(\"remote-play\"),\r\n        style: 8 | 64 | 2048,\r\n        onClick: (e) => RemotePlayManager.getInstance()?.togglePopup(),\r\n      }));\r\n    let $btnSettings = (this.$btnSettings = createButton({\r\n      classes: [\"bx-header-settings-button\", \"bx-gone\"],\r\n      label: t(\"better-xcloud\"),\r\n      style: 16 | 32 | 64 | 256,\r\n      onClick: (e) => SettingsDialog.getInstance().show(),\r\n    }));\r\n    (this.$buttonsWrapper = CE(\r\n      \"div\",\r\n      !1,\r\n      getGlobalPref(\"xhome.enabled\") ? this.$btnRemotePlay : null,\r\n      this.$btnSettings\r\n    )),\r\n      BxEventBus.Script.on(\"xcloud.server\", ({ status }) => {\r\n        if (status === \"ready\") {\r\n          (STATES.isSignedIn = !0),\r\n            ($btnSettings.querySelector(\"span\").textContent =\r\n              getPreferredServerRegion(!0) || t(\"better-xcloud\"));\r\n          let PREF_LATEST_VERSION = getGlobalPref(\"version.latest\");\r\n          if (\r\n            !SCRIPT_VERSION.includes(\"beta\") &&\r\n            PREF_LATEST_VERSION &&\r\n            PREF_LATEST_VERSION !== SCRIPT_VERSION\r\n          )\r\n            $btnSettings.setAttribute(\"data-update-available\", \"true\");\r\n        } else if (status === \"unavailable\") {\r\n          if (\r\n            ((STATES.supportedRegion = !1),\r\n            document.querySelector(\r\n              \"div[class^=UnsupportedMarketPage-module__container]\"\r\n            ))\r\n          )\r\n            SettingsDialog.getInstance().show();\r\n        }\r\n        $btnSettings.classList.remove(\"bx-gone\");\r\n      });\r\n  }\r\n  checkHeader = () => {\r\n    let $target = document.querySelector(\r\n      \"#PageContent div[class*=EdgewaterHeader-module__rightSectionSpacing]\"\r\n    );\r\n    if (!$target)\r\n      $target = document.querySelector(\r\n        \"div[class^=UnsupportedMarketPage-module__buttons]\"\r\n      );\r\n    if (($target?.appendChild(this.$buttonsWrapper), !STATES.isSignedIn))\r\n      BxEventBus.Script.emit(\"xcloud.server\", { status: \"signed-out\" });\r\n  };\r\n  showRemotePlayButton() {\r\n    this.$btnRemotePlay?.classList.remove(\"bx-gone\");\r\n  }\r\n}\r\nclass RemotePlayDialog extends NavigationDialog {\r\n  static instance;\r\n  static getInstance = () =>\r\n    RemotePlayDialog.instance ??\r\n    (RemotePlayDialog.instance = new RemotePlayDialog());\r\n  LOG_TAG = \"RemotePlayNavigationDialog\";\r\n  STATE_LABELS = {\r\n    On: t(\"powered-on\"),\r\n    Off: t(\"powered-off\"),\r\n    ConnectedStandby: t(\"standby\"),\r\n    Unknown: t(\"unknown\"),\r\n  };\r\n  $container;\r\n  constructor() {\r\n    super();\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\"), this.setupDialog();\r\n  }\r\n  setupDialog() {\r\n    let $fragment = CE(\r\n        \"div\",\r\n        { class: \"bx-centered-dialog\" },\r\n        CE(\"div\", { class: \"bx-dialog-title\" }, CE(\"p\", !1, t(\"remote-play\")))\r\n      ),\r\n      $settingNote = CE(\"p\", {}),\r\n      currentResolution = getGlobalPref(\"xhome.video.resolution\"),\r\n      $resolutions = CE(\r\n        \"select\",\r\n        !1,\r\n        CE(\"option\", { value: \"720p\" }, \"720p\"),\r\n        CE(\"option\", { value: \"1080p\" }, \"1080p\"),\r\n        CE(\"option\", { value: \"1080p-hq\" }, \"1080p (HQ)\")\r\n      );\r\n    ($resolutions = BxSelectElement.create($resolutions)),\r\n      $resolutions.addEventListener(\"input\", (e) => {\r\n        let value = e.target.value;\r\n        ($settingNote.textContent =\r\n          value === \"1080p\"\r\n            ? \"✅ \" + t(\"can-stream-xbox-360-games\")\r\n            : \"❌ \" + t(\"cant-stream-xbox-360-games\")),\r\n          setGlobalPref(\"xhome.video.resolution\", value, \"ui\");\r\n      }),\r\n      ($resolutions.value = currentResolution),\r\n      BxEvent.dispatch($resolutions, \"input\", { manualTrigger: !0 });\r\n    let $qualitySettings = CE(\r\n      \"div\",\r\n      { class: \"bx-remote-play-settings\" },\r\n      CE(\r\n        \"div\",\r\n        !1,\r\n        CE(\"label\", !1, t(\"target-resolution\"), $settingNote),\r\n        $resolutions\r\n      )\r\n    );\r\n    $fragment.appendChild($qualitySettings);\r\n    let manager = RemotePlayManager.getInstance(),\r\n      consoles = manager.getConsoles();\r\n    for (let con of consoles) {\r\n      let $child = CE(\r\n        \"div\",\r\n        { class: \"bx-remote-play-device-wrapper\" },\r\n        CE(\r\n          \"div\",\r\n          { class: \"bx-remote-play-device-info\" },\r\n          CE(\r\n            \"div\",\r\n            !1,\r\n            CE(\"span\", { class: \"bx-remote-play-device-name\" }, con.deviceName),\r\n            CE(\r\n              \"span\",\r\n              { class: \"bx-remote-play-console-type\" },\r\n              con.consoleType.replace(\"Xbox\", \"\")\r\n            )\r\n          ),\r\n          CE(\r\n            \"div\",\r\n            { class: \"bx-remote-play-power-state\" },\r\n            this.STATE_LABELS[con.powerState]\r\n          )\r\n        ),\r\n        createButton({\r\n          classes: [\"bx-remote-play-connect-button\"],\r\n          label: t(\"console-connect\"),\r\n          style: 1 | 64,\r\n          onClick: (e) => manager.play(con.serverId),\r\n        })\r\n      );\r\n      $fragment.appendChild($child);\r\n    }\r\n    $fragment.appendChild(\r\n      CE(\r\n        \"div\",\r\n        {\r\n          class: \"bx-remote-play-buttons\",\r\n          _nearby: { orientation: \"horizontal\" },\r\n        },\r\n        createButton({\r\n          icon: BxIcon.QUESTION,\r\n          style: 8 | 64,\r\n          url: \"https://better-xcloud.github.io/remote-play\",\r\n          label: t(\"help\"),\r\n        }),\r\n        createButton({\r\n          style: 8 | 64,\r\n          label: t(\"close\"),\r\n          onClick: (e) => this.hide(),\r\n        })\r\n      )\r\n    ),\r\n      (this.$container = $fragment);\r\n  }\r\n  getDialog() {\r\n    return this;\r\n  }\r\n  getContent() {\r\n    return this.$container;\r\n  }\r\n  focusIfNeeded() {\r\n    let $btnConnect = this.$container.querySelector(\r\n      \".bx-remote-play-device-wrapper button\"\r\n    );\r\n    $btnConnect && $btnConnect.focus();\r\n  }\r\n}\r\nclass RemotePlayManager {\r\n  static instance;\r\n  static getInstance() {\r\n    if (typeof RemotePlayManager.instance === \"undefined\")\r\n      if (getGlobalPref(\"xhome.enabled\"))\r\n        RemotePlayManager.instance = new RemotePlayManager();\r\n      else RemotePlayManager.instance = null;\r\n    return RemotePlayManager.instance;\r\n  }\r\n  LOG_TAG = \"RemotePlayManager\";\r\n  isInitialized = !1;\r\n  XCLOUD_TOKEN;\r\n  XHOME_TOKEN;\r\n  consoles;\r\n  regions = [];\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n  initialize() {\r\n    if (this.isInitialized) return;\r\n    (this.isInitialized = !0),\r\n      this.requestXhomeToken(() => {\r\n        this.getConsolesList(() => {\r\n          BxLogger.info(this.LOG_TAG, \"Consoles\", this.consoles),\r\n            STATES.supportedRegion &&\r\n              HeaderSection.getInstance().showRemotePlayButton(),\r\n            BxEvent.dispatch(window, BxEvent.REMOTE_PLAY_READY);\r\n        });\r\n      });\r\n  }\r\n  getXcloudToken() {\r\n    return this.XCLOUD_TOKEN;\r\n  }\r\n  setXcloudToken(token) {\r\n    this.XCLOUD_TOKEN = token;\r\n  }\r\n  getXhomeToken() {\r\n    return this.XHOME_TOKEN;\r\n  }\r\n  getConsoles() {\r\n    return this.consoles;\r\n  }\r\n  requestXhomeToken(callback) {\r\n    if (this.XHOME_TOKEN) {\r\n      callback();\r\n      return;\r\n    }\r\n    let GSSV_TOKEN;\r\n    try {\r\n      GSSV_TOKEN = JSON.parse(localStorage.getItem(\"xboxcom_xbl_user_info\"))\r\n        .tokens[\"http://gssv.xboxlive.com/\"].token;\r\n    } catch (e) {\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        let key = localStorage.key(i);\r\n        if (!key.startsWith(\"Auth.User.\")) continue;\r\n        let json = JSON.parse(localStorage.getItem(key));\r\n        for (let token of json.tokens) {\r\n          if (!token.relyingParty.includes(\"gssv.xboxlive.com\")) continue;\r\n          GSSV_TOKEN = token.tokenData.token;\r\n          break;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    let request = new Request(\r\n      \"https://xhome.gssv-play-prod.xboxlive.com/v2/login/user\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ offeringId: \"xhome\", token: GSSV_TOKEN }),\r\n        headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\r\n      }\r\n    );\r\n    fetch(request)\r\n      .then((resp) => resp.json())\r\n      .then((json) => {\r\n        (this.regions = json.offeringSettings.regions),\r\n          (this.XHOME_TOKEN = json.gsToken),\r\n          callback();\r\n      });\r\n  }\r\n  async getConsolesList(callback) {\r\n    if (this.consoles) {\r\n      callback();\r\n      return;\r\n    }\r\n    let options = {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${this.XHOME_TOKEN}` },\r\n    };\r\n    for (let region of this.regions)\r\n      try {\r\n        let request = new Request(\r\n            `${region.baseUri}/v6/servers/home?mr=50`,\r\n            options\r\n          ),\r\n          json = await (await fetch(request)).json();\r\n        if (json.results.length === 0) continue;\r\n        (this.consoles = json.results),\r\n          (STATES.remotePlay.server = region.baseUri);\r\n        break;\r\n      } catch (e) {}\r\n    if (!STATES.remotePlay.server) this.consoles = [];\r\n    callback();\r\n  }\r\n  play(serverId, resolution) {\r\n    if (resolution) setGlobalPref(\"xhome.video.resolution\", resolution, \"ui\");\r\n    (STATES.remotePlay.config = { serverId }),\r\n      (window.BX_REMOTE_PLAY_CONFIG = STATES.remotePlay.config),\r\n      localRedirect(\"/launch/fortnite/BT5P2X999VH2#remote-play\"),\r\n      setTimeout(() => localRedirect(\"/consoles/launch/\" + serverId), 100);\r\n  }\r\n  togglePopup(force = null) {\r\n    if (!this.isReady()) {\r\n      Toast.show(t(\"getting-consoles-list\"));\r\n      return;\r\n    }\r\n    if (this.consoles.length === 0) {\r\n      Toast.show(t(\"no-consoles-found\"), \"\", { instant: !0 });\r\n      return;\r\n    }\r\n    RemotePlayDialog.getInstance().show();\r\n  }\r\n  static detect() {\r\n    if (!getGlobalPref(\"xhome.enabled\")) return;\r\n    if (\r\n      ((STATES.remotePlay.isPlaying =\r\n        window.location.pathname.includes(\"/launch/\") &&\r\n        window.location.hash.startsWith(\"#remote-play\")),\r\n      STATES.remotePlay?.isPlaying)\r\n    )\r\n      (window.BX_REMOTE_PLAY_CONFIG = STATES.remotePlay.config),\r\n        window.history.replaceState(\r\n          { origin: \"better-xcloud\" },\r\n          \"\",\r\n          \"https://www.xbox.com/\" + location.pathname.substring(1, 6) + \"/play\"\r\n        );\r\n    else window.BX_REMOTE_PLAY_CONFIG = null;\r\n  }\r\n  isReady() {\r\n    return this.consoles !== null;\r\n  }\r\n}\r\nclass XhomeInterceptor {\r\n  static consoleAddrs = {};\r\n  static async handleLogin(request) {\r\n    try {\r\n      let obj = await request.clone().json();\r\n      (obj.offeringId = \"xhome\"),\r\n        (request = new Request(\r\n          \"https://xhome.gssv-play-prod.xboxlive.com/v2/login/user\",\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(obj),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n          }\r\n        ));\r\n    } catch (e) {\r\n      alert(e), console.log(e);\r\n    }\r\n    return NATIVE_FETCH(request);\r\n  }\r\n  static async handleConfiguration(request) {\r\n    BxEventBus.Stream.emit(\"state.starting\", {});\r\n    let response = await NATIVE_FETCH(request),\r\n      obj = await response.clone().json(),\r\n      serverDetails = obj.serverDetails,\r\n      pairs = [\r\n        [\"ipAddress\", \"port\"],\r\n        [\"ipV4Address\", \"ipV4Port\"],\r\n        [\"ipV6Address\", \"ipV6Port\"],\r\n      ];\r\n    XhomeInterceptor.consoleAddrs = {};\r\n    for (let pair of pairs) {\r\n      let [keyAddr, keyPort] = pair;\r\n      if (keyAddr && keyPort && serverDetails[keyAddr]) {\r\n        let port = serverDetails[keyPort],\r\n          ports = new Set();\r\n        port && ports.add(port),\r\n          ports.add(9002),\r\n          (XhomeInterceptor.consoleAddrs[serverDetails[keyAddr]] =\r\n            Array.from(ports));\r\n      }\r\n    }\r\n    return (\r\n      (response.json = () => Promise.resolve(obj)),\r\n      (response.text = () => Promise.resolve(JSON.stringify(obj))),\r\n      response\r\n    );\r\n  }\r\n  static async handleInputConfigs(request, opts) {\r\n    let response = await NATIVE_FETCH(request);\r\n    if (getGlobalPref(\"touchController.mode\") !== \"all\") return response;\r\n    let obj = await response.clone().json(),\r\n      xboxTitleId = JSON.parse(opts.body).titleIds[0];\r\n    TouchController.setXboxTitleId(xboxTitleId);\r\n    let inputConfigs = obj[0],\r\n      hasTouchSupport = inputConfigs.supportedTabs.length > 0;\r\n    if (!hasTouchSupport) {\r\n      let supportedInputTypes = inputConfigs.supportedInputTypes;\r\n      hasTouchSupport =\r\n        supportedInputTypes.includes(\"NativeTouch\") ||\r\n        supportedInputTypes.includes(\"CustomTouchOverlay\");\r\n    }\r\n    if (hasTouchSupport)\r\n      TouchController.disable(),\r\n        BxEvent.dispatch(window, BxEvent.CUSTOM_TOUCH_LAYOUTS_LOADED, {\r\n          data: null,\r\n        });\r\n    else TouchController.enable(), TouchController.requestCustomLayouts();\r\n    return (\r\n      (response.json = () => Promise.resolve(obj)),\r\n      (response.text = () => Promise.resolve(JSON.stringify(obj))),\r\n      response\r\n    );\r\n  }\r\n  static async handleTitles(request) {\r\n    let clone = request.clone(),\r\n      headers = {};\r\n    for (let pair of clone.headers.entries()) headers[pair[0]] = pair[1];\r\n    headers.authorization = `Bearer ${RemotePlayManager.getInstance().getXcloudToken()}`;\r\n    let index = request.url.indexOf(\".xboxlive.com\");\r\n    return (\r\n      (request = new Request(\r\n        \"https://wus.core.gssv-play-prod\" + request.url.substring(index),\r\n        { method: clone.method, body: await clone.text(), headers }\r\n      )),\r\n      NATIVE_FETCH(request)\r\n    );\r\n  }\r\n  static async handlePlay(request) {\r\n    BxEventBus.Stream.emit(\"state.loading\", {});\r\n    let body = await request.clone().json(),\r\n      newRequest = new Request(request, { body: JSON.stringify(body) });\r\n    return NATIVE_FETCH(newRequest);\r\n  }\r\n  static async handle(request) {\r\n    TouchController.disable();\r\n    let clone = request.clone(),\r\n      headers = {};\r\n    for (let pair of clone.headers.entries()) headers[pair[0]] = pair[1];\r\n    headers.authorization = `Bearer ${RemotePlayManager.getInstance().getXhomeToken()}`;\r\n    let osName = getOsNameFromResolution(\r\n      getGlobalPref(\"xhome.video.resolution\")\r\n    );\r\n    headers[\"x-ms-device-info\"] = JSON.stringify(generateMsDeviceInfo(osName));\r\n    let opts = { method: clone.method, headers };\r\n    if (clone.method === \"POST\") opts.body = await clone.text();\r\n    let url = request.url;\r\n    if (!url.includes(\"/servers/home\")) {\r\n      let parsed = new URL(url);\r\n      url = STATES.remotePlay.server + parsed.pathname;\r\n    }\r\n    if (((request = new Request(url, opts)), url.includes(\"/configuration\")))\r\n      return XhomeInterceptor.handleConfiguration(request);\r\n    else if (url.endsWith(\"/sessions/home/play\"))\r\n      return XhomeInterceptor.handlePlay(request);\r\n    else if (url.includes(\"inputconfigs\"))\r\n      return XhomeInterceptor.handleInputConfigs(request, opts);\r\n    else if (url.includes(\"/login/user\"))\r\n      return XhomeInterceptor.handleLogin(request);\r\n    else if (url.endsWith(\"/titles\"))\r\n      return XhomeInterceptor.handleTitles(request);\r\n    else if (\r\n      url &&\r\n      url.endsWith(\"/ice\") &&\r\n      url.includes(\"/sessions/\") &&\r\n      request.method === \"GET\"\r\n    )\r\n      return patchIceCandidates(request, XhomeInterceptor.consoleAddrs);\r\n    return await NATIVE_FETCH(request);\r\n  }\r\n}\r\nclass LoadingScreen {\r\n  static $bgStyle;\r\n  static $waitTimeBox;\r\n  static waitTimeInterval = null;\r\n  static orgWebTitle;\r\n  static secondsToString(seconds) {\r\n    let m = Math.floor(seconds / 60),\r\n      s = Math.floor(seconds % 60),\r\n      mDisplay = m > 0 ? `${m}m` : \"\",\r\n      sDisplay = `${s}s`.padStart(s >= 0 ? 3 : 4, \"0\");\r\n    return mDisplay + sDisplay;\r\n  }\r\n  static setup() {\r\n    let titleInfo = STATES.currentStream.titleInfo;\r\n    if (!titleInfo) return;\r\n    if (!LoadingScreen.$bgStyle) {\r\n      let $bgStyle = CE(\"style\");\r\n      document.documentElement.appendChild($bgStyle),\r\n        (LoadingScreen.$bgStyle = $bgStyle);\r\n    }\r\n    if (titleInfo.productInfo)\r\n      LoadingScreen.setBackground(\r\n        titleInfo.productInfo.heroImageUrl ||\r\n          titleInfo.productInfo.titledHeroImageUrl ||\r\n          titleInfo.productInfo.tileImageUrl\r\n      );\r\n    if (getGlobalPref(\"loadingScreen.rocket\") === \"hide\")\r\n      LoadingScreen.hideRocket();\r\n  }\r\n  static hideRocket() {\r\n    let $bgStyle = LoadingScreen.$bgStyle;\r\n    $bgStyle.textContent +=\r\n      \"#game-stream div[class*=RocketAnimation-module__container] > svg{display:none}#game-stream video[class*=RocketAnimationVideo-module__video]{display:none}\";\r\n  }\r\n  static setBackground(imageUrl) {\r\n    let $bgStyle = LoadingScreen.$bgStyle;\r\n    imageUrl = imageUrl + \"?w=1920\";\r\n    let imageQuality = getGlobalPref(\"ui.imageQuality\");\r\n    if (imageQuality !== 90) imageUrl += \"&q=\" + imageQuality;\r\n    $bgStyle.textContent +=\r\n      '#game-stream{background-color:transparent !important;background-position:center center !important;background-repeat:no-repeat !important;background-size:cover !important}#game-stream rect[width=\"800\"]{transition:opacity .3s ease-in-out !important}' +\r\n      `#game-stream {background-image: linear-gradient(#00000033, #000000e6), url(${imageUrl}) !important;}`;\r\n    let bg = new Image();\r\n    (bg.onload = (e) => {\r\n      $bgStyle.textContent +=\r\n        '#game-stream rect[width=\"800\"]{opacity:0 !important}';\r\n    }),\r\n      (bg.src = imageUrl);\r\n  }\r\n  static setupWaitTime(waitTime) {\r\n    if (getGlobalPref(\"loadingScreen.rocket\") === \"hide-queue\")\r\n      LoadingScreen.hideRocket();\r\n    let secondsLeft = waitTime,\r\n      $countDown,\r\n      $estimated;\r\n    LoadingScreen.orgWebTitle = document.title;\r\n    let endDate = new Date(),\r\n      timeZoneOffsetSeconds = endDate.getTimezoneOffset() * 60;\r\n    endDate.setSeconds(endDate.getSeconds() + waitTime - timeZoneOffsetSeconds);\r\n    let endDateStr = endDate.toISOString().slice(0, 19);\r\n    (endDateStr =\r\n      endDateStr.substring(0, 10) + \" \" + endDateStr.substring(11, 19)),\r\n      (endDateStr += ` (${LoadingScreen.secondsToString(waitTime)})`);\r\n    let $waitTimeBox = LoadingScreen.$waitTimeBox;\r\n    if (!$waitTimeBox)\r\n      ($waitTimeBox = CE(\r\n        \"div\",\r\n        { class: \"bx-wait-time-box\" },\r\n        CE(\"label\", !1, t(\"server\")),\r\n        CE(\"span\", !1, getPreferredServerRegion()),\r\n        CE(\"label\", !1, t(\"wait-time-estimated\")),\r\n        ($estimated = CE(\"span\", {})),\r\n        CE(\"label\", !1, t(\"wait-time-countdown\")),\r\n        ($countDown = CE(\"span\", {}))\r\n      )),\r\n        document.documentElement.appendChild($waitTimeBox),\r\n        (LoadingScreen.$waitTimeBox = $waitTimeBox);\r\n    else\r\n      $waitTimeBox.classList.remove(\"bx-gone\"),\r\n        ($estimated = $waitTimeBox.querySelector(\".bx-wait-time-estimated\")),\r\n        ($countDown = $waitTimeBox.querySelector(\".bx-wait-time-countdown\"));\r\n    ($estimated.textContent = endDateStr),\r\n      ($countDown.textContent = LoadingScreen.secondsToString(secondsLeft)),\r\n      (document.title = `[${$countDown.textContent}] ${LoadingScreen.orgWebTitle}`),\r\n      (LoadingScreen.waitTimeInterval = window.setInterval(() => {\r\n        if (\r\n          (secondsLeft--,\r\n          ($countDown.textContent = LoadingScreen.secondsToString(secondsLeft)),\r\n          (document.title = `[${$countDown.textContent}] ${LoadingScreen.orgWebTitle}`),\r\n          secondsLeft <= 0)\r\n        )\r\n          LoadingScreen.waitTimeInterval &&\r\n            clearInterval(LoadingScreen.waitTimeInterval),\r\n            (LoadingScreen.waitTimeInterval = null);\r\n      }, 1000));\r\n  }\r\n  static hide() {\r\n    if (\r\n      (LoadingScreen.orgWebTitle &&\r\n        (document.title = LoadingScreen.orgWebTitle),\r\n      LoadingScreen.$waitTimeBox &&\r\n        LoadingScreen.$waitTimeBox.classList.add(\"bx-gone\"),\r\n      getGlobalPref(\"loadingScreen.gameArt.show\") && LoadingScreen.$bgStyle)\r\n    ) {\r\n      let $rocketBg = document.querySelector('#game-stream rect[width=\"800\"]');\r\n      $rocketBg &&\r\n        $rocketBg.addEventListener(\"transitionend\", (e) => {\r\n          LoadingScreen.$bgStyle.textContent +=\r\n            \"#game-stream{background:#000 !important}\";\r\n        }),\r\n        (LoadingScreen.$bgStyle.textContent +=\r\n          '#game-stream rect[width=\"800\"]{opacity:1 !important}');\r\n    }\r\n    setTimeout(LoadingScreen.reset, 2000);\r\n  }\r\n  static reset() {\r\n    LoadingScreen.$bgStyle && (LoadingScreen.$bgStyle.textContent = \"\"),\r\n      LoadingScreen.$waitTimeBox &&\r\n        LoadingScreen.$waitTimeBox.classList.add(\"bx-gone\"),\r\n      LoadingScreen.waitTimeInterval &&\r\n        clearInterval(LoadingScreen.waitTimeInterval),\r\n      (LoadingScreen.waitTimeInterval = null);\r\n  }\r\n}\r\nclass GuideMenu {\r\n  static instance;\r\n  static getInstance = () =>\r\n    GuideMenu.instance ?? (GuideMenu.instance = new GuideMenu());\r\n  $renderedButtons;\r\n  closeGuideMenu() {\r\n    if (window.BX_EXPOSED.dialogRoutes) {\r\n      window.BX_EXPOSED.dialogRoutes.closeAll();\r\n      return;\r\n    }\r\n    let $btnClose = document.querySelector(\r\n      \"#gamepass-dialog-root button[class^=Header-module__closeButton]\"\r\n    );\r\n    $btnClose && $btnClose.click();\r\n  }\r\n  renderButtons() {\r\n    if (this.$renderedButtons) return this.$renderedButtons;\r\n    let buttons = {\r\n        scriptSettings: createButton({\r\n          label: t(\"better-xcloud\"),\r\n          icon: BxIcon.BETTER_XCLOUD,\r\n          style: 128 | 64 | 1,\r\n          onClick: () => {\r\n            BxEventBus.Script.once(\"dialog.dismissed\", () => {\r\n              setTimeout(() => SettingsDialog.getInstance().show(), 50);\r\n            }),\r\n              this.closeGuideMenu();\r\n          },\r\n        }),\r\n        closeApp:\r\n          AppInterface &&\r\n          createButton({\r\n            icon: BxIcon.POWER,\r\n            label: t(\"close-app\"),\r\n            title: t(\"close-app\"),\r\n            style: 128 | 64 | 4,\r\n            onClick: (e) => {\r\n              AppInterface.closeApp();\r\n            },\r\n            attributes: { \"data-state\": \"normal\" },\r\n          }),\r\n        reloadPage: createButton({\r\n          icon: BxIcon.REFRESH,\r\n          label: t(\"reload-page\"),\r\n          title: t(\"reload-page\"),\r\n          style: 128 | 64,\r\n          onClick: () => {\r\n            if ((this.closeGuideMenu(), STATES.isPlaying))\r\n              confirm(t(\"confirm-reload-stream\")) && window.location.reload();\r\n            else window.location.reload();\r\n          },\r\n        }),\r\n        backToHome: createButton({\r\n          icon: BxIcon.HOME,\r\n          label: t(\"back-to-home\"),\r\n          title: t(\"back-to-home\"),\r\n          style: 128 | 64,\r\n          onClick: () => {\r\n            this.closeGuideMenu(),\r\n              confirm(t(\"back-to-home-confirm\")) &&\r\n                (window.location.href = window.location.href.substring(0, 31));\r\n          },\r\n          attributes: { \"data-state\": \"playing\" },\r\n        }),\r\n      },\r\n      buttonsLayout = [\r\n        buttons.scriptSettings,\r\n        [buttons.backToHome, buttons.reloadPage, buttons.closeApp],\r\n      ],\r\n      $div = CE(\"div\", { class: \"bx-guide-home-buttons\" });\r\n    if (STATES.userAgent.isTv || getGlobalPref(\"ui.layout\") === \"tv\")\r\n      document.body.dataset.bxMediaType = \"tv\";\r\n    for (let $button of buttonsLayout) {\r\n      if (!$button) continue;\r\n      if ($button instanceof HTMLElement) $div.appendChild($button);\r\n      else if (Array.isArray($button)) {\r\n        let $wrapper = CE(\"div\", {});\r\n        for (let $child of $button) $child && $wrapper.appendChild($child);\r\n        $div.appendChild($wrapper);\r\n      }\r\n    }\r\n    return (this.$renderedButtons = $div), $div;\r\n  }\r\n  injectHome($root, isPlaying = !1) {\r\n    let $buttons = this.renderButtons();\r\n    if ($root.contains($buttons)) return;\r\n    let $target = null;\r\n    if (isPlaying) {\r\n      $target = $root.querySelector(\"a[class*=QuitGameButton]\");\r\n      let $btnXcloudHome = $root.querySelector(\r\n        \"div[class^=HomeButtonWithDivider]\"\r\n      );\r\n      $btnXcloudHome && ($btnXcloudHome.style.display = \"none\");\r\n    } else {\r\n      let $dividers = $root.querySelectorAll(\r\n        \"div[class*=Divider-module__divider]\"\r\n      );\r\n      if ($dividers) $target = $dividers[$dividers.length - 1];\r\n    }\r\n    if (!$target) return !1;\r\n    ($buttons.dataset.isPlaying = isPlaying.toString()),\r\n      $target.insertAdjacentElement(\"afterend\", $buttons);\r\n  }\r\n}\r\nclass StreamBadges {\r\n  static instance;\r\n  static getInstance = () =>\r\n    StreamBadges.instance ?? (StreamBadges.instance = new StreamBadges());\r\n  LOG_TAG = \"StreamBadges\";\r\n  serverInfo = {};\r\n  badges = {\r\n    playtime: { name: t(\"playtime\"), icon: BxIcon.PLAYTIME, color: \"#ff004d\" },\r\n    battery: { name: t(\"battery\"), icon: BxIcon.BATTERY, color: \"#00b543\" },\r\n    download: { name: t(\"download\"), icon: BxIcon.DOWNLOAD, color: \"#29adff\" },\r\n    upload: { name: t(\"upload\"), icon: BxIcon.UPLOAD, color: \"#ff77a8\" },\r\n    server: { name: t(\"server\"), icon: BxIcon.SERVER, color: \"#ff6c24\" },\r\n    video: { name: t(\"video\"), icon: BxIcon.DISPLAY, color: \"#742f29\" },\r\n    audio: { name: t(\"audio\"), icon: BxIcon.AUDIO, color: \"#5f574f\" },\r\n  };\r\n  $container;\r\n  intervalId;\r\n  REFRESH_INTERVAL = 3000;\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n  setRegion(region) {\r\n    this.serverInfo.server = { region };\r\n  }\r\n  renderBadge(name, value) {\r\n    let badgeInfo = this.badges[name],\r\n      $badge;\r\n    if (badgeInfo.$element)\r\n      return (\r\n        ($badge = badgeInfo.$element),\r\n        ($badge.lastElementChild.textContent = value),\r\n        $badge\r\n      );\r\n    if (\r\n      (($badge = CE(\r\n        \"div\",\r\n        { class: \"bx-badge\", title: badgeInfo.name },\r\n        CE(\"span\", { class: \"bx-badge-name\" }, createSvgIcon(badgeInfo.icon)),\r\n        CE(\r\n          \"span\",\r\n          {\r\n            class: \"bx-badge-value\",\r\n            style: `background-color: ${badgeInfo.color}`,\r\n          },\r\n          value\r\n        )\r\n      )),\r\n      name === \"battery\")\r\n    )\r\n      $badge.classList.add(\"bx-badge-battery\");\r\n    return (this.badges[name].$element = $badge), $badge;\r\n  }\r\n  updateBadges = async (forceUpdate = !1) => {\r\n    if (!this.$container || (!forceUpdate && !this.$container.isConnected)) {\r\n      this.stop();\r\n      return;\r\n    }\r\n    let statsCollector = StreamStatsCollector.getInstance();\r\n    await statsCollector.collect();\r\n    let play = statsCollector.getStat(\"play\"),\r\n      batt = statsCollector.getStat(\"batt\"),\r\n      dl = statsCollector.getStat(\"dl\"),\r\n      ul = statsCollector.getStat(\"ul\"),\r\n      badges = {\r\n        download: dl.toString(),\r\n        upload: ul.toString(),\r\n        playtime: play.toString(),\r\n        battery: batt.toString(),\r\n      },\r\n      name;\r\n    for (name in badges) {\r\n      let value = badges[name];\r\n      if (value === null) continue;\r\n      let $elm = this.badges[name].$element;\r\n      if (!$elm) continue;\r\n      if ((($elm.lastElementChild.textContent = value), name === \"battery\"))\r\n        if (batt.current === 100 && batt.start === 100)\r\n          $elm.classList.add(\"bx-gone\");\r\n        else\r\n          ($elm.dataset.charging = batt.isCharging.toString()),\r\n            $elm.classList.remove(\"bx-gone\");\r\n    }\r\n  };\r\n  async start() {\r\n    await this.updateBadges(!0),\r\n      this.stop(),\r\n      (this.intervalId = window.setInterval(\r\n        this.updateBadges,\r\n        this.REFRESH_INTERVAL\r\n      ));\r\n  }\r\n  stop() {\r\n    this.intervalId && clearInterval(this.intervalId), (this.intervalId = null);\r\n  }\r\n  destroy() {\r\n    (this.serverInfo = {}), delete this.$container;\r\n  }\r\n  async render() {\r\n    if (this.$container) return this.start(), this.$container;\r\n    await this.getServerStats();\r\n    let batteryLevel = \"\";\r\n    if (STATES.browser.capabilities.batteryApi) batteryLevel = \"100%\";\r\n    let BADGES = [\r\n        [\"playtime\", \"1m\"],\r\n        [\"battery\", batteryLevel],\r\n        [\"download\", humanFileSize(0)],\r\n        [\"upload\", humanFileSize(0)],\r\n        this.badges.server.$element ?? [\"server\", \"?\"],\r\n        this.serverInfo.video ? this.badges.video.$element : [\"video\", \"?\"],\r\n        this.serverInfo.audio ? this.badges.audio.$element : [\"audio\", \"?\"],\r\n      ],\r\n      $container = CE(\"div\", { class: \"bx-badges\" });\r\n    for (let item2 of BADGES) {\r\n      if (!item2) continue;\r\n      let $badge;\r\n      if (!(item2 instanceof HTMLElement)) $badge = this.renderBadge(...item2);\r\n      else $badge = item2;\r\n      $container.appendChild($badge);\r\n    }\r\n    return (this.$container = $container), await this.start(), $container;\r\n  }\r\n  async getServerStats() {\r\n    let stats = await STATES.currentStream.peerConnection.getStats(),\r\n      allVideoCodecs = {},\r\n      videoCodecId,\r\n      videoWidth = 0,\r\n      videoHeight = 0,\r\n      allAudioCodecs = {},\r\n      audioCodecId,\r\n      allCandidatePairs = {},\r\n      allRemoteCandidates = {},\r\n      candidatePairId;\r\n    if (\r\n      (stats.forEach((stat) => {\r\n        if (stat.type === \"codec\") {\r\n          let mimeType = stat.mimeType.split(\"/\")[0];\r\n          if (mimeType === \"video\") allVideoCodecs[stat.id] = stat;\r\n          else if (mimeType === \"audio\") allAudioCodecs[stat.id] = stat;\r\n        } else if (stat.type === \"inbound-rtp\" && stat.packetsReceived > 0) {\r\n          if (stat.kind === \"video\")\r\n            (videoCodecId = stat.codecId),\r\n              (videoWidth = stat.frameWidth),\r\n              (videoHeight = stat.frameHeight);\r\n          else if (stat.kind === \"audio\") audioCodecId = stat.codecId;\r\n        } else if (stat.type === \"transport\" && stat.selectedCandidatePairId)\r\n          candidatePairId = stat.selectedCandidatePairId;\r\n        else if (stat.type === \"candidate-pair\")\r\n          allCandidatePairs[stat.id] = stat.remoteCandidateId;\r\n        else if (stat.type === \"remote-candidate\")\r\n          allRemoteCandidates[stat.id] = stat.address;\r\n      }),\r\n      videoCodecId)\r\n    ) {\r\n      let videoStat = allVideoCodecs[videoCodecId],\r\n        video = {\r\n          width: videoWidth,\r\n          height: videoHeight,\r\n          codec: videoStat.mimeType.substring(6),\r\n        };\r\n      if (video.codec === \"H264\") {\r\n        let match = /profile-level-id=([0-9a-f]{6})/.exec(\r\n          videoStat.sdpFmtpLine\r\n        );\r\n        match && (video.profile = match[1]);\r\n      }\r\n      let text = videoHeight + \"p\";\r\n      if ((text && (text += \"/\"), (text += video.codec), video.profile)) {\r\n        let profile = video.profile,\r\n          quality = profile;\r\n        if (profile.startsWith(\"4d\")) quality = t(\"visual-quality-high\");\r\n        else if (profile.startsWith(\"42e\"))\r\n          quality = t(\"visual-quality-normal\");\r\n        else if (profile.startsWith(\"420\")) quality = t(\"visual-quality-low\");\r\n        text += ` (${quality})`;\r\n      }\r\n      (this.badges.video.$element = this.renderBadge(\"video\", text)),\r\n        (this.serverInfo.video = video);\r\n    }\r\n    if (audioCodecId) {\r\n      let audioStat = allAudioCodecs[audioCodecId],\r\n        audio = {\r\n          codec: audioStat.mimeType.substring(6),\r\n          bitrate: audioStat.clockRate,\r\n        },\r\n        bitrate = audio.bitrate / 1000,\r\n        text = `${audio.codec} (${bitrate} kHz)`;\r\n      (this.badges.audio.$element = this.renderBadge(\"audio\", text)),\r\n        (this.serverInfo.audio = audio);\r\n    }\r\n    if (candidatePairId) {\r\n      BxLogger.info(\"candidate\", candidatePairId, allCandidatePairs);\r\n      let text = \"\",\r\n        isIpv6 =\r\n          allRemoteCandidates[allCandidatePairs[candidatePairId]].includes(\":\"),\r\n        server = this.serverInfo.server;\r\n      if (server && server.region) text += server.region;\r\n      (text += \"@\" + (isIpv6 ? \"IPv6\" : \"IPv4\")),\r\n        (this.badges.server.$element = this.renderBadge(\"server\", text));\r\n    }\r\n  }\r\n  static setupEvents() {}\r\n}\r\nclass XcloudInterceptor {\r\n  static SERVER_EXTRA_INFO = {\r\n    EastUS: [\"🇺🇸\", \"america-north\"],\r\n    EastUS2: [\"🇺🇸\", \"america-north\"],\r\n    NorthCentralUs: [\"🇺🇸\", \"america-north\"],\r\n    SouthCentralUS: [\"🇺🇸\", \"america-north\"],\r\n    WestUS: [\"🇺🇸\", \"america-north\"],\r\n    WestUS2: [\"🇺🇸\", \"america-north\"],\r\n    MexicoCentral: [\"🇲🇽\", \"america-north\"],\r\n    BrazilSouth: [\"🇧🇷\", \"america-south\"],\r\n    JapanEast: [\"🇯🇵\", \"asia\"],\r\n    KoreaCentral: [\"🇰🇷\", \"asia\"],\r\n    AustraliaEast: [\"🇦🇺\", \"australia\"],\r\n    AustraliaSouthEast: [\"🇦🇺\", \"australia\"],\r\n    SwedenCentral: [\"🇸🇪\", \"europe\"],\r\n    UKSouth: [\"🇬🇧\", \"europe\"],\r\n    WestEurope: [\"🇪🇺\", \"europe\"],\r\n  };\r\n  static async handleLogin(request, init) {\r\n    let bypassServer = getGlobalPref(\"server.bypassRestriction\");\r\n    if (bypassServer !== \"off\") {\r\n      let ip = BypassServerIps[bypassServer];\r\n      ip && request.headers.set(\"X-Forwarded-For\", ip);\r\n    }\r\n    let response = await NATIVE_FETCH(request, init);\r\n    if (response.status !== 200)\r\n      return (\r\n        BxEventBus.Script.emit(\"xcloud.server\", { status: \"unavailable\" }),\r\n        response\r\n      );\r\n    let obj = await response.clone().json();\r\n    RemotePlayManager.getInstance()?.setXcloudToken(obj.gsToken);\r\n    let serverRegex = /\\/\\/(\\w+)\\./,\r\n      serverExtra = XcloudInterceptor.SERVER_EXTRA_INFO,\r\n      region;\r\n    for (region of obj.offeringSettings.regions) {\r\n      let { name: regionName, name: shortName } = region;\r\n      if (region.isDefault) STATES.selectedRegion = Object.assign({}, region);\r\n      let match = serverRegex.exec(region.baseUri);\r\n      if (match)\r\n        if (((shortName = match[1]), serverExtra[regionName]))\r\n          (shortName = serverExtra[regionName][0] + \" \" + shortName),\r\n            (region.contintent = serverExtra[regionName][1]);\r\n        else\r\n          (region.contintent = \"other\"),\r\n            BX_FLAGS.Debug && alert(\"New server: \" + shortName);\r\n      (region.shortName = shortName.toUpperCase()),\r\n        (STATES.serverRegions[region.name] = Object.assign({}, region));\r\n    }\r\n    let preferredRegion = getPreferredServerRegion();\r\n    if (preferredRegion && preferredRegion in STATES.serverRegions) {\r\n      let tmp = Object.assign({}, STATES.serverRegions[preferredRegion]);\r\n      (tmp.isDefault = !0),\r\n        (obj.offeringSettings.regions = [tmp]),\r\n        (STATES.selectedRegion = tmp);\r\n    }\r\n    return (\r\n      (STATES.gsToken = obj.gsToken),\r\n      BxEventBus.Script.emit(\"xcloud.server\", { status: \"ready\" }),\r\n      (response.json = () => Promise.resolve(obj)),\r\n      response\r\n    );\r\n  }\r\n  static async handlePlay(request, init) {\r\n    BxEventBus.Stream.emit(\"state.loading\", {});\r\n    let PREF_STREAM_TARGET_RESOLUTION = getGlobalPref(\r\n        \"stream.video.resolution\"\r\n      ),\r\n      PREF_STREAM_PREFERRED_LOCALE = getGlobalPref(\"stream.locale\"),\r\n      url = typeof request === \"string\" ? request : request.url,\r\n      parsedUrl = new URL(url),\r\n      badgeRegion = parsedUrl.host.split(\".\", 1)[0];\r\n    for (let regionName in STATES.serverRegions) {\r\n      let region = STATES.serverRegions[regionName];\r\n      if (region && parsedUrl.origin === region.baseUri) {\r\n        badgeRegion = regionName;\r\n        break;\r\n      }\r\n    }\r\n    StreamBadges.getInstance().setRegion(badgeRegion);\r\n    let clone = request.clone(),\r\n      body = await clone.json(),\r\n      headers = {};\r\n    for (let pair of clone.headers.entries()) headers[pair[0]] = pair[1];\r\n    if (PREF_STREAM_TARGET_RESOLUTION !== \"auto\") {\r\n      let osName = getOsNameFromResolution(PREF_STREAM_TARGET_RESOLUTION);\r\n      (headers[\"x-ms-device-info\"] = JSON.stringify(\r\n        generateMsDeviceInfo(osName)\r\n      )),\r\n        (body.settings.osName = osName);\r\n    }\r\n    if (PREF_STREAM_PREFERRED_LOCALE !== \"default\")\r\n      body.settings.locale = PREF_STREAM_PREFERRED_LOCALE;\r\n    let newRequest = new Request(request, {\r\n      body: JSON.stringify(body),\r\n      headers,\r\n    });\r\n    return NATIVE_FETCH(newRequest);\r\n  }\r\n  static async handleWaitTime(request, init) {\r\n    let response = await NATIVE_FETCH(request, init);\r\n    if (getGlobalPref(\"loadingScreen.waitTime.show\")) {\r\n      let json = await response.clone().json();\r\n      if (json.estimatedAllocationTimeInSeconds > 0)\r\n        LoadingScreen.setupWaitTime(json.estimatedTotalWaitTimeInSeconds);\r\n    }\r\n    return response;\r\n  }\r\n  static async handleConfiguration(request, init) {\r\n    if (request.method !== \"GET\") return NATIVE_FETCH(request, init);\r\n    if (getGlobalPref(\"touchController.mode\") === \"all\")\r\n      if (STATES.currentStream.titleInfo?.details.hasTouchSupport)\r\n        TouchController.disable();\r\n      else TouchController.enable();\r\n    let response = await NATIVE_FETCH(request, init),\r\n      text = await response.clone().text();\r\n    if (!text.length) return response;\r\n    BxEventBus.Stream.emit(\"state.starting\", {});\r\n    let obj = JSON.parse(text),\r\n      overrides = JSON.parse(obj.clientStreamingConfigOverrides || \"{}\") || {};\r\n    (overrides.inputConfiguration = overrides.inputConfiguration || {}),\r\n      (overrides.inputConfiguration.enableVibration = !0);\r\n    let overrideMkb = null;\r\n    if (\r\n      getGlobalPref(\"nativeMkb.mode\") === \"on\" ||\r\n      (STATES.currentStream.titleInfo &&\r\n        BX_FLAGS.ForceNativeMkbTitles?.includes(\r\n          STATES.currentStream.titleInfo.details.productId\r\n        ))\r\n    )\r\n      overrideMkb = !0;\r\n    if (getGlobalPref(\"nativeMkb.mode\") === \"off\") overrideMkb = !1;\r\n    if (overrideMkb !== null)\r\n      overrides.inputConfiguration = Object.assign(\r\n        overrides.inputConfiguration,\r\n        { enableMouseInput: overrideMkb, enableKeyboardInput: overrideMkb }\r\n      );\r\n    if (TouchController.isEnabled())\r\n      (overrides.inputConfiguration.enableTouchInput = !0),\r\n        (overrides.inputConfiguration.maxTouchPoints = 10);\r\n    if (getGlobalPref(\"audio.mic.onPlaying\"))\r\n      (overrides.audioConfiguration = overrides.audioConfiguration || {}),\r\n        (overrides.audioConfiguration.enableMicrophone = !0);\r\n    return (\r\n      (obj.clientStreamingConfigOverrides = JSON.stringify(overrides)),\r\n      (response.json = () => Promise.resolve(obj)),\r\n      (response.text = () => Promise.resolve(JSON.stringify(obj))),\r\n      response\r\n    );\r\n  }\r\n  static async handle(request, init) {\r\n    let url = typeof request === \"string\" ? request : request.url;\r\n    if (url.endsWith(\"/v2/login/user\"))\r\n      return XcloudInterceptor.handleLogin(request, init);\r\n    else if (url.endsWith(\"/sessions/cloud/play\"))\r\n      return XcloudInterceptor.handlePlay(request, init);\r\n    else if (url.includes(\"xboxlive.com\") && url.includes(\"/waittime/\"))\r\n      return XcloudInterceptor.handleWaitTime(request, init);\r\n    else if (url.endsWith(\"/configuration\"))\r\n      return XcloudInterceptor.handleConfiguration(request, init);\r\n    else if (\r\n      url &&\r\n      url.endsWith(\"/ice\") &&\r\n      url.includes(\"/sessions/\") &&\r\n      request.method === \"GET\"\r\n    )\r\n      return patchIceCandidates(request);\r\n    return NATIVE_FETCH(request, init);\r\n  }\r\n}\r\nfunction clearApplicationInsightsBuffers() {\r\n  window.sessionStorage.removeItem(\"AI_buffer\"),\r\n    window.sessionStorage.removeItem(\"AI_sentBuffer\");\r\n}\r\nfunction clearDbLogs(dbName, table) {\r\n  let request = window.indexedDB.open(dbName);\r\n  request.onsuccess = (e) => {\r\n    let db = e.target.result;\r\n    try {\r\n      let objectStoreRequest = db\r\n        .transaction(table, \"readwrite\")\r\n        .objectStore(table)\r\n        .clear();\r\n      objectStoreRequest.onsuccess = () =>\r\n        BxLogger.info(\"clearDbLogs\", `Cleared ${dbName}.${table}`);\r\n    } catch (ex) {}\r\n  };\r\n}\r\nfunction clearAllLogs() {\r\n  clearApplicationInsightsBuffers(),\r\n    clearDbLogs(\"StreamClientLogHandler\", \"logs\"),\r\n    clearDbLogs(\"XCloudAppLogs\", \"logs\");\r\n}\r\nfunction updateIceCandidates(candidates, options) {\r\n  let pattern = new RegExp(\r\n      /a=candidate:(?<foundation>\\d+) (?<component>\\d+) UDP (?<priority>\\d+) (?<ip>[^\\s]+) (?<port>\\d+) (?<the_rest>.*)/\r\n    ),\r\n    lst = [];\r\n  for (let item2 of candidates) {\r\n    if (item2.candidate == \"a=end-of-candidates\") continue;\r\n    let groups = pattern.exec(item2.candidate).groups;\r\n    lst.push(groups);\r\n  }\r\n  if (options.preferIpv6Server)\r\n    lst.sort((a, b) => {\r\n      let firstIp = a.ip,\r\n        secondIp = b.ip;\r\n      return !firstIp.includes(\":\") && secondIp.includes(\":\") ? 1 : -1;\r\n    });\r\n  let newCandidates = [],\r\n    foundation = 1,\r\n    newCandidate = (candidate) => {\r\n      return {\r\n        candidate,\r\n        messageType: \"iceCandidate\",\r\n        sdpMLineIndex: \"0\",\r\n        sdpMid: \"0\",\r\n      };\r\n    };\r\n  if (\r\n    (lst.forEach((item2) => {\r\n      (item2.foundation = foundation),\r\n        (item2.priority = foundation == 1 ? 2130706431 : 1),\r\n        newCandidates.push(\r\n          newCandidate(\r\n            `a=candidate:${item2.foundation} 1 UDP ${item2.priority} ${item2.ip} ${item2.port} ${item2.the_rest}`\r\n          )\r\n        ),\r\n        ++foundation;\r\n    }),\r\n    options.consoleAddrs)\r\n  )\r\n    for (let ip in options.consoleAddrs)\r\n      for (let port of options.consoleAddrs[ip])\r\n        newCandidates.push(\r\n          newCandidate(\r\n            `a=candidate:${\r\n              newCandidates.length + 1\r\n            } 1 UDP 1 ${ip} ${port} typ host`\r\n          )\r\n        );\r\n  return (\r\n    newCandidates.push(newCandidate(\"a=end-of-candidates\")),\r\n    BxLogger.info(\"ICE Candidates\", newCandidates),\r\n    newCandidates\r\n  );\r\n}\r\nasync function patchIceCandidates(request, consoleAddrs) {\r\n  let response = await NATIVE_FETCH(request),\r\n    text = await response.clone().text();\r\n  if (!text.length) return response;\r\n  let options = {\r\n      preferIpv6Server: getGlobalPref(\"server.ipv6.prefer\"),\r\n      consoleAddrs,\r\n    },\r\n    obj = JSON.parse(text),\r\n    exchangeResponse = JSON.parse(obj.exchangeResponse);\r\n  return (\r\n    (exchangeResponse = updateIceCandidates(exchangeResponse, options)),\r\n    (obj.exchangeResponse = JSON.stringify(exchangeResponse)),\r\n    (response.json = () => Promise.resolve(obj)),\r\n    (response.text = () => Promise.resolve(JSON.stringify(obj))),\r\n    response\r\n  );\r\n}\r\nfunction interceptHttpRequests() {\r\n  let BLOCKED_URLS = [];\r\n  if (getGlobalPref(\"block.tracking\"))\r\n    clearAllLogs(),\r\n      BLOCKED_URLS.push(\r\n        \"https://arc.msn.com\",\r\n        \"https://browser.events.data.microsoft.com\",\r\n        \"https://dc.services.visualstudio.com\",\r\n        \"https://2c06dea3f26c40c69b8456d319791fd0@o427368.ingest.sentry.io\",\r\n        \"https://mscom.demdex.net\"\r\n      );\r\n  let blockFeatures2 = getGlobalPref(\"block.features\");\r\n  if (blockFeatures2.includes(\"chat\"))\r\n    BLOCKED_URLS.push(\r\n      \"https://xblmessaging.xboxlive.com/network/xbox/users/me/inbox\"\r\n    );\r\n  if (blockFeatures2.includes(\"friends\"))\r\n    BLOCKED_URLS.push(\r\n      \"https://peoplehub.xboxlive.com/users/me/people/social\",\r\n      \"https://peoplehub.xboxlive.com/users/me/people/recommendations\"\r\n    );\r\n  if (blockAllNotifications())\r\n    BLOCKED_URLS.push(\"https://notificationinbox.xboxlive.com/\");\r\n  let xhrPrototype = XMLHttpRequest.prototype,\r\n    nativeXhrOpen = xhrPrototype.open,\r\n    nativeXhrSend = xhrPrototype.send;\r\n  (xhrPrototype.open = function (method, url) {\r\n    return (this._url = url), nativeXhrOpen.apply(this, arguments);\r\n  }),\r\n    (xhrPrototype.send = function (...arg) {\r\n      for (let url of BLOCKED_URLS)\r\n        if (this._url.startsWith(url)) {\r\n          if (url === \"https://dc.services.visualstudio.com\")\r\n            window.setTimeout(clearAllLogs, 1000);\r\n          return BxLogger.warning(\"Blocked URL\", url), !1;\r\n        }\r\n      return nativeXhrSend.apply(this, arguments);\r\n    });\r\n  let gamepassAllGames = [],\r\n    IGNORED_DOMAINS = [\r\n      \"accounts.xboxlive.com\",\r\n      \"chat.xboxlive.com\",\r\n      \"notificationinbox.xboxlive.com\",\r\n      \"peoplehub.xboxlive.com\",\r\n      \"peoplehub-public.xboxlive.com\",\r\n      \"rta.xboxlive.com\",\r\n      \"userpresence.xboxlive.com\",\r\n      \"xblmessaging.xboxlive.com\",\r\n      \"consent.config.office.com\",\r\n      \"arc.msn.com\",\r\n      \"browser.events.data.microsoft.com\",\r\n      \"dc.services.visualstudio.com\",\r\n      \"2c06dea3f26c40c69b8456d319791fd0@o427368.ingest.sentry.io\",\r\n    ];\r\n  window.BX_FETCH = window.fetch = async (request, init) => {\r\n    let url = typeof request === \"string\" ? request : request.url;\r\n    for (let blocked of BLOCKED_URLS)\r\n      if (url.startsWith(blocked))\r\n        return (\r\n          BxLogger.warning(\"Blocked URL\", url),\r\n          new Response('{\"acc\":1,\"webResult\":{}}', {\r\n            status: 200,\r\n            statusText: \"200 OK\",\r\n          })\r\n        );\r\n    try {\r\n      let domain = new URL(url).hostname;\r\n      if (IGNORED_DOMAINS.includes(domain)) return NATIVE_FETCH(request, init);\r\n    } catch (e) {\r\n      return NATIVE_FETCH(request, init);\r\n    }\r\n    if (\r\n      url.startsWith(\r\n        \"https://emerald.xboxservices.com/xboxcomfd/experimentation\"\r\n      )\r\n    )\r\n      try {\r\n        let response = await NATIVE_FETCH(request, init),\r\n          json = await response.json();\r\n        if (json && json.exp && json.exp.treatments)\r\n          for (let key in FeatureGates)\r\n            json.exp.treatments[key] = FeatureGates[key];\r\n        return (response.json = () => Promise.resolve(json)), response;\r\n      } catch (e) {\r\n        return console.log(e), NATIVE_FETCH(request, init);\r\n      }\r\n    if (\r\n      STATES.userAgent.capabilities.touch &&\r\n      url.includes(\"catalog.gamepass.com/sigls/\")\r\n    ) {\r\n      let response = await NATIVE_FETCH(request, init),\r\n        obj = await response.clone().json();\r\n      if (\r\n        url.includes(\"29a81209-df6f-41fd-a528-2ae6b91f719c\") ||\r\n        url.includes(\"ce573635-7c18-4d0c-9d68-90b932393470\")\r\n      )\r\n        for (let i = 1; i < obj.length; i++) gamepassAllGames.push(obj[i].id);\r\n      else if (url.includes(\"9c86f07a-f3e8-45ad-82a0-a1f759597059\"))\r\n        try {\r\n          let customList = TouchController.getCustomList();\r\n          customList = customList.filter((id) => gamepassAllGames.includes(id));\r\n          let newCustomList = customList.map((item2) => ({ id: item2 }));\r\n          obj.push(...newCustomList);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      return (response.json = () => Promise.resolve(obj)), response;\r\n    }\r\n    if (\r\n      BX_FLAGS.ForceNativeMkbTitles &&\r\n      url.includes(\"catalog.gamepass.com/sigls/\") &&\r\n      url.includes(\"8fa264dd-124f-4af3-97e8-596fcdf4b486\")\r\n    ) {\r\n      let response = await NATIVE_FETCH(request, init),\r\n        obj = await response.clone().json();\r\n      try {\r\n        let newCustomList = BX_FLAGS.ForceNativeMkbTitles.map((item2) => ({\r\n          id: item2,\r\n        }));\r\n        obj.push(...newCustomList);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      return (response.json = () => Promise.resolve(obj)), response;\r\n    }\r\n    let requestType;\r\n    if (\r\n      url.includes(\"/sessions/home\") ||\r\n      url.includes(\"xhome.\") ||\r\n      (STATES.remotePlay.isPlaying && url.endsWith(\"/inputconfigs\"))\r\n    )\r\n      requestType = \"xhome\";\r\n    else requestType = \"xcloud\";\r\n    if (requestType === \"xhome\") return XhomeInterceptor.handle(request);\r\n    return XcloudInterceptor.handle(request, init);\r\n  };\r\n}\r\nfunction generateMsDeviceInfo(osName) {\r\n  return {\r\n    appInfo: {\r\n      env: {\r\n        clientAppId: window.location.host,\r\n        clientAppType: \"browser\",\r\n        clientAppVersion: \"26.1.97\",\r\n        clientSdkVersion: \"10.3.7\",\r\n        httpEnvironment: \"prod\",\r\n        sdkInstallId: \"\",\r\n      },\r\n    },\r\n    dev: {\r\n      os: { name: osName, ver: \"22631.2715\", platform: \"desktop\" },\r\n      hw: { make: \"Microsoft\", model: \"unknown\", sdktype: \"web\" },\r\n      browser: { browserName: \"chrome\", browserVersion: \"130.0\" },\r\n      displayInfo: {\r\n        dimensions: { widthInPixels: 1920, heightInPixels: 1080 },\r\n        pixelDensity: { dpiX: 1, dpiY: 1 },\r\n      },\r\n    },\r\n  };\r\n}\r\nfunction getOsNameFromResolution(resolution) {\r\n  let osName;\r\n  switch (resolution) {\r\n    case \"1080p-hq\":\r\n      osName = \"tizen\";\r\n      break;\r\n    case \"1080p\":\r\n      osName = \"windows\";\r\n      break;\r\n    default:\r\n      osName = \"android\";\r\n      break;\r\n  }\r\n  return osName;\r\n}\r\nfunction addCss() {\r\n  let css =\r\n      ':root{--bx-title-font:Bahnschrift,Arial,Helvetica,sans-serif;--bx-title-font-semibold:Bahnschrift Semibold,Arial,Helvetica,sans-serif;--bx-normal-font:\"Segoe UI\",Arial,Helvetica,sans-serif;--bx-monospaced-font:Consolas,\"Courier New\",Courier,monospace;--bx-promptfont-font:promptfont;--bx-button-height:40px;--bx-default-button-color:#2d3036;--bx-default-button-rgb:45,48,54;--bx-default-button-hover-color:#515863;--bx-default-button-hover-rgb:81,88,99;--bx-default-button-active-color:#222428;--bx-default-button-active-rgb:34,36,40;--bx-default-button-disabled-color:#8e8e8e;--bx-default-button-disabled-rgb:142,142,142;--bx-primary-button-color:#008746;--bx-primary-button-rgb:0,135,70;--bx-primary-button-hover-color:#04b358;--bx-primary-button-hover-rgb:4,179,88;--bx-primary-button-active-color:#044e2a;--bx-primary-button-active-rgb:4,78,42;--bx-primary-button-disabled-color:#448262;--bx-primary-button-disabled-rgb:68,130,98;--bx-warning-button-color:#c16e04;--bx-warning-button-rgb:193,110,4;--bx-warning-button-hover-color:#fa9005;--bx-warning-button-hover-rgb:250,144,5;--bx-warning-button-active-color:#965603;--bx-warning-button-active-rgb:150,86,3;--bx-warning-button-disabled-color:#a2816c;--bx-warning-button-disabled-rgb:162,129,108;--bx-danger-button-color:#c10404;--bx-danger-button-rgb:193,4,4;--bx-danger-button-hover-color:#e61d1d;--bx-danger-button-hover-rgb:230,29,29;--bx-danger-button-active-color:#a26c6c;--bx-danger-button-active-rgb:162,108,108;--bx-danger-button-disabled-color:#bd8282;--bx-danger-button-disabled-rgb:189,130,130;--bx-fullscreen-text-z-index:9999;--bx-toast-z-index:6000;--bx-key-binding-dialog-z-index:5010;--bx-key-binding-dialog-overlay-z-index:5000;--bx-stats-bar-z-index:4010;--bx-navigation-dialog-z-index:3010;--bx-navigation-dialog-overlay-z-index:3000;--bx-mkb-pointer-lock-msg-z-index:2000;--bx-game-bar-z-index:1000;--bx-screenshot-animation-z-index:200;--bx-wait-time-box-z-index:100}@font-face{font-family:\\'promptfont\\';src:url(\"https://redphx.github.io/better-xcloud/fonts/promptfont.otf\");unicode-range:U+2196-E011,U+27F6,U+FF31}#StreamHud div[class^=HUDButton-module__hiddenContainer] ~ div:not([class^=HUDButton-module__hiddenContainer]){opacity:0;pointer-events:none !important;position:absolute;top:-9999px;left:-9999px}@media screen and (max-width:640px){header a[href=\"/play\"]{display:none}}.bx-full-width{width:100% !important}.bx-full-height{height:100% !important}.bx-auto-height{height:auto !important}.bx-no-scroll{overflow:hidden !important}.bx-hide-scroll-bar{scrollbar-width:none}.bx-hide-scroll-bar::-webkit-scrollbar{display:none}.bx-gone{display:none !important}.bx-offscreen{position:absolute !important;top:-9999px !important;left:-9999px !important;visibility:hidden !important}.bx-hidden{visibility:hidden !important}.bx-invisible{opacity:0}.bx-unclickable{pointer-events:none}.bx-pixel{width:1px !important;height:1px !important}.bx-no-margin{margin:0 !important}.bx-no-padding{padding:0 !important}.bx-prompt{font-family:var(--bx-promptfont-font) !important}.bx-monospaced{font-family:var(--bx-monospaced-font) !important}.bx-line-through{text-decoration:line-through !important}.bx-normal-case{text-transform:none !important}.bx-normal-link{text-transform:none !important;text-align:left !important;font-weight:400 !important;font-family:var(--bx-normal-font) !important}.bx-frosted{backdrop-filter:blur(4px) brightness(1.5)}select[multiple],select[multiple]:focus{overflow:auto;border:none}select[multiple] option,select[multiple]:focus option{padding:4px 6px}select[multiple] option:checked,select[multiple]:focus option:checked{background:#1a7bc0 linear-gradient(0deg,#1a7bc0 0%,#1a7bc0 100%)}select[multiple] option:checked::before,select[multiple]:focus option:checked::before{content:\\'☑️\\';font-size:12px;display:inline-block;margin-right:6px;height:100%;line-height:100%;vertical-align:middle}#headerArea,#uhfSkipToMain,.uhf-footer{display:none}#game-stream div[class^=NotFocusedDialog]{position:absolute !important;top:-9999px !important;left:-9999px !important;width:0 !important;height:0 !important}#game-stream video:not([src]){visibility:hidden}.bx-game-tile-wait-time{position:absolute;top:0;left:0;z-index:1;background:rgba(0,0,0,0.5);display:flex;border-radius:4px 0 4px 0;align-items:center;padding:4px 8px}.bx-game-tile-wait-time svg{width:14px;height:16px;margin-right:2px}.bx-game-tile-wait-time span{display:inline-block;height:16px;line-height:16px;font-size:12px;font-weight:bold;margin-left:2px}.bx-game-tile-wait-time[data-duration=short]{background-color:rgba(0,133,133,0.75)}.bx-game-tile-wait-time[data-duration=medium]{background-color:rgba(213,133,0,0.75)}.bx-game-tile-wait-time[data-duration=long]{background-color:rgba(150,0,0,0.75)}.bx-fullscreen-text{position:fixed;top:0;bottom:0;left:0;right:0;background:rgba(0,0,0,0.8);z-index:var(--bx-fullscreen-text-z-index);line-height:100vh;color:#fff;text-align:center;font-weight:400;font-family:var(--bx-normal-font);font-size:1.3rem;user-select:none;-webkit-user-select:none}#root section[class*=DeviceCodePage-module__page]{margin-left:20px !important;margin-right:20px !important;margin-top:20px !important;max-width:800px !important}#root div[class*=DeviceCodePage-module__back]{display:none}.bx-blink-me{animation:bx-blinker 1s linear infinite}.bx-horizontal-shaking{animation:bx-horizontal-shaking .4s ease-in-out 2}@-moz-keyframes bx-blinker{100%{opacity:0}}@-webkit-keyframes bx-blinker{100%{opacity:0}}@-o-keyframes bx-blinker{100%{opacity:0}}@keyframes bx-blinker{100%{opacity:0}}@-moz-keyframes bx-horizontal-shaking{0%{transform:translateX(0)}25%{transform:translateX(5px)}50%{transform:translateX(-5px)}75%{transform:translateX(5px)}100%{transform:translateX(0)}}@-webkit-keyframes bx-horizontal-shaking{0%{transform:translateX(0)}25%{transform:translateX(5px)}50%{transform:translateX(-5px)}75%{transform:translateX(5px)}100%{transform:translateX(0)}}@-o-keyframes bx-horizontal-shaking{0%{transform:translateX(0)}25%{transform:translateX(5px)}50%{transform:translateX(-5px)}75%{transform:translateX(5px)}100%{transform:translateX(0)}}@keyframes bx-horizontal-shaking{0%{transform:translateX(0)}25%{transform:translateX(5px)}50%{transform:translateX(-5px)}75%{transform:translateX(5px)}100%{transform:translateX(0)}}.bx-button{--button-rgb:var(--bx-default-button-rgb);--button-hover-rgb:var(--bx-default-button-hover-rgb);--button-active-rgb:var(--bx-default-button-active-rgb);--button-disabled-rgb:var(--bx-default-button-disabled-rgb);background-color:rgb(var(--button-rgb));user-select:none;-webkit-user-select:none;color:#fff;font-family:var(--bx-title-font-semibold);font-size:14px;border:none;font-weight:400;height:var(--bx-button-height);border-radius:4px;padding:0 8px;text-transform:uppercase;cursor:pointer;overflow:hidden}.bx-button:not([disabled]):active{background-color:rgb(var(--button-active-rgb))}.bx-button:focus{outline:none !important}.bx-button:not([disabled]):not(:active):hover,.bx-button:not([disabled]):not(:active).bx-focusable:focus{background-color:rgb(var(--button-hover-rgb))}.bx-button:disabled{cursor:default;background-color:rgb(var(--button-disabled-rgb));opacity:.5}.bx-button.bx-ghost{background-color:transparent}.bx-button.bx-ghost:not([disabled]):not(:active):hover,.bx-button.bx-ghost:not([disabled]):not(:active).bx-focusable:focus{background-color:rgb(var(--button-hover-rgb))}.bx-button.bx-primary{--button-rgb:var(--bx-primary-button-rgb)}.bx-button.bx-primary:not([disabled]):active{--button-active-rgb:var(--bx-primary-button-active-rgb)}.bx-button.bx-primary:not([disabled]):not(:active):hover,.bx-button.bx-primary:not([disabled]):not(:active).bx-focusable:focus{--button-hover-rgb:var(--bx-primary-button-hover-rgb)}.bx-button.bx-primary:disabled{--button-disabled-rgb:var(--bx-primary-button-disabled-rgb)}.bx-button.bx-warning{--button-rgb:var(--bx-warning-button-rgb)}.bx-button.bx-warning:not([disabled]):active{--button-active-rgb:var(--bx-warning-button-active-rgb)}.bx-button.bx-warning:not([disabled]):not(:active):hover,.bx-button.bx-warning:not([disabled]):not(:active).bx-focusable:focus{--button-hover-rgb:var(--bx-warning-button-hover-rgb)}.bx-button.bx-warning:disabled{--button-disabled-rgb:var(--bx-warning-button-disabled-rgb)}.bx-button.bx-danger{--button-rgb:var(--bx-danger-button-rgb)}.bx-button.bx-danger:not([disabled]):active{--button-active-rgb:var(--bx-danger-button-active-rgb)}.bx-button.bx-danger:not([disabled]):not(:active):hover,.bx-button.bx-danger:not([disabled]):not(:active).bx-focusable:focus{--button-hover-rgb:var(--bx-danger-button-hover-rgb)}.bx-button.bx-danger:disabled{--button-disabled-rgb:var(--bx-danger-button-disabled-rgb)}.bx-button.bx-frosted{--button-alpha:.2;background-color:rgba(var(--button-rgb), var(--button-alpha))}.bx-button.bx-frosted:not([disabled]):not(:active):hover,.bx-button.bx-frosted:not([disabled]):not(:active).bx-focusable:focus{background-color:rgba(var(--button-hover-rgb), var(--button-alpha))}.bx-button.bx-drop-shadow{box-shadow:0 0 4px rgba(0,0,0,0.502)}.bx-button.bx-tall{height:calc(var(--bx-button-height) * 1.5) !important}.bx-button.bx-circular{border-radius:var(--bx-button-height);width:var(--bx-button-height);height:var(--bx-button-height)}.bx-button svg{display:inline-block;width:16px;height:var(--bx-button-height)}.bx-button span{display:inline-block;line-height:var(--bx-button-height);vertical-align:middle;color:#fff;overflow:hidden;white-space:nowrap}.bx-button span:not(:only-child){margin-inline-start:8px}.bx-button.bx-button-multi-lines{height:auto;text-align:left;padding:10px}.bx-button.bx-button-multi-lines span{line-height:unset;display:block}.bx-button.bx-button-multi-lines span:last-of-type{text-transform:none;font-weight:normal;font-family:\"Segoe Sans Variable Text\";font-size:12px;margin-top:4px}.bx-focusable{position:relative;overflow:visible}.bx-focusable::after{border:2px solid transparent;border-radius:10px}.bx-focusable:focus::after{content:\\'\\';border-color:#fff;position:absolute;top:-6px;left:-6px;right:-6px;bottom:-6px}html[data-active-input=touch] .bx-focusable:focus::after,html[data-active-input=mouse] .bx-focusable:focus::after{border-color:transparent !important}.bx-focusable.bx-circular::after{border-radius:var(--bx-button-height)}a.bx-button{display:inline-block}a.bx-button.bx-full-width{text-align:center}button.bx-inactive{pointer-events:none;opacity:.2;background:transparent !important}.bx-header-remote-play-button{height:auto;margin-right:8px !important}.bx-header-remote-play-button svg{width:24px;height:24px}.bx-header-settings-button{line-height:30px;font-size:14px;text-transform:uppercase;position:relative}.bx-header-settings-button[data-update-available]::before{content:\\'🌟\\' !important;line-height:var(--bx-button-height);display:inline-block;margin-left:4px}.bx-key-binding-dialog-overlay{position:fixed;inset:0;z-index:var(--bx-key-binding-dialog-overlay-z-index);background:#000;opacity:50%}.bx-key-binding-dialog{display:flex;flex-flow:column;max-height:90vh;position:fixed;top:50%;left:50%;margin-right:-50%;transform:translate(-50%,-50%);min-width:420px;padding:16px;border-radius:8px;z-index:var(--bx-key-binding-dialog-z-index);background:#1a1b1e;color:#fff;font-weight:400;font-size:16px;font-family:var(--bx-normal-font);box-shadow:0 0 6px #000;user-select:none;-webkit-user-select:none}.bx-key-binding-dialog *:focus{outline:none !important}.bx-key-binding-dialog h2{margin-bottom:12px;color:#fff;display:block;font-family:var(--bx-title-font);font-size:32px;font-weight:400;line-height:var(--bx-button-height)}.bx-key-binding-dialog > div{overflow:auto;padding:2px 0}.bx-key-binding-dialog > button{padding:8px 32px;margin:10px auto 0;border:none;border-radius:4px;display:block;background-color:#2d3036;text-align:center;color:#fff;text-transform:uppercase;font-family:var(--bx-title-font);font-weight:400;line-height:18px;font-size:14px}@media (hover:hover){.bx-key-binding-dialog > button:hover{background-color:#515863}}.bx-key-binding-dialog > button:focus{background-color:#515863}.bx-key-binding-dialog ul{margin-bottom:1rem}.bx-key-binding-dialog ul li{display:none}.bx-key-binding-dialog ul[data-flags*=\"[1]\"] > li[data-flag=\"1\"],.bx-key-binding-dialog ul[data-flags*=\"[2]\"] > li[data-flag=\"2\"],.bx-key-binding-dialog ul[data-flags*=\"[4]\"] > li[data-flag=\"4\"],.bx-key-binding-dialog ul[data-flags*=\"[8]\"] > li[data-flag=\"8\"]{display:list-item}@media screen and (max-width:450px){.bx-key-binding-dialog{min-width:100%}}.bx-navigation-dialog{position:absolute;z-index:var(--bx-navigation-dialog-z-index);font-family:var(--bx-title-font)}.bx-navigation-dialog *:focus{outline:none !important}.bx-navigation-dialog select:disabled{-webkit-appearance:none;text-align-last:right;text-align:right;color:#fff;background:#131416;border:none;border-radius:4px;padding:0 5px}.bx-navigation-dialog .bx-focusable::after{border-radius:4px}.bx-navigation-dialog .bx-focusable:focus::after{top:0;left:0;right:0;bottom:0}.bx-navigation-dialog-overlay{position:fixed;background:rgba(11,11,11,0.89);top:0;left:0;right:0;bottom:0;z-index:var(--bx-navigation-dialog-overlay-z-index)}.bx-navigation-dialog-overlay[data-is-playing=\"true\"]{background:transparent}.bx-centered-dialog{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);color:#fff;background:#1a1b1e;border-radius:10px;min-width:min(calc(100vw - 20px), 500px);max-width:calc(100vw - 20px);margin:0 0 0 auto;padding:16px;max-height:95vh;flex-direction:column;overflow:hidden;display:flex;flex-direction:column}.bx-centered-dialog .bx-dialog-title{display:flex;flex-direction:row;align-items:center;margin-bottom:10px}.bx-centered-dialog .bx-dialog-title p{padding:0;margin:0;flex:1;font-size:1.5rem;font-weight:bold}.bx-centered-dialog .bx-dialog-title button{flex-shrink:0}.bx-centered-dialog .bx-dialog-content{flex:1;padding:6px;overflow:auto;overflow-x:hidden}.bx-centered-dialog .bx-dialog-preset-tools{display:flex;margin-bottom:12px;gap:6px}.bx-centered-dialog .bx-dialog-preset-tools button{align-self:center;min-height:50px}.bx-centered-dialog .bx-default-preset-note{font-size:12px;font-style:italic;text-align:center;margin-bottom:10px}.bx-centered-dialog input,.bx-settings-dialog input{accent-color:var(--bx-primary-button-color)}.bx-centered-dialog input:focus,.bx-settings-dialog input:focus{accent-color:var(--bx-danger-button-color)}.bx-centered-dialog select:disabled,.bx-settings-dialog select:disabled{-webkit-appearance:none;background:transparent;text-align-last:right;border:none;color:#fff}.bx-centered-dialog select option:disabled,.bx-settings-dialog select option:disabled{display:none}.bx-centered-dialog input[type=checkbox]:focus,.bx-settings-dialog input[type=checkbox]:focus,.bx-centered-dialog select:focus,.bx-settings-dialog select:focus{filter:drop-shadow(1px 0 0 #fff) drop-shadow(-1px 0 0 #fff) drop-shadow(0 1px 0 #fff) drop-shadow(0 -1px 0 #fff)}.bx-centered-dialog a,.bx-settings-dialog a{color:#1c9d1c;text-decoration:none}.bx-centered-dialog a:hover,.bx-settings-dialog a:hover,.bx-centered-dialog a:focus,.bx-settings-dialog a:focus{color:#5dc21e}.bx-centered-dialog label,.bx-settings-dialog label{margin:0}.bx-controller-shortcuts-manager-container .bx-shortcut-note{margin-top:10px;font-size:14px;text-align:center}.bx-controller-shortcuts-manager-container .bx-shortcut-row{display:flex;gap:10px;margin-bottom:10px;align-items:center}.bx-controller-shortcuts-manager-container .bx-shortcut-row label.bx-prompt{flex-shrink:0;font-size:32px;margin:0}.bx-controller-shortcuts-manager-container .bx-shortcut-row label.bx-prompt::first-letter{letter-spacing:6px}.bx-controller-shortcuts-manager-container select:disabled{text-align:left;text-align-last:left}.bx-keyboard-shortcuts-manager-container{display:flex;flex-direction:column;gap:16px}.bx-keyboard-shortcuts-manager-container fieldset{background:#2a2a2a;border:1px solid #2a2a2a;border-radius:4px;padding:4px}.bx-keyboard-shortcuts-manager-container legend{width:auto;padding:4px 8px;margin:0 4px 4px;background:#004f87;box-shadow:0 2px 0 #071e3d;border-radius:4px;font-size:14px;font-weight:bold;text-transform:uppercase}.bx-keyboard-shortcuts-manager-container .bx-settings-row{background:none;padding:10px}.bx-settings-dialog{display:flex;position:fixed;top:0;right:0;bottom:0;opacity:.98;user-select:none;-webkit-user-select:none}.bx-settings-dialog .bx-settings-reload-note{font-size:.8rem;display:block;padding:8px;font-style:italic;font-weight:normal;height:var(--bx-button-height)}.bx-settings-tabs-container{position:fixed;width:48px;max-height:100vh;display:flex;flex-direction:column}.bx-settings-tabs-container > div:last-of-type{display:flex;flex-direction:column;align-items:end}.bx-settings-tabs-container > div:last-of-type button{flex-shrink:0;border-top-right-radius:0;border-bottom-right-radius:0;margin-top:8px;height:unset;padding:8px 10px}.bx-settings-tabs-container > div:last-of-type button svg{width:16px;height:16px}.bx-settings-tabs{display:flex;flex-direction:column;border-radius:0 0 0 8px;box-shadow:0 0 6px #000;overflow:overlay;flex:1}.bx-settings-tabs svg{width:24px;height:24px;padding:10px;flex-shrink:0;box-sizing:content-box;background:#131313;cursor:pointer;border-left:4px solid #1e1e1e}.bx-settings-tabs svg.bx-active{background:#222;border-color:#008746}.bx-settings-tabs svg:not(.bx-active):hover{background:#2f2f2f;border-color:#484848}.bx-settings-tabs svg:focus{border-color:#fff}.bx-settings-tabs svg[data-group=global][data-need-refresh=true]{background:var(--bx-danger-button-color) !important}.bx-settings-tabs svg[data-group=global][data-need-refresh=true]:hover{background:var(--bx-danger-button-hover-color) !important}.bx-settings-tab-contents{flex-direction:column;margin-left:48px;width:450px;background:#1a1b1e;color:#fff;font-weight:400;font-size:16px;font-family:var(--bx-title-font);text-align:center;box-shadow:0 0 6px #000;overflow:overlay;z-index:1}.bx-settings-tab-contents .bx-top-buttons{display:flex;flex-direction:column;gap:8px;margin-bottom:8px}.bx-settings-tab-contents .bx-top-buttons .bx-button{display:block}.bx-settings-tab-contents h2{margin:16px 0 8px 0;display:flex;align-items:center}.bx-settings-tab-contents h2:first-of-type{margin-top:0}.bx-settings-tab-contents h2 span{display:inline-block;font-size:20px;font-weight:bold;text-align:left;flex:1;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;min-height:var(--bx-button-height);align-content:center}@media (max-width:500px){.bx-settings-tab-contents{width:calc(100vw - 48px)}}.bx-settings-row{display:flex;gap:10px;padding:16px 10px;background:#2a2a2a;border-bottom:1px solid #343434}.bx-settings-row:hover,.bx-settings-row:focus-within{background-color:#242424}.bx-settings-row:not(:has(> input[type=checkbox])){flex-wrap:wrap}.bx-settings-row > span.bx-settings-label{font-size:14px;display:block;text-align:left;align-self:center;margin-bottom:0 !important;flex:1}.bx-settings-row > span.bx-settings-label svg{width:20px;height:20px;margin-inline-end:8px}.bx-settings-row > span.bx-settings-label + *{margin:0 0 0 auto}.bx-settings-row[data-multi-lines=\"true\"]{flex-direction:column}.bx-settings-row[data-multi-lines=\"true\"] > span.bx-settings-label{align-self:start}.bx-settings-row[data-multi-lines=\"true\"] > span.bx-settings-label + *{margin:unset}.bx-settings-row.bx-settings-important-row{background:#733b00}.bx-settings-dialog-note{display:block;color:#afafb0;font-size:12px;font-weight:lighter;font-style:italic}.bx-settings-dialog-note:not(:has(a)){margin-top:4px}.bx-settings-dialog-note a{display:inline-block;padding:4px}.bx-settings-custom-user-agent{display:block;width:100%;padding:6px}.bx-donation-link{display:block;text-align:center;text-decoration:none;height:20px;line-height:20px;font-size:14px;margin-top:10px;margin-bottom:10px}.bx-debug-info button{margin-top:10px}.bx-debug-info pre{margin-top:10px;cursor:copy;color:#fff;padding:8px;border:1px solid #2d2d2d;background:#212121;white-space:break-spaces;text-align:left}.bx-debug-info pre:hover{background:#272727}.bx-settings-app-version{margin-top:10px;text-align:center;color:#747474;font-size:12px}.bx-note-unsupported{display:block;font-size:12px;font-style:italic;font-weight:normal;color:#828282}.bx-settings-tab-content{padding:10px}.bx-settings-tab-content > div *:not(.bx-settings-row):has(+ .bx-settings-row) + .bx-settings-row:has(+ .bx-settings-row){border-top-left-radius:6px;border-top-right-radius:6px}.bx-settings-tab-content > div .bx-settings-row:not(:has(+ .bx-settings-row)){border:none;border-bottom-left-radius:6px;border-bottom-right-radius:6px}.bx-settings-tab-content > div *:not(.bx-settings-row):has(+ .bx-settings-row) + .bx-settings-row:not(:has(+ .bx-settings-row)){border:none;border-radius:6px}.bx-settings-tab-content:not([data-game-id=\"-1\"]) .bx-settings-row[data-override=true],.bx-settings-tab-content:not([data-game-id=\"-1\"]) .bx-settings-row:has(*[data-override=true]){border-left:4px solid #ffa500 !important;border-top-left-radius:0 !important;border-bottom-left-radius:0 !important;padding-left:6px !important}.bx-suggest-toggler{text-align:left;display:flex;border-radius:4px;overflow:hidden;background:#003861;height:45px;align-items:center}.bx-suggest-toggler label{flex:1;align-content:center;padding:0 10px;background:#004f87;height:100%}.bx-suggest-toggler span{display:inline-block;align-self:center;padding:10px;width:45px;text-align:center}.bx-suggest-toggler:hover,.bx-suggest-toggler:focus{cursor:pointer;background:#005da1}.bx-suggest-toggler:hover label,.bx-suggest-toggler:focus label{background:#006fbe}.bx-suggest-toggler[bx-open] span{transform:rotate(90deg)}.bx-suggest-toggler[bx-open]+ .bx-suggest-box{display:block}.bx-suggest-box{display:none}.bx-suggest-wrapper{display:flex;flex-direction:column;gap:10px;margin:10px}.bx-suggest-note{font-size:11px;color:#8c8c8c;font-style:italic;font-weight:100}.bx-suggest-link{font-size:14px;display:inline-block;margin-top:4px;padding:4px}.bx-suggest-row{display:flex;flex-direction:row;gap:10px}.bx-suggest-row label{flex:1;overflow:overlay;border-radius:4px}.bx-suggest-row label .bx-suggest-label{background:#323232;padding:4px 10px;font-size:12px;text-align:left}.bx-suggest-row label .bx-suggest-value{padding:6px;font-size:14px}.bx-suggest-row label .bx-suggest-value.bx-suggest-change{background-color:var(--bx-warning-color)}.bx-suggest-row.bx-suggest-ok input{visibility:hidden}.bx-suggest-row.bx-suggest-ok .bx-suggest-label{background-color:#008114}.bx-suggest-row.bx-suggest-ok .bx-suggest-value{background-color:#13a72a}.bx-suggest-row.bx-suggest-change .bx-suggest-label{background-color:#a65e08}.bx-suggest-row.bx-suggest-change .bx-suggest-value{background-color:#d57f18}.bx-suggest-row.bx-suggest-change:hover label{cursor:pointer}.bx-suggest-row.bx-suggest-change:hover .bx-suggest-label{background-color:#995707}.bx-suggest-row.bx-suggest-change:hover .bx-suggest-value{background-color:#bd7115}.bx-suggest-row.bx-suggest-change input:not(:checked) + label{opacity:.5}.bx-suggest-row.bx-suggest-change input:not(:checked) + label .bx-suggest-label{background-color:#2a2a2a}.bx-suggest-row.bx-suggest-change input:not(:checked) + label .bx-suggest-value{background-color:#393939}.bx-suggest-row.bx-suggest-change:hover input:not(:checked) + label{opacity:1}.bx-suggest-row.bx-suggest-change:hover input:not(:checked) + label .bx-suggest-label{background-color:#202020}.bx-suggest-row.bx-suggest-change:hover input:not(:checked) + label .bx-suggest-value{background-color:#303030}.bx-sub-content-box{background:#161616;padding:10px;box-shadow:0 0 12px #0f0f0f inset;border-radius:10px}.bx-settings-row .bx-sub-content-box{background:#202020;padding:12px;box-shadow:0 0 4px #000 inset;border-radius:6px}.bx-controller-extra-settings[data-has-gamepad=true] > :first-child{display:none}.bx-controller-extra-settings[data-has-gamepad=true] > :last-child{display:block}.bx-controller-extra-settings[data-has-gamepad=false] > :first-child{display:block}.bx-controller-extra-settings[data-has-gamepad=false] > :last-child{display:none}.bx-controller-extra-settings .bx-controller-extra-wrapper{flex:1;min-width:1px}.bx-controller-extra-settings .bx-sub-content-box{flex:1;text-align:left;display:flex;flex-direction:column;margin-top:10px}.bx-controller-extra-settings .bx-sub-content-box > label{font-size:14px}.bx-preset-row{display:flex;gap:8px}.bx-preset-row .bx-select{flex:1}.bx-stream-settings-selection{margin-bottom:8px;position:sticky;z-index:1000;top:0}.bx-stream-settings-selection > div{display:flex;gap:8px;background:#222;padding:10px;border-bottom:4px solid #353638;box-shadow:0 0 6px #000;position:relative;z-index:1}.bx-stream-settings-selection > div .bx-select{flex:1}.bx-stream-settings-selection > div .bx-select label{font-weight:bold;font-size:1.1rem;line-height:initial}.bx-stream-settings-selection > div .bx-select label span{line-height:initial}.bx-stream-settings-selection > div .bx-select .bx-select-indicators{display:none}.bx-stream-settings-selection p{font-family:var(--bx-promptfont-font),var(--bx-normal-font);margin:0;font-size:13px;background:rgba(80,80,80,0.949);height:25px;line-height:23px;position:absolute;bottom:-25px;left:0;right:0;text-shadow:0 1px #000}.bx-toast{user-select:none;-webkit-user-select:none;position:fixed;left:50%;top:24px;transform:translate(-50%,0);background:#212121;border-radius:10px;color:#fff;z-index:var(--bx-toast-z-index);font-family:var(--bx-normal-font);border:2px solid #fff;display:flex;align-items:center;opacity:0;overflow:clip;transition:opacity .2s ease-in;box-shadow:0 0 6px #000}.bx-toast.bx-show{opacity:.95}.bx-toast.bx-hide{opacity:0;pointer-events:none}.bx-toast-msg{font-size:14px;display:inline-block;padding:12px 16px;white-space:pre}.bx-toast-status{font-weight:bold;font-size:14px;text-transform:uppercase;display:inline-block;background:#fff;padding:12px 16px;color:#212121;white-space:pre}.bx-wait-time-box{position:fixed;top:0;right:0;background-color:rgba(0,0,0,0.8);color:#fff;z-index:var(--bx-wait-time-box-z-index);padding:12px;border-radius:0 0 0 8px}.bx-wait-time-box label{display:block;text-transform:uppercase;text-align:right;font-size:12px;font-weight:bold;margin:0}.bx-wait-time-box span{display:block;font-family:var(--bx-monospaced-font);text-align:right;font-size:16px;margin-bottom:10px}.bx-wait-time-box span:last-of-type{margin-bottom:0}.bx-remote-play-settings{margin-bottom:12px;padding-bottom:12px;border-bottom:1px solid #2d2d2d}.bx-remote-play-settings > div{display:flex}.bx-remote-play-settings label{flex:1;font-size:14px}.bx-remote-play-settings label p{margin:4px 0 0;padding:0;color:#888;font-size:12px}.bx-remote-play-resolution{display:block}.bx-remote-play-resolution input[type=\"radio\"]{accent-color:var(--bx-primary-button-color);margin-right:6px}.bx-remote-play-resolution input[type=\"radio\"]:focus{accent-color:var(--bx-primary-button-hover-color)}.bx-remote-play-device-wrapper{display:flex;margin-bottom:12px}.bx-remote-play-device-wrapper:last-child{margin-bottom:2px}.bx-remote-play-device-info{flex:1;align-self:center;padding:4px 0}.bx-remote-play-device-name{font-size:14px;font-weight:bold;display:inline-block;vertical-align:middle}.bx-remote-play-console-type{font-size:8px;background:#004c87;color:#fff;display:inline-block;border-radius:8px;padding:2px 6px;margin-left:8px;vertical-align:middle}.bx-remote-play-power-state{color:#888;font-size:12px}.bx-remote-play-connect-button{min-height:100%;margin:4px 0}.bx-remote-play-buttons{display:flex;justify-content:space-between}select.bx-select{min-height:30px}div.bx-select{display:flex;align-items:stretch;flex:0 1 auto;gap:8px}div.bx-select select:disabled ~ button{display:none}div.bx-select select:disabled ~ div{background:#131416;color:#fff;pointer-events:none}div.bx-select select:disabled ~ div .bx-select-indicators{visibility:hidden}div.bx-select > div,div.bx-select button.bx-select-value{min-width:120px;text-align:left;line-height:24px;vertical-align:middle;background:#fff;color:#000;border-radius:4px;padding:2px 8px;display:flex;flex:1;flex-direction:column}div.bx-select > div{min-height:24px}div.bx-select > div input{display:inline-block;margin-right:8px}div.bx-select > div label{margin-bottom:0;font-size:14px;width:100%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;min-height:15px}div.bx-select > div label span{display:block;font-size:10px;font-weight:bold;text-align:left;line-height:20px;white-space:pre;min-height:15px;align-content:center}div.bx-select button.bx-select-value{border:none;cursor:pointer;min-height:30px;font-size:.9rem;align-items:center}div.bx-select button.bx-select-value > div{display:flex;width:100%}div.bx-select button.bx-select-value span{flex:1;text-align:left;display:inline-block}div.bx-select button.bx-select-value input{margin:0 4px;accent-color:var(--bx-primary-button-color);pointer-events:none}div.bx-select button.bx-select-value:hover input,div.bx-select button.bx-select-value:focus input{accent-color:var(--bx-danger-button-color)}div.bx-select button.bx-select-value:hover::after,div.bx-select button.bx-select-value:focus::after{border-color:#4d4d4d !important}div.bx-select button.bx-button{border:none;width:24px;height:auto;padding:0;color:#fff;border-radius:4px;font-weight:bold;font-size:12px;font-family:var(--bx-monospaced-font);flex-shrink:0}div.bx-select button.bx-button span{line-height:unset}div.bx-select[data-controller-friendly=true] > div{box-sizing:content-box}div.bx-select[data-controller-friendly=true] select{position:absolute !important;top:-9999px !important;left:-9999px !important;visibility:hidden !important}div.bx-select[data-controller-friendly=false]{position:relative}div.bx-select[data-controller-friendly=false] > div{box-sizing:border-box}div.bx-select[data-controller-friendly=false] > div label{margin-right:24px}div.bx-select[data-controller-friendly=false] select:disabled{display:none}div.bx-select[data-controller-friendly=false] select:not(:disabled){cursor:pointer;position:absolute;top:0;right:0;bottom:0;display:block;opacity:0;z-index:calc(var(--bx-settings-z-index) + 1)}div.bx-select[data-controller-friendly=false] select:not(:disabled):hover + div{background:#f0f0f0}div.bx-select[data-controller-friendly=false] select:not(:disabled) + div label::after{content:\\'▾\\';font-size:14px;position:absolute;right:8px;pointer-events:none}.bx-select-indicators{display:flex;height:4px;gap:2px;margin-bottom:2px}.bx-select-indicators span{content:\\' \\';display:inline-block;flex:1;background:#cfcfcf;border-radius:4px;min-width:1px}.bx-select-indicators span[data-highlighted]{background:#9c9c9c;min-width:6px}.bx-select-indicators span[data-selected]{background:#aacfe7}.bx-select-indicators span[data-highlighted][data-selected]{background:#5fa3d0}.bx-guide-home-achievements-progress{display:flex;gap:10px;flex-direction:row}.bx-guide-home-achievements-progress .bx-button{margin-bottom:0 !important}body[data-bx-media-type=tv] .bx-guide-home-achievements-progress{flex-direction:column}body:not([data-bx-media-type=tv]) .bx-guide-home-achievements-progress{flex-direction:row}body:not([data-bx-media-type=tv]) .bx-guide-home-achievements-progress > button:first-of-type{flex:1}body:not([data-bx-media-type=tv]) .bx-guide-home-achievements-progress > button:last-of-type{width:40px}body:not([data-bx-media-type=tv]) .bx-guide-home-achievements-progress > button:last-of-type span{display:none}.bx-guide-home-buttons > div{display:flex;flex-direction:row;gap:12px}body[data-bx-media-type=tv] .bx-guide-home-buttons > div{flex-direction:column}body[data-bx-media-type=tv] .bx-guide-home-buttons > div button{margin-bottom:0 !important}body:not([data-bx-media-type=tv]) .bx-guide-home-buttons > div button span{display:none}.bx-guide-home-buttons[data-is-playing=\"true\"] button[data-state=\\'normal\\']{display:none}.bx-guide-home-buttons[data-is-playing=\"false\"] button[data-state=\\'playing\\']{display:none}#game-stream div[class^=StreamMenu-module__menuContainer] > div[class^=Menu-module]{overflow:visible}.bx-stream-menu-button-on{fill:#000 !important;background-color:#2d2d2d !important;color:#000 !important}.bx-stream-refresh-button{top:calc(env(safe-area-inset-top, 0px) + 10px + 50px) !important}body[data-media-type=default] .bx-stream-refresh-button{left:calc(env(safe-area-inset-left, 0px) + 11px) !important}body[data-media-type=tv] .bx-stream-refresh-button{top:calc(var(--gds-focus-borderSize) + 80px) !important}.bx-stream-home-button{top:calc(env(safe-area-inset-top, 0px) + 10px + 50px * 2) !important}body[data-media-type=default] .bx-stream-home-button{left:calc(env(safe-area-inset-left, 0px) + 12px) !important}body[data-media-type=tv] .bx-stream-home-button{top:calc(var(--gds-focus-borderSize) + 80px * 2) !important}div[data-testid=media-container][data-position=center]{display:flex}div[data-testid=media-container][data-position=top] video,div[data-testid=media-container][data-position=top] canvas{top:0}div[data-testid=media-container][data-position=bottom] video,div[data-testid=media-container][data-position=bottom] canvas{bottom:0}#game-stream video{margin:auto;align-self:center;background:#000;position:absolute;left:0;right:0}#game-stream canvas{align-self:center;margin:auto;position:absolute;left:0;right:0}#game-stream.bx-taking-screenshot:before{animation:bx-anim-taking-screenshot .5s ease;content:\\' \\';position:absolute;width:100%;height:100%;z-index:var(--bx-screenshot-animation-z-index)}#gamepass-dialog-root div[class^=Guide-module__guide] .bx-button{overflow:visible;margin-bottom:12px}@-moz-keyframes bx-anim-taking-screenshot{0%{border:0 solid rgba(255,255,255,0.502)}50%{border:8px solid rgba(255,255,255,0.502)}100%{border:0 solid rgba(255,255,255,0.502)}}@-webkit-keyframes bx-anim-taking-screenshot{0%{border:0 solid rgba(255,255,255,0.502)}50%{border:8px solid rgba(255,255,255,0.502)}100%{border:0 solid rgba(255,255,255,0.502)}}@-o-keyframes bx-anim-taking-screenshot{0%{border:0 solid rgba(255,255,255,0.502)}50%{border:8px solid rgba(255,255,255,0.502)}100%{border:0 solid rgba(255,255,255,0.502)}}@keyframes bx-anim-taking-screenshot{0%{border:0 solid rgba(255,255,255,0.502)}50%{border:8px solid rgba(255,255,255,0.502)}100%{border:0 solid rgba(255,255,255,0.502)}}.bx-number-stepper{text-align:center}.bx-number-stepper > div{display:flex;align-items:center}.bx-number-stepper > div span{flex:1;display:inline-block;min-width:40px;font-family:var(--bx-monospaced-font);white-space:pre;font-size:13px;margin:0 4px}.bx-number-stepper > div button{flex-shrink:0;border:none;width:24px;height:24px;margin:0;line-height:24px;background-color:var(--bx-default-button-color);color:#fff;border-radius:4px;font-weight:bold;font-size:14px;font-family:var(--bx-monospaced-font)}@media (hover:hover){.bx-number-stepper > div button:hover{background-color:var(--bx-default-button-hover-color)}}.bx-number-stepper > div button:active{background-color:var(--bx-default-button-hover-color)}.bx-number-stepper > div button:disabled + span{font-family:var(--bx-title-font)}.bx-number-stepper input[type=range]{display:block;margin:8px 0 2px auto;min-width:180px;width:100%;color:#959595 !important}.bx-number-stepper input[type=range]:disabled,.bx-number-stepper button:disabled{display:none}.bx-number-stepper[data-disabled=true] input[type=range],.bx-number-stepper[disabled=true] input[type=range],.bx-number-stepper[data-disabled=true] button,.bx-number-stepper[disabled=true] button{display:none}.bx-dual-number-stepper > span{display:block;font-family:var(--bx-monospaced-font);font-size:13px;white-space:pre;margin:0 4px;text-align:center}.bx-dual-number-stepper > div input[type=range]{display:block;width:100%;min-width:180px;background:transparent;color:#959595 !important;appearance:none;padding:8px 0}.bx-dual-number-stepper > div input[type=range]::-webkit-slider-runnable-track{background:linear-gradient(90deg,#fff var(--from),var(--bx-primary-button-color) var(--from) var(--to),#fff var(--to) 100%);height:8px;border-radius:2px}.bx-dual-number-stepper > div input[type=range]::-moz-range-track{background:linear-gradient(90deg,#fff var(--from),var(--bx-primary-button-color) var(--from) var(--to),#fff var(--to) 100%);height:8px;border-radius:2px}.bx-dual-number-stepper > div input[type=range]::-webkit-slider-thumb{margin-top:-4px;appearance:none;width:4px;height:16px;background:#00b85f;border:none;border-radius:2px}.bx-dual-number-stepper > div input[type=range]::-moz-range-thumb{margin-top:-4px;appearance:none;width:4px;height:16px;background:#00b85f;border:none;border-radius:2px}.bx-dual-number-stepper > div input[type=range]:hover::-webkit-slider-runnable-track,.bx-dual-number-stepper > div input[type=range].bx-dual-number-stepper > div input[type=range]:active::-webkit-slider-runnable-track,.bx-dual-number-stepper > div input[type=range]:focus::-webkit-slider-runnable-track{background:linear-gradient(90deg,#fff var(--from),#006635 var(--from) var(--to),#fff var(--to) 100%)}.bx-dual-number-stepper > div input[type=range]:hover::-moz-range-track,.bx-dual-number-stepper > div input[type=range].bx-dual-number-stepper > div input[type=range]:active::-moz-range-track,.bx-dual-number-stepper > div input[type=range]:focus::-moz-range-track{background:linear-gradient(90deg,#fff var(--from),#006635 var(--from) var(--to),#fff var(--to) 100%)}.bx-dual-number-stepper > div input[type=range]:hover::-webkit-slider-thumb,.bx-dual-number-stepper > div input[type=range].bx-dual-number-stepper > div input[type=range]:active::-webkit-slider-thumb,.bx-dual-number-stepper > div input[type=range]:focus::-webkit-slider-thumb{background:#fb3232}.bx-dual-number-stepper > div input[type=range]:hover::-moz-range-thumb,.bx-dual-number-stepper > div input[type=range].bx-dual-number-stepper > div input[type=range]:active::-moz-range-thumb,.bx-dual-number-stepper > div input[type=range]:focus::-moz-range-thumb{background:#fb3232}.bx-dual-number-stepper[data-disabled=true] input[type=range],.bx-dual-number-stepper[disabled=true] input[type=range]{display:none}#bx-game-bar{z-index:var(--bx-game-bar-z-index);position:fixed;bottom:0;width:40px;height:90px;overflow:visible;cursor:pointer}#bx-game-bar > svg{display:none;pointer-events:none;position:absolute;height:28px;margin-top:16px}@media (hover:hover){#bx-game-bar:hover > svg{display:block}}#bx-game-bar .bx-game-bar-container{opacity:0;position:absolute;display:flex;overflow:hidden;background:rgba(26,27,30,0.91);box-shadow:0 0 6px #1c1c1c;transition:opacity .1s ease-in}#bx-game-bar .bx-game-bar-container.bx-show{opacity:.9}#bx-game-bar .bx-game-bar-container.bx-show + svg{display:none !important}#bx-game-bar .bx-game-bar-container.bx-hide{opacity:0;pointer-events:none}#bx-game-bar .bx-game-bar-container button{width:60px;height:60px;border-radius:0}#bx-game-bar .bx-game-bar-container button svg{width:28px;height:28px;transition:transform .08s ease 0s}#bx-game-bar .bx-game-bar-container button:hover{border-radius:0}#bx-game-bar .bx-game-bar-container button:active svg{transform:scale(.75)}#bx-game-bar .bx-game-bar-container button.bx-activated{background-color:#fff}#bx-game-bar .bx-game-bar-container button.bx-activated svg{filter:invert(1)}#bx-game-bar .bx-game-bar-container div[data-activated] button{display:none}#bx-game-bar .bx-game-bar-container div[data-activated=\\'false\\'] button:first-of-type{display:block}#bx-game-bar .bx-game-bar-container div[data-activated=\\'true\\'] button:last-of-type{display:block}#bx-game-bar[data-position=\"bottom-left\"]{left:0;direction:ltr}#bx-game-bar[data-position=\"bottom-left\"] .bx-game-bar-container{border-radius:0 10px 10px 0}#bx-game-bar[data-position=\"bottom-right\"]{right:0;direction:rtl}#bx-game-bar[data-position=\"bottom-right\"] .bx-game-bar-container{direction:ltr;border-radius:10px 0 0 10px}.bx-badges{margin-left:0;user-select:none;-webkit-user-select:none}.bx-badge{border:none;display:inline-block;line-height:24px;color:#fff;font-family:var(--bx-title-font-semibold);font-size:14px;font-weight:400;margin:0 8px 8px 0;box-shadow:0 0 6px #000;border-radius:4px}.bx-badge-name{background-color:#2d3036;border-radius:4px 0 0 4px}.bx-badge-name svg{width:16px;height:16px}.bx-badge-value{background-color:#808080;border-radius:0 4px 4px 0}.bx-badge-name,.bx-badge-value{display:inline-block;padding:0 8px;line-height:30px;vertical-align:bottom}.bx-badge-battery[data-charging=true] span:first-of-type::after{content:\\' ⚡️\\'}div[class^=StreamMenu-module__container] .bx-badges{position:absolute;max-width:500px}#gamepass-dialog-root .bx-badges{position:fixed;top:60px;left:460px;max-width:500px}@media (min-width:568px) and (max-height:480px){#gamepass-dialog-root .bx-badges{position:unset;top:unset;left:unset;margin:8px 0}}.bx-stats-bar{display:flex;flex-direction:row;gap:8px;user-select:none;-webkit-user-select:none;position:fixed;top:0;background-color:#000;color:#fff;font-family:var(--bx-monospaced-font);font-size:.9rem;padding-left:8px;z-index:var(--bx-stats-bar-z-index);text-wrap:nowrap}.bx-stats-bar[data-stats*=\"[time]\"] > .bx-stat-time,.bx-stats-bar[data-stats*=\"[play]\"] > .bx-stat-play,.bx-stats-bar[data-stats*=\"[batt]\"] > .bx-stat-batt,.bx-stats-bar[data-stats*=\"[fps]\"] > .bx-stat-fps,.bx-stats-bar[data-stats*=\"[ping]\"] > .bx-stat-ping,.bx-stats-bar[data-stats*=\"[jit]\"] > .bx-stat-jit,.bx-stats-bar[data-stats*=\"[btr]\"] > .bx-stat-btr,.bx-stats-bar[data-stats*=\"[dt]\"] > .bx-stat-dt,.bx-stats-bar[data-stats*=\"[pl]\"] > .bx-stat-pl,.bx-stats-bar[data-stats*=\"[fl]\"] > .bx-stat-fl,.bx-stats-bar[data-stats*=\"[dl]\"] > .bx-stat-dl,.bx-stats-bar[data-stats*=\"[ul]\"] > .bx-stat-ul{display:inline-flex;align-items:baseline}.bx-stats-bar[data-stats$=\"[time]\"] > .bx-stat-time,.bx-stats-bar[data-stats$=\"[play]\"] > .bx-stat-play,.bx-stats-bar[data-stats$=\"[batt]\"] > .bx-stat-batt,.bx-stats-bar[data-stats$=\"[fps]\"] > .bx-stat-fps,.bx-stats-bar[data-stats$=\"[ping]\"] > .bx-stat-ping,.bx-stats-bar[data-stats$=\"[jit]\"] > .bx-stat-jit,.bx-stats-bar[data-stats$=\"[btr]\"] > .bx-stat-btr,.bx-stats-bar[data-stats$=\"[dt]\"] > .bx-stat-dt,.bx-stats-bar[data-stats$=\"[pl]\"] > .bx-stat-pl,.bx-stats-bar[data-stats$=\"[fl]\"] > .bx-stat-fl,.bx-stats-bar[data-stats$=\"[dl]\"] > .bx-stat-dl,.bx-stats-bar[data-stats$=\"[ul]\"] > .bx-stat-ul{border-right:none}.bx-stats-bar::before{display:none;content:\\'👀\\';vertical-align:middle;margin-right:8px}.bx-stats-bar[data-display=glancing]::before{display:inline-block}.bx-stats-bar[data-position=top-left]{left:0;border-radius:0 0 4px 0}.bx-stats-bar[data-position=top-right]{right:0;border-radius:0 0 0 4px}.bx-stats-bar[data-position=top-center]{transform:translate(-50%,0);left:50%;border-radius:0 0 4px 4px}.bx-stats-bar[data-shadow=true]{background:none;filter:drop-shadow(1px 0 0 rgba(0,0,0,0.941)) drop-shadow(-1px 0 0 rgba(0,0,0,0.941)) drop-shadow(0 1px 0 rgba(0,0,0,0.941)) drop-shadow(0 -1px 0 rgba(0,0,0,0.941))}.bx-stats-bar > div{display:none;border-right:1px solid #fff;padding-right:8px}.bx-stats-bar label{margin:0 8px 0 0;font-family:var(--bx-title-font);font-size:70%;font-weight:bold;vertical-align:middle;cursor:help}.bx-stats-bar span{display:inline-block;text-align:right;vertical-align:middle;white-space:pre}.bx-stats-bar span[data-grade=good]{color:#6bffff}.bx-stats-bar span[data-grade=ok]{color:#fff16b}.bx-stats-bar span[data-grade=bad]{color:#ff5f5f}.bx-mkb-settings{display:flex;flex-direction:column;flex:1;padding-bottom:10px;overflow:hidden}.bx-mkb-pointer-lock-msg{user-select:none;-webkit-user-select:none;position:fixed;left:50%;bottom:40px;transform:translateX(-50%);margin:auto;background:#151515;z-index:var(--bx-mkb-pointer-lock-msg-z-index);color:#fff;font-weight:400;font-family:\"Segoe UI\",Arial,Helvetica,sans-serif;font-size:1.3rem;padding:12px;border-radius:8px;align-items:center;box-shadow:0 0 6px #000;min-width:300px;opacity:.9;display:flex;flex-direction:column;gap:10px}.bx-mkb-pointer-lock-msg:hover{opacity:1}.bx-mkb-pointer-lock-msg > p{margin:0;width:100%;font-size:22px;margin-bottom:4px;font-weight:bold;text-align:left}.bx-mkb-pointer-lock-msg > div{width:100%;display:flex;flex-direction:row;gap:10px}.bx-mkb-pointer-lock-msg > div button:first-of-type{flex-shrink:1}.bx-mkb-pointer-lock-msg > div button:last-of-type{flex-grow:1}.bx-mkb-key-row{display:flex;margin-bottom:10px;align-items:center;gap:20px}.bx-mkb-key-row label{margin-bottom:0;font-family:var(--bx-promptfont-font);font-size:32px;text-align:center}.bx-mkb-settings.bx-editing .bx-mkb-key-row button{background:#393939;border-radius:4px;border:none}.bx-mkb-settings.bx-editing .bx-mkb-key-row button:hover{background:#333;cursor:pointer}.bx-mkb-action-buttons > div{text-align:right;display:none}.bx-mkb-action-buttons button{margin-left:8px}.bx-mkb-settings:not(.bx-editing) .bx-mkb-action-buttons > div:first-child{display:block}.bx-mkb-settings.bx-editing .bx-mkb-action-buttons > div:last-child{display:block}.bx-mkb-note{display:block;margin:0 0 10px;font-size:12px;text-align:center}button.bx-binding-button{flex:1;min-height:38px;border:none;border-radius:4px;font-size:14px;color:#fff;display:flex;align-items:center;align-self:center;padding:0 6px}button.bx-binding-button:disabled{background:#131416;padding:0 8px}button.bx-binding-button:not(:disabled){border:2px solid transparent;border-top:none;border-bottom:4px solid #252525;background:#3b3b3b;cursor:pointer}button.bx-binding-button:not(:disabled):hover,button.bx-binding-button:not(:disabled).bx-focusable:focus{background:#20b217;border-bottom-color:#186c13}button.bx-binding-button:not(:disabled):active{background:#16900f;border-bottom:3px solid #0c4e08;border-left-width:2px;border-right-width:2px}button.bx-binding-button:not(:disabled).bx-focusable:focus::after{top:-6px;left:-8px;right:-8px;bottom:-10px}.bx-settings-row .bx-binding-button-wrapper button.bx-binding-button{min-width:60px}.bx-controller-customizations-container .bx-btn-detect{display:block;margin-bottom:20px}.bx-controller-customizations-container .bx-btn-detect.bx-monospaced{background:none;font-weight:bold;font-size:12px}.bx-controller-customizations-container .bx-buttons-grid{display:grid;grid-template-columns:auto auto;column-gap:20px;row-gap:10px;margin-bottom:20px}.bx-controller-key-row{display:flex;align-items:stretch}.bx-controller-key-row > label{margin-bottom:0;font-family:var(--bx-promptfont-font);font-size:32px;text-align:center;min-width:50px;flex-shrink:0;display:flex;align-self:center}.bx-controller-key-row > label::after{content:\\'❯\\';margin:0 12px;font-size:16px;align-self:center}.bx-controller-key-row .bx-select{width:100% !important}.bx-controller-key-row .bx-select > div{min-width:50px}.bx-controller-key-row .bx-select label{font-family:var(--bx-promptfont-font),var(--bx-normal-font);font-size:32px;text-align:center;margin-bottom:6px;height:40px;line-height:40px}.bx-controller-key-row:hover > label{color:#ffe64b}.bx-controller-key-row:hover > label::after{color:#fff}.bx-controller-customization-summary{display:grid;grid-template-columns:repeat(3,1fr);gap:8px;margin-top:10px}.bx-controller-customization-summary span{font-family:var(--bx-promptfont);font-size:24px;border-radius:6px;background:#131313;color:#fff;display:inline-block;padding:2px;text-align:center}.bx-product-details-icons{padding:8px;border-radius:4px}.bx-product-details-icons svg{margin-right:8px}.bx-product-details-buttons{display:flex;gap:10px;flex-direction:row}.bx-product-details-buttons button{max-width:max-content;margin:10px 0 0 0;display:flex}@media (min-width:568px) and (max-height:480px){.bx-product-details-buttons{flex-direction:column}.bx-product-details-buttons button{margin:8px 0 0 10px}}',\r\n    PREF_HIDE_SECTIONS = getGlobalPref(\"ui.hideSections\"),\r\n    selectorToHide = [];\r\n  if (PREF_HIDE_SECTIONS.includes(\"news\"))\r\n    selectorToHide.push(\"#BodyContent > div[class*=CarouselRow-module]\");\r\n  if (\r\n    getGlobalPref(\"block.features\").includes(\"byog\") ||\r\n    getGlobalPref(\"ui.hideSections\").includes(\"byog\")\r\n  )\r\n    selectorToHide.push(\r\n      \"#BodyContent > div[class*=ByogRow-module__container___]\"\r\n    );\r\n  if (PREF_HIDE_SECTIONS.includes(\"all-games\"))\r\n    selectorToHide.push(\r\n      \"#BodyContent div[class*=AllGamesRow-module__gridContainer]\"\r\n    ),\r\n      selectorToHide.push(\r\n        \"#BodyContent div[class*=AllGamesRow-module__rowHeader]\"\r\n      );\r\n  if (PREF_HIDE_SECTIONS.includes(\"most-popular\"))\r\n    selectorToHide.push(\r\n      '#BodyContent div[class*=HomePage-module__bottomSpacing]:has(a[href=\"/play/gallery/popular\"])'\r\n    );\r\n  if (PREF_HIDE_SECTIONS.includes(\"touch\"))\r\n    selectorToHide.push(\r\n      '#BodyContent div[class*=HomePage-module__bottomSpacing]:has(a[href=\"/play/gallery/touch\"])'\r\n    );\r\n  if (PREF_HIDE_SECTIONS.includes(\"recently-added\"))\r\n    selectorToHide.push(\r\n      '#BodyContent div[class*=HomePage-module__bottomSpacing]:has(a[href=\"/play/gallery/recently-added\"])'\r\n    );\r\n  if (PREF_HIDE_SECTIONS.includes(\"genres\"))\r\n    selectorToHide.push(\"#BodyContent div[class*=HomePage-module__genresRow]\");\r\n  if (\r\n    containsAll(PREF_HIDE_SECTIONS, [\r\n      \"recently-added\",\r\n      \"leaving-soon\",\r\n      \"genres\",\r\n      \"all-games\",\r\n    ])\r\n  )\r\n    selectorToHide.push(\r\n      \"#BodyContent div[class*=GamePassPromoSection-module__container]\"\r\n    );\r\n  if (getGlobalPref(\"block.features\").includes(\"friends\"))\r\n    selectorToHide.push(\r\n      \"#gamepass-dialog-root div[class^=AchievementsPreview-module__container] + button[class*=HomeLandingPage-module__button]\"\r\n    );\r\n  if (selectorToHide) css += selectorToHide.join(\",\") + \"{ display: none; }\";\r\n  if (getGlobalPref(\"ui.theme\") === \"dark-oled\")\r\n    css +=\r\n      'body[data-theme=dark]{--gds-containerSolidAppBackground:#000 !important}div[aria-hidden=true][class^=BackgroundImageAbsoluteContainer][class*=ProductDetailPage-module__backgroundImageGradient]:after{background:radial-gradient(ellipse 100% 100% at 50% 0,rgba(21,21,23,0.549) 0,rgba(26,27,30,0.651) 32%,#000 100%) !important}a[href=\"/play/gallery/all-games\"][class*=AllGamesRow-module__seeAllCloudGames]{background:none !important}';\r\n  if (getGlobalPref(\"ui.reduceAnimations\"))\r\n    css +=\r\n      \"div[class^=GameCard-module__gameTitleInnerWrapper],div[class^=ScrollArrows-module],div[class^=ContextMenu-module__][class*=Dropdown-module__dropdownWrapper]{animation:none !important;transition:none !important}\";\r\n  if (getGlobalPref(\"ui.systemMenu.hideHandle\"))\r\n    css +=\r\n      \"#StreamHud div[class^=Grip-module__container]{visibility:hidden}@media (hover:hover){#StreamHud button[class^=GripHandle-module__container]:hover div[class^=Grip-module__container]{visibility:visible}}#StreamHud button[class^=GripHandle-module__container][aria-expanded=true] div[class^=Grip-module__container]{visibility:visible}#StreamHud button[class^=GripHandle-module__container][aria-expanded=false]{background-color:transparent !important}#StreamHud div[class^=StreamHUD-module__buttonsContainer]{padding:0 !important}\";\r\n  if (\r\n    ((css +=\r\n      \"#game-stream div[class*=StreamMenu-module__menu]{min-width:100vw !important}\"),\r\n    getGlobalPref(\"ui.streamMenu.simplify\"))\r\n  )\r\n    css +=\r\n      \"#game-stream div[class*=Menu-module__scrollable]{--bxStreamMenuItemSize:80px;--streamMenuItemSize:calc(var(--bxStreamMenuItemSize) + 40px) !important}.bx-badges{top:calc(var(--streamMenuItemSize) - 20px)}body[data-media-type=tv] .bx-badges{top:calc(var(--streamMenuItemSize) - 10px) !important}#game-stream button[class*=MenuItem-module__container]{min-width:auto !important;min-height:auto !important;width:var(--bxStreamMenuItemSize) !important;height:var(--bxStreamMenuItemSize) !important}#game-stream div[class*=MenuItem-module__label]{display:none !important}#game-stream svg[class*=MenuItem-module__icon]{width:36px;height:100% !important;padding:0 !important;margin:0 !important}\";\r\n  else\r\n    css +=\r\n      \"body[data-media-type=tv] .bx-badges{top:calc(var(--streamMenuItemSize) + 30px)}body:not([data-media-type=tv]) .bx-badges{top:calc(var(--streamMenuItemSize) + 20px)}body:not([data-media-type=tv]) button[class*=MenuItem-module__container]{min-width:auto !important;width:100px !important}body:not([data-media-type=tv]) button[class*=MenuItem-module__container]:nth-child(n+2){margin-left:10px !important}body:not([data-media-type=tv]) div[class*=MenuItem-module__label]{margin-left:8px !important;margin-right:8px !important}\";\r\n  if (getGlobalPref(\"ui.hideScrollbar\"))\r\n    css += \"html{scrollbar-width:none}body::-webkit-scrollbar{display:none}\";\r\n  let $style = CE(\"style\", !1, css);\r\n  document.documentElement.appendChild($style);\r\n}\r\nfunction preloadFonts() {\r\n  let $link = CE(\"link\", {\r\n    rel: \"preload\",\r\n    href: \"https://redphx.github.io/better-xcloud/fonts/promptfont.otf\",\r\n    as: \"font\",\r\n    type: \"font/otf\",\r\n    crossorigin: \"\",\r\n  });\r\n  document.querySelector(\"head\")?.appendChild($link);\r\n}\r\nclass MouseCursorHider {\r\n  static instance;\r\n  static getInstance() {\r\n    if (typeof MouseCursorHider.instance === \"undefined\")\r\n      if (!getGlobalPref(\"mkb.enabled\") && getGlobalPref(\"mkb.cursor.hideIdle\"))\r\n        MouseCursorHider.instance = new MouseCursorHider();\r\n      else MouseCursorHider.instance = null;\r\n    return MouseCursorHider.instance;\r\n  }\r\n  timeoutId;\r\n  isCursorVisible = !0;\r\n  show() {\r\n    document.body && (document.body.style.cursor = \"unset\"),\r\n      (this.isCursorVisible = !0);\r\n  }\r\n  hide() {\r\n    document.body && (document.body.style.cursor = \"none\"),\r\n      (this.timeoutId = null),\r\n      (this.isCursorVisible = !1);\r\n  }\r\n  onMouseMove = (e) => {\r\n    !this.isCursorVisible && this.show(),\r\n      this.timeoutId && clearTimeout(this.timeoutId),\r\n      (this.timeoutId = window.setTimeout(this.hide, 3000));\r\n  };\r\n  start() {\r\n    this.show(), document.addEventListener(\"mousemove\", this.onMouseMove);\r\n  }\r\n  stop() {\r\n    this.timeoutId && clearTimeout(this.timeoutId),\r\n      (this.timeoutId = null),\r\n      document.removeEventListener(\"mousemove\", this.onMouseMove),\r\n      this.show();\r\n  }\r\n}\r\nfunction patchHistoryMethod(type) {\r\n  let orig = window.history[type];\r\n  return function (...args) {\r\n    return (\r\n      BxEvent.dispatch(window, BxEvent.POPSTATE, { arguments: args }),\r\n      orig.apply(this, arguments)\r\n    );\r\n  };\r\n}\r\nfunction onHistoryChanged(e) {\r\n  if (\r\n    e &&\r\n    e.arguments &&\r\n    e.arguments[0] &&\r\n    e.arguments[0].origin === \"better-xcloud\"\r\n  )\r\n    return;\r\n  window.setTimeout(RemotePlayManager.detect, 10),\r\n    NavigationDialogManager.getInstance().hide(),\r\n    LoadingScreen.reset(),\r\n    BxEventBus.Stream.emit(\"state.stopped\", {});\r\n}\r\nfunction setCodecPreferences(sdp, preferredCodec) {\r\n  let h264Pattern = /a=fmtp:(\\d+).*profile-level-id=([0-9a-f]{6})/g,\r\n    profilePrefix =\r\n      preferredCodec === \"high\"\r\n        ? \"4d\"\r\n        : preferredCodec === \"low\"\r\n        ? \"420\"\r\n        : \"42e\",\r\n    preferredCodecIds = [],\r\n    matches = sdp.matchAll(h264Pattern) || [];\r\n  for (let match of matches) {\r\n    let id = match[1];\r\n    if (match[2].startsWith(profilePrefix)) preferredCodecIds.push(id);\r\n  }\r\n  if (!preferredCodecIds.length) return sdp;\r\n  let lines = sdp.split(`\\r\r\n`);\r\n  for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\r\n    let line = lines[lineIndex];\r\n    if (!line.startsWith(\"m=video\")) continue;\r\n    let tmp = line.trim().split(\" \"),\r\n      ids = tmp.slice(3);\r\n    (ids = ids.filter((item2) => !preferredCodecIds.includes(item2))),\r\n      (ids = preferredCodecIds.concat(ids)),\r\n      (lines[lineIndex] = tmp.slice(0, 3).concat(ids).join(\" \"));\r\n    break;\r\n  }\r\n  return lines.join(`\\r\r\n`);\r\n}\r\nfunction patchSdpBitrate(sdp, video, audio) {\r\n  let lines = sdp.split(`\\r\r\n`),\r\n    mediaSet = new Set();\r\n  !!video && mediaSet.add(\"video\"), !!audio && mediaSet.add(\"audio\");\r\n  let bitrate = { video, audio };\r\n  for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {\r\n    let media = \"\",\r\n      line = lines[lineNumber];\r\n    if (!line.startsWith(\"m=\")) continue;\r\n    for (let m of mediaSet)\r\n      if (line.startsWith(`m=${m}`)) {\r\n        (media = m), mediaSet.delete(media);\r\n        break;\r\n      }\r\n    if (!media) continue;\r\n    let bLine = `b=AS:${bitrate[media]}`;\r\n    while ((lineNumber++, lineNumber < lines.length)) {\r\n      if (\r\n        ((line = lines[lineNumber]),\r\n        line.startsWith(\"i=\") || line.startsWith(\"c=\"))\r\n      )\r\n        continue;\r\n      if (line.startsWith(\"b=AS:\")) {\r\n        lines[lineNumber] = bLine;\r\n        break;\r\n      }\r\n      if (line.startsWith(\"m=\")) {\r\n        lines.splice(lineNumber, 0, bLine);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return lines.join(`\\r\r\n`);\r\n}\r\nclass WebGL2Player extends BaseCanvasPlayer {\r\n  gl = null;\r\n  resources = [];\r\n  program = null;\r\n  constructor($video) {\r\n    super(\"webgl2\", $video, \"WebGL2Player\");\r\n  }\r\n  updateCanvas() {\r\n    console.log(\"updateCanvas\", this.options);\r\n    let gl = this.gl,\r\n      program = this.program,\r\n      filterId = this.toFilterId(this.options.processing);\r\n    gl.uniform2f(\r\n      gl.getUniformLocation(program, \"iResolution\"),\r\n      this.$canvas.width,\r\n      this.$canvas.height\r\n    ),\r\n      gl.uniform1i(gl.getUniformLocation(program, \"filterId\"), filterId),\r\n      gl.uniform1f(\r\n        gl.getUniformLocation(program, \"sharpenFactor\"),\r\n        this.options.sharpness\r\n      ),\r\n      gl.uniform1f(\r\n        gl.getUniformLocation(program, \"brightness\"),\r\n        this.options.brightness / 100\r\n      ),\r\n      gl.uniform1f(\r\n        gl.getUniformLocation(program, \"contrast\"),\r\n        this.options.contrast / 100\r\n      ),\r\n      gl.uniform1f(\r\n        gl.getUniformLocation(program, \"saturation\"),\r\n        this.options.saturation / 100\r\n      );\r\n  }\r\n  updateFrame() {\r\n    let gl = this.gl;\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D,\r\n      0,\r\n      gl.RGB,\r\n      gl.RGB,\r\n      gl.UNSIGNED_BYTE,\r\n      this.$video\r\n    ),\r\n      gl.drawArrays(gl.TRIANGLES, 0, 3);\r\n  }\r\n  async setupShaders() {\r\n    let gl = this.$canvas.getContext(\"webgl2\", {\r\n      isBx: !0,\r\n      antialias: !0,\r\n      alpha: !1,\r\n      depth: !1,\r\n      preserveDrawingBuffer: !1,\r\n      stencil: !1,\r\n      powerPreference: getStreamPref(\"video.player.powerPreference\"),\r\n    });\r\n    (this.gl = gl),\r\n      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferWidth);\r\n    let vShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(\r\n      vShader,\r\n      `#version 300 es\r\nin vec4 position;void main() {gl_Position = position;}`\r\n    ),\r\n      gl.compileShader(vShader);\r\n    let fShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(\r\n      fShader,\r\n      `#version 300 es\r\nprecision mediump float;uniform sampler2D data;uniform vec2 iResolution;const int FILTER_UNSHARP_MASKING = 1;const float CAS_CONTRAST_PEAK = 0.8 * -3.0 + 8.0;const vec3 LUMINOSITY_FACTOR = vec3(0.299, 0.587, 0.114);uniform int filterId;uniform float sharpenFactor;uniform float brightness;uniform float contrast;uniform float saturation;out vec4 fragColor;vec3 clarityBoost(sampler2D tex, vec2 coord, vec3 e) {vec2 texelSize = 1.0 / iResolution.xy;vec3 a = texture(tex, coord + texelSize * vec2(-1, 1)).rgb;vec3 b = texture(tex, coord + texelSize * vec2(0, 1)).rgb;vec3 c = texture(tex, coord + texelSize * vec2(1, 1)).rgb;vec3 d = texture(tex, coord + texelSize * vec2(-1, 0)).rgb;vec3 f = texture(tex, coord + texelSize * vec2(1, 0)).rgb;vec3 g = texture(tex, coord + texelSize * vec2(-1, -1)).rgb;vec3 h = texture(tex, coord + texelSize * vec2(0, -1)).rgb;vec3 i = texture(tex, coord + texelSize * vec2(1, -1)).rgb;if (filterId == FILTER_UNSHARP_MASKING) {vec3 gaussianBlur = (a + c + g + i) * 1.0 + (b + d + f + h) * 2.0 + e * 4.0;gaussianBlur /= 16.0;return e + (e - gaussianBlur) * sharpenFactor / 3.0;}vec3 minRgb = min(min(min(d, e), min(f, b)), h);minRgb += min(min(a, c), min(g, i));vec3 maxRgb = max(max(max(d, e), max(f, b)), h);maxRgb += max(max(a, c), max(g, i));vec3 reciprocalMaxRgb = 1.0 / maxRgb;vec3 amplifyRgb = clamp(min(minRgb, 2.0 - maxRgb) * reciprocalMaxRgb, 0.0, 1.0);amplifyRgb = inversesqrt(amplifyRgb);vec3 weightRgb = -(1.0 / (amplifyRgb * CAS_CONTRAST_PEAK));vec3 reciprocalWeightRgb = 1.0 / (4.0 * weightRgb + 1.0);vec3 window = b + d + f + h;vec3 outColor = clamp((window * weightRgb + e) * reciprocalWeightRgb, 0.0, 1.0);return mix(e, outColor, sharpenFactor / 2.0);}void main() {vec2 uv = gl_FragCoord.xy / iResolution.xy;vec3 color = texture(data, uv).rgb;color = sharpenFactor > 0.0 ? clarityBoost(data, uv, color) : color;color = saturation != 1.0 ? mix(vec3(dot(color, LUMINOSITY_FACTOR)), color, saturation) : color;color = contrast * (color - 0.5) + 0.5;color = brightness * color;fragColor = vec4(color, 1.0);}`\r\n    ),\r\n      gl.compileShader(fShader);\r\n    let program = gl.createProgram();\r\n    if (\r\n      ((this.program = program),\r\n      gl.attachShader(program, vShader),\r\n      gl.attachShader(program, fShader),\r\n      gl.linkProgram(program),\r\n      gl.useProgram(program),\r\n      !gl.getProgramParameter(program, gl.LINK_STATUS))\r\n    )\r\n      console.error(`Link failed: ${gl.getProgramInfoLog(program)}`),\r\n        console.error(`vs info-log: ${gl.getShaderInfoLog(vShader)}`),\r\n        console.error(`fs info-log: ${gl.getShaderInfoLog(fShader)}`);\r\n    this.updateCanvas();\r\n    let buffer = gl.createBuffer();\r\n    this.resources.push(buffer),\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer),\r\n      gl.bufferData(\r\n        gl.ARRAY_BUFFER,\r\n        new Float32Array([-1, -1, 3, -1, -1, 3]),\r\n        gl.STATIC_DRAW\r\n      ),\r\n      gl.enableVertexAttribArray(0),\r\n      gl.vertexAttribPointer(0, 2, gl.FLOAT, !1, 0, 0);\r\n    let texture = gl.createTexture();\r\n    this.resources.push(texture),\r\n      gl.bindTexture(gl.TEXTURE_2D, texture),\r\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !0),\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE),\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE),\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR),\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR),\r\n      gl.uniform1i(gl.getUniformLocation(program, \"data\"), 0),\r\n      gl.activeTexture(gl.TEXTURE0);\r\n  }\r\n  destroy() {\r\n    super.destroy();\r\n    let gl = this.gl;\r\n    if (!gl) return;\r\n    gl.getExtension(\"WEBGL_lose_context\")?.loseContext(), gl.useProgram(null);\r\n    for (let resource of this.resources)\r\n      if (resource instanceof WebGLProgram) gl.deleteProgram(resource);\r\n      else if (resource instanceof WebGLShader) gl.deleteShader(resource);\r\n      else if (resource instanceof WebGLTexture) gl.deleteTexture(resource);\r\n      else if (resource instanceof WebGLBuffer) gl.deleteBuffer(resource);\r\n    this.gl = null;\r\n  }\r\n  refreshPlayer() {\r\n    this.updateCanvas();\r\n  }\r\n}\r\nclass VideoPlayer extends BaseStreamPlayer {\r\n  $videoCss;\r\n  $usmMatrix;\r\n  constructor($video, logTag) {\r\n    super(\"default\", \"video\", $video, logTag);\r\n  }\r\n  init() {\r\n    super.init();\r\n    let xmlns = \"http://www.w3.org/2000/svg\",\r\n      $svg = CE(\r\n        \"svg\",\r\n        { id: \"bx-video-filters\", class: \"bx-gone\", xmlns },\r\n        CE(\r\n          \"defs\",\r\n          { xmlns: \"http://www.w3.org/2000/svg\" },\r\n          CE(\r\n            \"filter\",\r\n            { id: \"bx-filter-usm\", xmlns },\r\n            (this.$usmMatrix = CE(\"feConvolveMatrix\", {\r\n              id: \"bx-filter-usm-matrix\",\r\n              order: \"3\",\r\n              xmlns,\r\n            }))\r\n          )\r\n        )\r\n      );\r\n    this.$videoCss = CE(\"style\", { id: \"bx-video-css\" });\r\n    let $fragment = document.createDocumentFragment();\r\n    $fragment.append(this.$videoCss, $svg),\r\n      document.documentElement.appendChild($fragment);\r\n  }\r\n  setupRendering() {}\r\n  forceDrawFrame() {}\r\n  updateCanvas() {}\r\n  refreshPlayer() {\r\n    let filters = this.getVideoPlayerFilterStyle(),\r\n      videoCss = \"\";\r\n    if (filters) videoCss += `filter: ${filters} !important;`;\r\n    if (getGlobalPref(\"screenshot.applyFilters\"))\r\n      ScreenshotManager.getInstance().updateCanvasFilters(filters);\r\n    let css = \"\";\r\n    if (videoCss) css = `#game-stream video { ${videoCss} }`;\r\n    this.$videoCss.textContent = css;\r\n  }\r\n  clearFilters() {\r\n    this.$videoCss.textContent = \"\";\r\n  }\r\n  getVideoPlayerFilterStyle() {\r\n    let filters = [],\r\n      sharpness = this.options.sharpness || 0;\r\n    if (this.options.processing === \"usm\" && sharpness != 0) {\r\n      let matrix = `0 -1 0 -1 ${(7 - (sharpness / 2 - 1) * 0.5).toFixed(\r\n        1\r\n      )} -1 0 -1 0`;\r\n      this.$usmMatrix?.setAttributeNS(null, \"kernelMatrix\", matrix),\r\n        filters.push(\"url(#bx-filter-usm)\");\r\n    }\r\n    let saturation = this.options.saturation || 100;\r\n    if (saturation != 100) filters.push(`saturate(${saturation}%)`);\r\n    let contrast = this.options.contrast || 100;\r\n    if (contrast != 100) filters.push(`contrast(${contrast}%)`);\r\n    let brightness = this.options.brightness || 100;\r\n    if (brightness != 100) filters.push(`brightness(${brightness}%)`);\r\n    return filters.join(\" \");\r\n  }\r\n}\r\nclass StreamPlayerManager {\r\n  static instance;\r\n  static getInstance = () =>\r\n    StreamPlayerManager.instance ??\r\n    (StreamPlayerManager.instance = new StreamPlayerManager());\r\n  $video;\r\n  videoPlayer;\r\n  canvasPlayer;\r\n  playerType = \"default\";\r\n  constructor() {}\r\n  setVideoElement($video) {\r\n    (this.$video = $video),\r\n      (this.videoPlayer = new VideoPlayer($video, \"VideoPlayer\")),\r\n      this.videoPlayer.init();\r\n  }\r\n  resizePlayer() {\r\n    let PREF_RATIO = getStreamPref(\"video.ratio\"),\r\n      $video = this.$video,\r\n      isNativeTouchGame =\r\n        STATES.currentStream.titleInfo?.details.hasNativeTouchSupport,\r\n      targetWidth,\r\n      targetHeight,\r\n      targetObjectFit;\r\n    if (PREF_RATIO.includes(\":\")) {\r\n      let tmp = PREF_RATIO.split(\":\"),\r\n        videoRatio = parseFloat(tmp[0]) / parseFloat(tmp[1]),\r\n        width = 0,\r\n        height = 0,\r\n        parentRect = $video.parentElement.getBoundingClientRect();\r\n      if (parentRect.width / parentRect.height > videoRatio)\r\n        (height = parentRect.height), (width = height * videoRatio);\r\n      else (width = parentRect.width), (height = width / videoRatio);\r\n      (width = Math.ceil(Math.min(parentRect.width, width))),\r\n        (height = Math.ceil(Math.min(parentRect.height, height))),\r\n        ($video.dataset.width = width.toString()),\r\n        ($video.dataset.height = height.toString());\r\n      let $parent = $video.parentElement,\r\n        position = getStreamPref(\"video.position\");\r\n      if (\r\n        ($parent.style.removeProperty(\"padding-top\"),\r\n        ($parent.dataset.position = position),\r\n        position === \"top-half\" || position === \"bottom-half\")\r\n      ) {\r\n        let padding = Math.floor((window.innerHeight - height) / 4);\r\n        if (padding > 0) {\r\n          if (position === \"bottom-half\") padding *= 3;\r\n          $parent.style.paddingTop = padding + \"px\";\r\n        }\r\n      }\r\n      (targetWidth = `${width}px`),\r\n        (targetHeight = `${height}px`),\r\n        (targetObjectFit = PREF_RATIO === \"16:9\" ? \"contain\" : \"fill\");\r\n    } else\r\n      (targetWidth = \"100%\"),\r\n        (targetHeight = \"100%\"),\r\n        (targetObjectFit = PREF_RATIO),\r\n        ($video.dataset.width = window.innerWidth.toString()),\r\n        ($video.dataset.height = window.innerHeight.toString());\r\n    if (\r\n      (($video.style.width = targetWidth),\r\n      ($video.style.height = targetHeight),\r\n      ($video.style.objectFit = targetObjectFit),\r\n      this.canvasPlayer)\r\n    ) {\r\n      let $canvas = this.canvasPlayer.getCanvas();\r\n      ($canvas.style.width = targetWidth),\r\n        ($canvas.style.height = targetHeight),\r\n        ($canvas.style.objectFit = targetObjectFit),\r\n        $video.dispatchEvent(new Event(\"resize\"));\r\n    }\r\n    if (isNativeTouchGame && this.playerType !== \"default\")\r\n      window.BX_EXPOSED.streamSession.updateDimensions();\r\n  }\r\n  switchPlayerType(type, refreshPlayer = !1) {\r\n    if (this.playerType !== type) {\r\n      let videoClass =\r\n        BX_FLAGS.DeviceInfo.deviceType === \"android-tv\"\r\n          ? \"bx-pixel\"\r\n          : \"bx-gone\";\r\n      if ((this.cleanUpCanvasPlayer(), type === \"default\"))\r\n        this.$video.classList.remove(videoClass);\r\n      else {\r\n        if (BX_FLAGS.EnableWebGPURenderer && type === \"webgpu\")\r\n          this.canvasPlayer = new WebGPUPlayer(this.$video);\r\n        else this.canvasPlayer = new WebGL2Player(this.$video);\r\n        this.canvasPlayer.init(),\r\n          this.videoPlayer.clearFilters(),\r\n          this.$video.classList.add(videoClass);\r\n      }\r\n      this.playerType = type;\r\n    }\r\n    refreshPlayer && this.refreshPlayer();\r\n  }\r\n  updateOptions(options, refreshPlayer = !1) {\r\n    (this.canvasPlayer || this.videoPlayer).updateOptions(\r\n      options,\r\n      refreshPlayer\r\n    );\r\n  }\r\n  getPlayerElement(elementType) {\r\n    if (typeof elementType === \"undefined\")\r\n      elementType = this.playerType === \"default\" ? \"video\" : \"canvas\";\r\n    if (elementType !== \"video\") return this.canvasPlayer?.getCanvas();\r\n    return this.$video;\r\n  }\r\n  getCanvasPlayer() {\r\n    return this.canvasPlayer;\r\n  }\r\n  refreshPlayer() {\r\n    if (this.playerType === \"default\") this.videoPlayer.refreshPlayer();\r\n    else\r\n      ScreenshotManager.getInstance().updateCanvasFilters(\"none\"),\r\n        this.canvasPlayer?.refreshPlayer();\r\n    this.resizePlayer();\r\n  }\r\n  getVideoPlayerFilterStyle() {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n  cleanUpCanvasPlayer() {\r\n    this.canvasPlayer?.destroy(), (this.canvasPlayer = null);\r\n  }\r\n  destroy() {\r\n    this.cleanUpCanvasPlayer();\r\n  }\r\n}\r\nfunction patchVideoApi() {\r\n  let PREF_SKIP_SPLASH_VIDEO = getGlobalPref(\"ui.splashVideo.skip\"),\r\n    showFunc = function () {\r\n      if (((this.style.visibility = \"visible\"), !this.videoWidth)) return;\r\n      let playerOptions = {\r\n          processing: getStreamPref(\"video.processing\"),\r\n          sharpness: getStreamPref(\"video.processing.sharpness\"),\r\n          saturation: getStreamPref(\"video.saturation\"),\r\n          contrast: getStreamPref(\"video.contrast\"),\r\n          brightness: getStreamPref(\"video.brightness\"),\r\n        },\r\n        streamPlayerManager = StreamPlayerManager.getInstance();\r\n      streamPlayerManager.setVideoElement(this),\r\n        streamPlayerManager.updateOptions(playerOptions, !1),\r\n        streamPlayerManager.switchPlayerType(\r\n          getStreamPref(\"video.player.type\")\r\n        ),\r\n        (STATES.currentStream.streamPlayerManager = streamPlayerManager),\r\n        BxEventBus.Stream.emit(\"state.playing\", { $video: this });\r\n    },\r\n    nativePlay = HTMLMediaElement.prototype.play;\r\n  (HTMLMediaElement.prototype.nativePlay = nativePlay),\r\n    (HTMLMediaElement.prototype.play = function () {\r\n      if (this.className && this.className.startsWith(\"XboxSplashVideo\")) {\r\n        if (PREF_SKIP_SPLASH_VIDEO)\r\n          return (\r\n            (this.volume = 0),\r\n            (this.style.display = \"none\"),\r\n            this.dispatchEvent(new Event(\"ended\")),\r\n            new Promise(() => {})\r\n          );\r\n        return nativePlay.apply(this);\r\n      }\r\n      let $parent = this.parentElement;\r\n      if (!this.src && $parent?.dataset.testid === \"media-container\")\r\n        this.addEventListener(\"loadedmetadata\", showFunc, { once: !0 });\r\n      return nativePlay.apply(this);\r\n    });\r\n}\r\nfunction patchRtcCodecs() {\r\n  if (getGlobalPref(\"stream.video.codecProfile\") === \"default\") return;\r\n  if (\r\n    typeof RTCRtpTransceiver === \"undefined\" ||\r\n    !(\"setCodecPreferences\" in RTCRtpTransceiver.prototype)\r\n  )\r\n    return !1;\r\n}\r\nfunction patchRtcPeerConnection() {\r\n  let nativeCreateDataChannel = RTCPeerConnection.prototype.createDataChannel;\r\n  RTCPeerConnection.prototype.createDataChannel = function () {\r\n    let dataChannel = nativeCreateDataChannel.apply(this, arguments);\r\n    return (\r\n      BxEventBus.Stream.emit(\"dataChannelCreated\", { dataChannel }), dataChannel\r\n    );\r\n  };\r\n  let maxVideoBitrateDef = getGlobalPrefDefinition(\"stream.video.maxBitrate\"),\r\n    maxVideoBitrate = getGlobalPref(\"stream.video.maxBitrate\"),\r\n    codec = getGlobalPref(\"stream.video.codecProfile\");\r\n  if (codec !== \"default\" || maxVideoBitrate < maxVideoBitrateDef.max) {\r\n    let nativeSetLocalDescription =\r\n      RTCPeerConnection.prototype.setLocalDescription;\r\n    RTCPeerConnection.prototype.setLocalDescription = function (description) {\r\n      if (codec !== \"default\")\r\n        arguments[0].sdp = setCodecPreferences(arguments[0].sdp, codec);\r\n      try {\r\n        if (maxVideoBitrate < maxVideoBitrateDef.max && description)\r\n          arguments[0].sdp = patchSdpBitrate(\r\n            arguments[0].sdp,\r\n            Math.round(maxVideoBitrate / 1000)\r\n          );\r\n      } catch (e) {\r\n        BxLogger.error(\"setLocalDescription\", e);\r\n      }\r\n      return nativeSetLocalDescription.apply(this, arguments);\r\n    };\r\n  }\r\n  let OrgRTCPeerConnection = window.RTCPeerConnection;\r\n  window.RTCPeerConnection = function () {\r\n    let conn = new OrgRTCPeerConnection();\r\n    return (\r\n      (STATES.currentStream.peerConnection = conn),\r\n      conn.addEventListener(\"connectionstatechange\", (e) => {\r\n        BxLogger.info(\"connectionstatechange\", conn.connectionState);\r\n      }),\r\n      conn\r\n    );\r\n  };\r\n}\r\nfunction patchAudioContext() {\r\n  let OrgAudioContext = window.AudioContext,\r\n    nativeCreateGain = OrgAudioContext.prototype.createGain;\r\n  window.AudioContext = function (options) {\r\n    if (options && options.latencyHint) options.latencyHint = 0;\r\n    let ctx = new OrgAudioContext(options);\r\n    return (\r\n      BxLogger.info(\"patchAudioContext\", ctx, options),\r\n      (ctx.createGain = function () {\r\n        let gainNode = nativeCreateGain.apply(this);\r\n        return (\r\n          (gainNode.gain.value = getStreamPref(\"audio.volume\") / 100),\r\n          (STATES.currentStream.audioGainNode = gainNode),\r\n          gainNode\r\n        );\r\n      }),\r\n      (STATES.currentStream.audioContext = ctx),\r\n      ctx\r\n    );\r\n  };\r\n}\r\nfunction patchMeControl() {\r\n  let overrideConfigs = {\r\n      enableAADTelemetry: !1,\r\n      enableTelemetry: !1,\r\n      telEvs: \"\",\r\n      oneDSUrl: \"\",\r\n    },\r\n    MSA = {\r\n      MeControl: {\r\n        API: {\r\n          setDisplayMode: () => {},\r\n          setMobileState: () => {},\r\n          addEventListener: () => {},\r\n          removeEventListener: () => {},\r\n        },\r\n      },\r\n    },\r\n    MeControl = {},\r\n    MsaHandler = {\r\n      get(target, prop, receiver) {\r\n        return target[prop];\r\n      },\r\n      set(obj, prop, value) {\r\n        if (prop === \"MeControl\" && value.Config)\r\n          value.Config = Object.assign(value.Config, overrideConfigs);\r\n        return (obj[prop] = value), !0;\r\n      },\r\n    },\r\n    MeControlHandler = {\r\n      get(target, prop, receiver) {\r\n        return target[prop];\r\n      },\r\n      set(obj, prop, value) {\r\n        if (prop === \"Config\") value = Object.assign(value, overrideConfigs);\r\n        return (obj[prop] = value), !0;\r\n      },\r\n    };\r\n  (window.MSA = new Proxy(MSA, MsaHandler)),\r\n    (window.MeControl = new Proxy(MeControl, MeControlHandler));\r\n}\r\nfunction disableAdobeAudienceManager() {\r\n  Object.defineProperty(window, \"adobe\", {\r\n    get() {\r\n      return Object.freeze({});\r\n    },\r\n  });\r\n}\r\nfunction patchCanvasContext() {\r\n  let nativeGetContext = HTMLCanvasElement.prototype.getContext;\r\n  HTMLCanvasElement.prototype.getContext = function (\r\n    contextType,\r\n    contextAttributes\r\n  ) {\r\n    if (contextType.includes(\"webgl\")) {\r\n      if (\r\n        ((contextAttributes = contextAttributes || {}), !contextAttributes.isBx)\r\n      ) {\r\n        if (\r\n          ((contextAttributes.antialias = !1),\r\n          contextAttributes.powerPreference === \"high-performance\")\r\n        )\r\n          contextAttributes.powerPreference = \"low-power\";\r\n      }\r\n    }\r\n    return nativeGetContext.apply(this, [contextType, contextAttributes]);\r\n  };\r\n}\r\nfunction patchPointerLockApi() {\r\n  Object.defineProperty(document, \"fullscreenElement\", {\r\n    configurable: !0,\r\n    get() {\r\n      return document.documentElement;\r\n    },\r\n  }),\r\n    (HTMLElement.prototype.requestFullscreen = function (options) {\r\n      return Promise.resolve();\r\n    });\r\n  let pointerLockElement = null;\r\n  Object.defineProperty(document, \"pointerLockElement\", {\r\n    configurable: !0,\r\n    get() {\r\n      return pointerLockElement;\r\n    },\r\n  }),\r\n    (HTMLElement.prototype.requestPointerLock = function () {\r\n      (pointerLockElement = document.documentElement),\r\n        window.dispatchEvent(new Event(BxEvent.POINTER_LOCK_REQUESTED));\r\n    }),\r\n    (Document.prototype.exitPointerLock = function () {\r\n      (pointerLockElement = null),\r\n        window.dispatchEvent(new Event(BxEvent.POINTER_LOCK_EXITED));\r\n    });\r\n}\r\nclass BaseGameBarAction {\r\n  constructor() {}\r\n  reset() {}\r\n  onClick(e) {\r\n    BxEventBus.Stream.emit(\"gameBar.activated\", {});\r\n  }\r\n  render() {\r\n    return this.$content;\r\n  }\r\n}\r\nclass ScreenshotAction extends BaseGameBarAction {\r\n  $content;\r\n  constructor() {\r\n    super();\r\n    this.$content = createButton({\r\n      style: 8,\r\n      icon: BxIcon.SCREENSHOT,\r\n      title: t(\"take-screenshot\"),\r\n      onClick: this.onClick,\r\n    });\r\n  }\r\n  onClick = (e) => {\r\n    super.onClick(e), ScreenshotManager.getInstance().takeScreenshot();\r\n  };\r\n}\r\nclass TouchControlAction extends BaseGameBarAction {\r\n  $content;\r\n  constructor() {\r\n    super();\r\n    let $btnEnable = createButton({\r\n        style: 8,\r\n        icon: BxIcon.TOUCH_CONTROL_ENABLE,\r\n        title: t(\"show-touch-controller\"),\r\n        onClick: this.onClick,\r\n      }),\r\n      $btnDisable = createButton({\r\n        style: 8,\r\n        icon: BxIcon.TOUCH_CONTROL_DISABLE,\r\n        title: t(\"hide-touch-controller\"),\r\n        onClick: this.onClick,\r\n        classes: [\"bx-activated\"],\r\n      });\r\n    this.$content = CE(\"div\", !1, $btnEnable, $btnDisable);\r\n  }\r\n  onClick = (e) => {\r\n    super.onClick(e);\r\n    let isVisible = TouchController.toggleVisibility();\r\n    this.$content.dataset.activated = (!isVisible).toString();\r\n  };\r\n  reset() {\r\n    this.$content.dataset.activated = \"false\";\r\n  }\r\n}\r\nclass MicrophoneAction extends BaseGameBarAction {\r\n  $content;\r\n  constructor() {\r\n    super();\r\n    let $btnDefault = createButton({\r\n        style: 8,\r\n        icon: BxIcon.MICROPHONE,\r\n        onClick: this.onClick,\r\n        classes: [\"bx-activated\"],\r\n      }),\r\n      $btnMuted = createButton({\r\n        style: 8,\r\n        icon: BxIcon.MICROPHONE_MUTED,\r\n        onClick: this.onClick,\r\n      });\r\n    (this.$content = CE(\"div\", !1, $btnMuted, $btnDefault)),\r\n      BxEventBus.Stream.on(\"microphone.state.changed\", (payload) => {\r\n        let enabled = payload.state === \"Enabled\";\r\n        (this.$content.dataset.activated = enabled.toString()),\r\n          this.$content.classList.remove(\"bx-gone\");\r\n      });\r\n  }\r\n  onClick = (e) => {\r\n    super.onClick(e);\r\n    let enabled = MicrophoneShortcut.toggle(!1);\r\n    this.$content.dataset.activated = enabled.toString();\r\n  };\r\n  reset() {\r\n    this.$content.classList.add(\"bx-gone\"),\r\n      (this.$content.dataset.activated = \"false\");\r\n  }\r\n}\r\nclass TrueAchievementsAction extends BaseGameBarAction {\r\n  $content;\r\n  constructor() {\r\n    super();\r\n    this.$content = createButton({\r\n      style: 8,\r\n      icon: BxIcon.TRUE_ACHIEVEMENTS,\r\n      onClick: this.onClick,\r\n    });\r\n  }\r\n  onClick = (e) => {\r\n    super.onClick(e), TrueAchievements.getInstance().open(!1);\r\n  };\r\n}\r\nclass SpeakerAction extends BaseGameBarAction {\r\n  $content;\r\n  constructor() {\r\n    super();\r\n    let $btnEnable = createButton({\r\n        style: 8,\r\n        icon: BxIcon.AUDIO,\r\n        onClick: this.onClick,\r\n      }),\r\n      $btnMuted = createButton({\r\n        style: 8,\r\n        icon: BxIcon.SPEAKER_MUTED,\r\n        onClick: this.onClick,\r\n        classes: [\"bx-activated\"],\r\n      });\r\n    (this.$content = CE(\"div\", !1, $btnEnable, $btnMuted)),\r\n      BxEventBus.Stream.on(\"speaker.state.changed\", (payload) => {\r\n        let enabled = payload.state === 0;\r\n        this.$content.dataset.activated = (!enabled).toString();\r\n      });\r\n  }\r\n  onClick = (e) => {\r\n    super.onClick(e), SoundShortcut.muteUnmute();\r\n  };\r\n  reset() {\r\n    this.$content.dataset.activated = \"false\";\r\n  }\r\n}\r\nclass RendererAction extends BaseGameBarAction {\r\n  $content;\r\n  constructor() {\r\n    super();\r\n    let $btnDefault = createButton({\r\n        style: 8,\r\n        icon: BxIcon.EYE,\r\n        onClick: this.onClick,\r\n      }),\r\n      $btnActivated = createButton({\r\n        style: 8,\r\n        icon: BxIcon.EYE_SLASH,\r\n        onClick: this.onClick,\r\n        classes: [\"bx-activated\"],\r\n      });\r\n    (this.$content = CE(\"div\", !1, $btnDefault, $btnActivated)),\r\n      BxEventBus.Stream.on(\"video.visibility.changed\", (payload) => {\r\n        this.$content.dataset.activated = (!payload.isVisible).toString();\r\n      });\r\n  }\r\n  onClick = (e) => {\r\n    super.onClick(e), RendererShortcut.toggleVisibility();\r\n  };\r\n  reset() {\r\n    this.$content.dataset.activated = \"false\";\r\n  }\r\n}\r\nclass GameBar {\r\n  static instance;\r\n  static getInstance() {\r\n    if (typeof GameBar.instance === \"undefined\")\r\n      if (getGlobalPref(\"gameBar.position\") !== \"off\")\r\n        GameBar.instance = new GameBar();\r\n      else GameBar.instance = null;\r\n    return GameBar.instance;\r\n  }\r\n  LOG_TAG = \"GameBar\";\r\n  static VISIBLE_DURATION = 2000;\r\n  $gameBar;\r\n  $container;\r\n  timeoutId = null;\r\n  actions = [];\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n    let $container,\r\n      position = getGlobalPref(\"gameBar.position\"),\r\n      $gameBar = CE(\r\n        \"div\",\r\n        { id: \"bx-game-bar\", class: \"bx-gone\", \"data-position\": position },\r\n        ($container = CE(\"div\", {\r\n          class: \"bx-game-bar-container bx-offscreen\",\r\n        })),\r\n        createSvgIcon(\r\n          position === \"bottom-left\" ? BxIcon.CARET_RIGHT : BxIcon.CARET_LEFT\r\n        )\r\n      );\r\n    if (\r\n      ((this.actions = [\r\n        new ScreenshotAction(),\r\n        ...(STATES.userAgent.capabilities.touch &&\r\n        getGlobalPref(\"touchController.mode\") !== \"off\"\r\n          ? [new TouchControlAction()]\r\n          : []),\r\n        new SpeakerAction(),\r\n        new RendererAction(),\r\n        new MicrophoneAction(),\r\n        new TrueAchievementsAction(),\r\n      ]),\r\n      position === \"bottom-right\")\r\n    )\r\n      this.actions.reverse();\r\n    for (let action of this.actions) $container.appendChild(action.render());\r\n    $gameBar.addEventListener(\"click\", (e) => {\r\n      if (e.target !== $gameBar) return;\r\n      $container.classList.contains(\"bx-show\")\r\n        ? this.hideBar()\r\n        : this.showBar();\r\n    }),\r\n      BxEventBus.Stream.on(\"gameBar.activated\", this.hideBar),\r\n      $container.addEventListener(\"pointerover\", this.clearHideTimeout),\r\n      $container.addEventListener(\"pointerout\", this.beginHideTimeout),\r\n      $container.addEventListener(\"transitionend\", (e) => {\r\n        $container.classList.replace(\"bx-hide\", \"bx-offscreen\");\r\n      }),\r\n      document.documentElement.appendChild($gameBar),\r\n      (this.$gameBar = $gameBar),\r\n      (this.$container = $container),\r\n      position !== \"off\" &&\r\n        window.addEventListener(\r\n          BxEvent.XCLOUD_POLLING_MODE_CHANGED,\r\n          ((e) => {\r\n            if (STATES.isPlaying)\r\n              window.BX_STREAM_SETTINGS.xCloudPollingMode !== \"none\"\r\n                ? this.disable()\r\n                : this.enable();\r\n          }).bind(this)\r\n        );\r\n  }\r\n  beginHideTimeout = () => {\r\n    this.clearHideTimeout(),\r\n      (this.timeoutId = window.setTimeout(() => {\r\n        (this.timeoutId = null), this.hideBar();\r\n      }, GameBar.VISIBLE_DURATION));\r\n  };\r\n  clearHideTimeout = () => {\r\n    this.timeoutId && clearTimeout(this.timeoutId), (this.timeoutId = null);\r\n  };\r\n  enable() {\r\n    this.$gameBar.classList.remove(\"bx-gone\");\r\n  }\r\n  disable() {\r\n    this.hideBar(), this.$gameBar.classList.add(\"bx-gone\");\r\n  }\r\n  showBar() {\r\n    this.$container.classList.remove(\"bx-offscreen\", \"bx-hide\", \"bx-gone\"),\r\n      this.$container.classList.add(\"bx-show\"),\r\n      this.beginHideTimeout();\r\n  }\r\n  hideBar = () => {\r\n    this.clearHideTimeout(),\r\n      this.$container.classList.replace(\"bx-show\", \"bx-hide\");\r\n  };\r\n  reset() {\r\n    for (let action of this.actions) action.reset();\r\n  }\r\n}\r\nclass XcloudApi {\r\n  static instance;\r\n  static getInstance = () =>\r\n    XcloudApi.instance ?? (XcloudApi.instance = new XcloudApi());\r\n  LOG_TAG = \"XcloudApi\";\r\n  CACHE_TITLES = {};\r\n  CACHE_WAIT_TIME = {};\r\n  constructor() {\r\n    BxLogger.info(this.LOG_TAG, \"constructor()\");\r\n  }\r\n  async getTitleInfo(id) {\r\n    if (id in this.CACHE_TITLES) return this.CACHE_TITLES[id];\r\n    let baseUri = STATES.selectedRegion.baseUri;\r\n    if (!baseUri || !STATES.gsToken) return;\r\n    let json;\r\n    try {\r\n      json = (\r\n        await (\r\n          await NATIVE_FETCH(`${baseUri}/v2/titles`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              Authorization: `Bearer ${STATES.gsToken}`,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              alternateIds: [id],\r\n              alternateIdType: \"productId\",\r\n            }),\r\n          })\r\n        ).json()\r\n      ).results[0];\r\n    } catch (e) {\r\n      json = {};\r\n    }\r\n    return (this.CACHE_TITLES[id] = json), json;\r\n  }\r\n  async getWaitTime(id) {\r\n    if (id in this.CACHE_WAIT_TIME) return this.CACHE_WAIT_TIME[id];\r\n    let baseUri = STATES.selectedRegion.baseUri;\r\n    if (!baseUri || !STATES.gsToken) return null;\r\n    let json;\r\n    try {\r\n      json = await (\r\n        await NATIVE_FETCH(`${baseUri}/v1/waittime/${id}`, {\r\n          method: \"GET\",\r\n          headers: { Authorization: `Bearer ${STATES.gsToken}` },\r\n        })\r\n      ).json();\r\n    } catch (e) {\r\n      json = {};\r\n    }\r\n    return (this.CACHE_WAIT_TIME[id] = json), json;\r\n  }\r\n}\r\nclass GameTile {\r\n  static timeoutId;\r\n  static async showWaitTime($elm, productId) {\r\n    if ($elm.hasWaitTime) return;\r\n    $elm.hasWaitTime = !0;\r\n    let totalWaitTime,\r\n      api = XcloudApi.getInstance(),\r\n      info = await api.getTitleInfo(productId);\r\n    if (info) {\r\n      let waitTime = await api.getWaitTime(info.titleId);\r\n      if (waitTime) totalWaitTime = waitTime.estimatedAllocationTimeInSeconds;\r\n    }\r\n    if (typeof totalWaitTime === \"number\" && isElementVisible($elm)) {\r\n      let $div = CE(\r\n          \"div\",\r\n          { class: \"bx-game-tile-wait-time\" },\r\n          createSvgIcon(BxIcon.PLAYTIME),\r\n          CE(\r\n            \"span\",\r\n            !1,\r\n            totalWaitTime < 60\r\n              ? totalWaitTime + \"s\"\r\n              : secondsToHm(totalWaitTime)\r\n          )\r\n        ),\r\n        duration =\r\n          totalWaitTime >= 900\r\n            ? \"long\"\r\n            : totalWaitTime >= 600\r\n            ? \"medium\"\r\n            : totalWaitTime >= 300\r\n            ? \"short\"\r\n            : \"\";\r\n      if (duration) $div.dataset.duration = duration;\r\n      $elm.insertAdjacentElement(\"afterbegin\", $div);\r\n    }\r\n  }\r\n  static requestWaitTime($elm, productId) {\r\n    GameTile.timeoutId && clearTimeout(GameTile.timeoutId),\r\n      (GameTile.timeoutId = window.setTimeout(async () => {\r\n        GameTile.showWaitTime($elm, productId);\r\n      }, 500));\r\n  }\r\n  static findProductId($elm) {\r\n    let productId = null;\r\n    try {\r\n      if (\r\n        ($elm.tagName === \"BUTTON\" && $elm.className.includes(\"MruGameCard\")) ||\r\n        ($elm.tagName === \"A\" && $elm.className.includes(\"GameCard\"))\r\n      ) {\r\n        let props = getReactProps($elm.parentElement);\r\n        if (Array.isArray(props.children))\r\n          productId = props.children[0].props.productId;\r\n        else productId = props.children.props.productId;\r\n      } else if ($elm.tagName === \"A\" && $elm.className.includes(\"GameItem\")) {\r\n        let props = getReactProps($elm.parentElement);\r\n        if (\r\n          ((props = props.children.props),\r\n          props.location !== \"NonStreamableGameItem\")\r\n        )\r\n          if (\"productId\" in props) productId = props.productId;\r\n          else productId = props.children.props.productId;\r\n      }\r\n    } catch (e) {}\r\n    return productId;\r\n  }\r\n  static setup() {\r\n    window.addEventListener(BxEvent.NAVIGATION_FOCUS_CHANGED, (e) => {\r\n      let $elm = e.element;\r\n      if (($elm.className || \"\").includes(\"MruGameCard\")) {\r\n        let $ol = $elm.closest(\"ol\");\r\n        if ($ol && !$ol.hasWaitTime)\r\n          ($ol.hasWaitTime = !0),\r\n            $ol\r\n              .querySelectorAll(\"button[class*=MruGameCard]\")\r\n              .forEach(($elm2) => {\r\n                let productId = GameTile.findProductId($elm2);\r\n                productId && GameTile.showWaitTime($elm2, productId);\r\n              });\r\n      } else {\r\n        let productId = GameTile.findProductId($elm);\r\n        productId && GameTile.requestWaitTime($elm, productId);\r\n      }\r\n    });\r\n  }\r\n}\r\nclass ProductDetailsPage {\r\n  static $btnShortcut =\r\n    AppInterface &&\r\n    createButton({\r\n      icon: BxIcon.CREATE_SHORTCUT,\r\n      label: t(\"create-shortcut\"),\r\n      style: 64,\r\n      onClick: (e) => {\r\n        AppInterface.createShortcut(window.location.pathname.substring(6));\r\n      },\r\n    });\r\n  static $btnWallpaper =\r\n    AppInterface &&\r\n    createButton({\r\n      icon: BxIcon.DOWNLOAD,\r\n      label: t(\"wallpaper\"),\r\n      style: 64,\r\n      onClick: (e) => {\r\n        let details = parseDetailsPath(window.location.pathname);\r\n        details &&\r\n          AppInterface.downloadWallpapers(details.titleSlug, details.productId);\r\n      },\r\n    });\r\n  static injectTimeoutId = null;\r\n  static injectButtons() {\r\n    ProductDetailsPage.injectTimeoutId &&\r\n      clearTimeout(ProductDetailsPage.injectTimeoutId),\r\n      (ProductDetailsPage.injectTimeoutId = window.setTimeout(() => {\r\n        let $inputsContainer = document.querySelector(\r\n          'div[class*=\"Header-module__gamePassAndInputsContainer\"]'\r\n        );\r\n        if ($inputsContainer && !$inputsContainer.dataset.bxInjected) {\r\n          $inputsContainer.dataset.bxInjected = \"true\";\r\n          let { productId } = parseDetailsPath(window.location.pathname);\r\n          if (LocalCoOpManager.getInstance().isSupported(productId || \"\"))\r\n            $inputsContainer.insertAdjacentElement(\r\n              \"afterend\",\r\n              CE(\r\n                \"div\",\r\n                { class: \"bx-product-details-icons bx-frosted\" },\r\n                createSvgIcon(BxIcon.LOCAL_CO_OP),\r\n                t(\"local-co-op\")\r\n              )\r\n            );\r\n        }\r\n        if (AppInterface) {\r\n          let $container = document.querySelector(\r\n            \"div[class*=ActionButtons-module__container]\"\r\n          );\r\n          if ($container && $container.parentElement)\r\n            $container.parentElement.appendChild(\r\n              CE(\r\n                \"div\",\r\n                { class: \"bx-product-details-buttons\" },\r\n                [\"android-handheld\", \"android\"].includes(\r\n                  BX_FLAGS.DeviceInfo.deviceType\r\n                ) && ProductDetailsPage.$btnShortcut,\r\n                ProductDetailsPage.$btnWallpaper\r\n              )\r\n            );\r\n        }\r\n      }, 500));\r\n  }\r\n}\r\nclass KeyboardShortcutHandler {\r\n  static instance;\r\n  static getInstance = () =>\r\n    KeyboardShortcutHandler.instance ??\r\n    (KeyboardShortcutHandler.instance = new KeyboardShortcutHandler());\r\n  start() {\r\n    window.addEventListener(\"keydown\", this.onKeyDown);\r\n  }\r\n  stop() {\r\n    window.removeEventListener(\"keydown\", this.onKeyDown);\r\n  }\r\n  onKeyDown = (e) => {\r\n    if (window.BX_STREAM_SETTINGS.xCloudPollingMode !== \"none\") return;\r\n    if (e.repeat) return;\r\n    let fullKeyCode = KeyHelper.getFullKeyCodeFromEvent(e);\r\n    if (!fullKeyCode) return;\r\n    let action = window.BX_STREAM_SETTINGS.keyboardShortcuts?.[fullKeyCode];\r\n    if (action)\r\n      e.preventDefault(),\r\n        e.stopPropagation(),\r\n        ShortcutHandler.runAction(action);\r\n  };\r\n}\r\nvar VIBRATION_DATA_MAP = {\r\n  gamepadIndex: 8,\r\n  leftMotorPercent: 8,\r\n  rightMotorPercent: 8,\r\n  leftTriggerMotorPercent: 8,\r\n  rightTriggerMotorPercent: 8,\r\n  durationMs: 16,\r\n};\r\nclass DeviceVibrationManager {\r\n  static instance;\r\n  static getInstance() {\r\n    if (typeof DeviceVibrationManager.instance === \"undefined\")\r\n      if (STATES.browser.capabilities.deviceVibration)\r\n        DeviceVibrationManager.instance = new DeviceVibrationManager();\r\n      else DeviceVibrationManager.instance = null;\r\n    return DeviceVibrationManager.instance;\r\n  }\r\n  dataChannel = null;\r\n  boundOnMessage;\r\n  constructor() {\r\n    (this.boundOnMessage = this.onMessage.bind(this)),\r\n      BxEventBus.Stream.on(\"dataChannelCreated\", (payload) => {\r\n        let { dataChannel } = payload;\r\n        if (dataChannel?.label === \"input\")\r\n          this.reset(),\r\n            (this.dataChannel = dataChannel),\r\n            this.setupDataChannel();\r\n      }),\r\n      BxEventBus.Stream.on(\"deviceVibration.updated\", () =>\r\n        this.setupDataChannel()\r\n      );\r\n  }\r\n  setupDataChannel() {\r\n    if (!this.dataChannel) return;\r\n    if (\r\n      (this.removeEventListeners(),\r\n      window.BX_STREAM_SETTINGS.deviceVibrationIntensity > 0)\r\n    )\r\n      this.dataChannel.addEventListener(\"message\", this.boundOnMessage);\r\n  }\r\n  playVibration(data) {\r\n    let vibrationIntensity = StreamSettings.settings.deviceVibrationIntensity;\r\n    if (AppInterface) {\r\n      AppInterface.vibrate(JSON.stringify(data), vibrationIntensity);\r\n      return;\r\n    }\r\n    let realIntensity =\r\n      Math.min(100, data.leftMotorPercent + data.rightMotorPercent / 2) *\r\n      vibrationIntensity;\r\n    if (realIntensity === 0 || realIntensity === 100) {\r\n      window.navigator.vibrate(realIntensity ? data.durationMs : 0);\r\n      return;\r\n    }\r\n    let pulseDuration = 200,\r\n      onDuration = Math.floor((pulseDuration * realIntensity) / 100),\r\n      offDuration = pulseDuration - onDuration,\r\n      repeats = Math.ceil(data.durationMs / pulseDuration),\r\n      pulses = Array(repeats).fill([onDuration, offDuration]).flat();\r\n    window.navigator.vibrate(pulses);\r\n  }\r\n  onMessage(e) {\r\n    if (typeof e !== \"object\" || !(e.data instanceof ArrayBuffer)) return;\r\n    let dataView = new DataView(e.data),\r\n      offset = 0,\r\n      messageType;\r\n    if (dataView.byteLength === 13)\r\n      (messageType = dataView.getUint16(offset, !0)),\r\n        (offset += Uint16Array.BYTES_PER_ELEMENT);\r\n    else\r\n      (messageType = dataView.getUint8(offset)),\r\n        (offset += Uint8Array.BYTES_PER_ELEMENT);\r\n    if (!(messageType & 128)) return;\r\n    let vibrationType = dataView.getUint8(offset);\r\n    if (((offset += Uint8Array.BYTES_PER_ELEMENT), vibrationType !== 0)) return;\r\n    let data = {},\r\n      key;\r\n    for (key in VIBRATION_DATA_MAP)\r\n      if (VIBRATION_DATA_MAP[key] === 16)\r\n        (data[key] = dataView.getUint16(offset, !0)),\r\n          (offset += Uint16Array.BYTES_PER_ELEMENT);\r\n      else\r\n        (data[key] = dataView.getUint8(offset)),\r\n          (offset += Uint8Array.BYTES_PER_ELEMENT);\r\n    this.playVibration(data);\r\n  }\r\n  removeEventListeners() {\r\n    try {\r\n      this.dataChannel?.removeEventListener(\"message\", this.boundOnMessage);\r\n    } catch (e) {}\r\n  }\r\n  reset() {\r\n    this.removeEventListeners(), (this.dataChannel = null);\r\n  }\r\n}\r\nclass StreamUiHandler {\r\n  static $btnStreamSettings;\r\n  static $btnStreamStats;\r\n  static $btnRefresh;\r\n  static $btnHome;\r\n  static cloneStreamHudButton($btnOrg, label, svgIcon) {\r\n    if (!$btnOrg) return null;\r\n    let $container = $btnOrg.cloneNode(!0),\r\n      timeout;\r\n    if (STATES.browser.capabilities.touch) {\r\n      let onTransitionStart = (e) => {\r\n          if (e.propertyName !== \"opacity\") return;\r\n          timeout && clearTimeout(timeout),\r\n            (e.target.style.pointerEvents = \"none\");\r\n        },\r\n        onTransitionEnd = (e) => {\r\n          if (e.propertyName !== \"opacity\") return;\r\n          let $streamHud = e.target.closest(\"#StreamHud\");\r\n          if (!$streamHud) return;\r\n          if ($streamHud.style.left === \"0px\") {\r\n            let $target = e.target;\r\n            timeout && clearTimeout(timeout),\r\n              (timeout = window.setTimeout(() => {\r\n                $target.style.pointerEvents = \"auto\";\r\n              }, 100));\r\n          }\r\n        };\r\n      $container.addEventListener(\"transitionstart\", onTransitionStart),\r\n        $container.addEventListener(\"transitionend\", onTransitionEnd);\r\n    }\r\n    let $button = $container.querySelector(\"button\");\r\n    if (!$button) return null;\r\n    $button.setAttribute(\"title\", label);\r\n    let $orgSvg = $button.querySelector(\"svg\");\r\n    if (!$orgSvg) return null;\r\n    let $svg = createSvgIcon(svgIcon);\r\n    return (\r\n      ($svg.style.fill = \"none\"),\r\n      $svg.setAttribute(\"class\", $orgSvg.getAttribute(\"class\") || \"\"),\r\n      ($svg.ariaHidden = \"true\"),\r\n      $orgSvg.replaceWith($svg),\r\n      $container\r\n    );\r\n  }\r\n  static cloneCloseButton($btnOrg, icon, className, onChange) {\r\n    if (!$btnOrg) return null;\r\n    let $btn = $btnOrg.cloneNode(!0),\r\n      $svg = createSvgIcon(icon);\r\n    return (\r\n      $svg.setAttribute(\r\n        \"class\",\r\n        $btn.firstElementChild.getAttribute(\"class\") || \"\"\r\n      ),\r\n      ($svg.style.fill = \"none\"),\r\n      $btn.classList.add(className),\r\n      $btn.removeChild($btn.firstElementChild),\r\n      $btn.appendChild($svg),\r\n      $btn.addEventListener(\"click\", onChange),\r\n      $btn\r\n    );\r\n  }\r\n  static async handleStreamMenu() {\r\n    let $btnCloseHud = document.querySelector(\r\n      \"button[class*=StreamMenu-module__backButton]\"\r\n    );\r\n    if (!$btnCloseHud) return;\r\n    let { $btnRefresh, $btnHome } = StreamUiHandler;\r\n    if (typeof $btnRefresh === \"undefined\")\r\n      $btnRefresh = StreamUiHandler.cloneCloseButton(\r\n        $btnCloseHud,\r\n        BxIcon.REFRESH,\r\n        \"bx-stream-refresh-button\",\r\n        () => {\r\n          confirm(t(\"confirm-reload-stream\")) && window.location.reload();\r\n        }\r\n      );\r\n    if (typeof $btnHome === \"undefined\")\r\n      $btnHome = StreamUiHandler.cloneCloseButton(\r\n        $btnCloseHud,\r\n        BxIcon.HOME,\r\n        \"bx-stream-home-button\",\r\n        () => {\r\n          confirm(t(\"back-to-home-confirm\")) &&\r\n            (window.location.href = window.location.href.substring(0, 31));\r\n        }\r\n      );\r\n    if ($btnRefresh && $btnHome)\r\n      $btnCloseHud.insertAdjacentElement(\"afterend\", $btnRefresh),\r\n        $btnRefresh.insertAdjacentElement(\"afterend\", $btnHome);\r\n    document\r\n      .querySelector(\r\n        \"div[class*=StreamMenu-module__menuContainer] > div[class*=Menu-module]\"\r\n      )\r\n      ?.appendChild(await StreamBadges.getInstance().render());\r\n  }\r\n  static handleSystemMenu($streamHud) {\r\n    let $orgButton = $streamHud.querySelector(\"div[class^=HUDButton]\");\r\n    if (!$orgButton) return;\r\n    if (\r\n      StreamUiHandler.$btnStreamSettings &&\r\n      $streamHud.contains(StreamUiHandler.$btnStreamSettings)\r\n    )\r\n      return;\r\n    let hideGripHandle = () => {\r\n        let $gripHandle = document.querySelector(\r\n          \"#StreamHud button[class^=GripHandle]\"\r\n        );\r\n        if ($gripHandle && $gripHandle.ariaExpanded === \"true\")\r\n          $gripHandle.dispatchEvent(new PointerEvent(\"pointerdown\")),\r\n            $gripHandle.click(),\r\n            $gripHandle.dispatchEvent(new PointerEvent(\"pointerdown\")),\r\n            $gripHandle.click();\r\n      },\r\n      $btnStreamSettings = StreamUiHandler.$btnStreamSettings;\r\n    if (typeof $btnStreamSettings === \"undefined\")\r\n      ($btnStreamSettings = StreamUiHandler.cloneStreamHudButton(\r\n        $orgButton,\r\n        t(\"better-xcloud\"),\r\n        BxIcon.BETTER_XCLOUD\r\n      )),\r\n        $btnStreamSettings?.addEventListener(\"click\", (e) => {\r\n          hideGripHandle(),\r\n            e.preventDefault(),\r\n            SettingsDialog.getInstance().show();\r\n        }),\r\n        (StreamUiHandler.$btnStreamSettings = $btnStreamSettings);\r\n    let streamStats = StreamStats.getInstance(),\r\n      $btnStreamStats = StreamUiHandler.$btnStreamStats;\r\n    if (typeof $btnStreamStats === \"undefined\")\r\n      ($btnStreamStats = StreamUiHandler.cloneStreamHudButton(\r\n        $orgButton,\r\n        t(\"stream-stats\"),\r\n        BxIcon.STREAM_STATS\r\n      )),\r\n        $btnStreamStats?.addEventListener(\"click\", async (e) => {\r\n          hideGripHandle(), e.preventDefault(), await streamStats.toggle();\r\n          let btnStreamStatsOn =\r\n            !streamStats.isHidden() && !streamStats.isGlancing();\r\n          $btnStreamStats.classList.toggle(\r\n            \"bx-stream-menu-button-on\",\r\n            btnStreamStatsOn\r\n          );\r\n        }),\r\n        (StreamUiHandler.$btnStreamStats = $btnStreamStats);\r\n    let $btnParent = $orgButton.parentElement;\r\n    if ($btnStreamSettings && $btnStreamStats) {\r\n      let btnStreamStatsOn =\r\n        !streamStats.isHidden() && !streamStats.isGlancing();\r\n      $btnStreamStats.classList.toggle(\r\n        \"bx-stream-menu-button-on\",\r\n        btnStreamStatsOn\r\n      ),\r\n        $btnParent.insertBefore($btnStreamStats, $btnParent.lastElementChild),\r\n        $btnParent.insertBefore($btnStreamSettings, $btnStreamStats);\r\n    }\r\n    let $dotsButton = $btnParent.lastElementChild;\r\n    $dotsButton.parentElement.insertBefore(\r\n      $dotsButton,\r\n      $dotsButton.parentElement.firstElementChild\r\n    );\r\n  }\r\n  static reset() {\r\n    (StreamUiHandler.$btnStreamSettings = void 0),\r\n      (StreamUiHandler.$btnStreamStats = void 0),\r\n      (StreamUiHandler.$btnRefresh = void 0),\r\n      (StreamUiHandler.$btnHome = void 0);\r\n  }\r\n}\r\nSettingsManager.getInstance();\r\nif (window.location.pathname.includes(\"/auth/msa\")) {\r\n  let nativePushState = window.history.pushState;\r\n  throw (\r\n    ((window.history.pushState = function (...args) {\r\n      let url = args[2];\r\n      if (\r\n        url &&\r\n        (url.startsWith(\"/play\") || url.substring(6).startsWith(\"/play\"))\r\n      ) {\r\n        console.log(\"Redirecting to xbox.com/play\"),\r\n          window.stop(),\r\n          (window.location.href = \"https://www.xbox.com\" + url);\r\n        return;\r\n      }\r\n      return nativePushState.apply(this, arguments);\r\n    }),\r\n    new Error(\"[Better xCloud] Refreshing the page after logging in\"))\r\n  );\r\n}\r\nwindow.addEventListener(\"load\", (e) => {\r\n  window.setTimeout(() => {\r\n    if (document.body.classList.contains(\"legacyBackground\"))\r\n      window.stop(), window.location.reload(!0);\r\n  }, 3000);\r\n});\r\ndocument.addEventListener(\"readystatechange\", (e) => {\r\n  if (document.readyState !== \"interactive\") return;\r\n  if (((STATES.isSignedIn = !!window.xbcUser?.isSignedIn), STATES.isSignedIn))\r\n    RemotePlayManager.getInstance()?.initialize();\r\n  if (\r\n    getGlobalPref(\"ui.hideSections\").includes(\"friends\") ||\r\n    getGlobalPref(\"block.features\").includes(\"friends\")\r\n  ) {\r\n    let $parent = document\r\n      .querySelector(\"div[class*=PlayWithFriendsSkeleton]\")\r\n      ?.closest(\"div[class*=HomePage-module]\");\r\n    $parent && ($parent.style.display = \"none\");\r\n  }\r\n  preloadFonts();\r\n});\r\nwindow.BX_EXPOSED = BxExposed;\r\nwindow.addEventListener(BxEvent.POPSTATE, onHistoryChanged);\r\nwindow.addEventListener(\"popstate\", onHistoryChanged);\r\nwindow.history.pushState = patchHistoryMethod(\"pushState\");\r\nwindow.history.replaceState = patchHistoryMethod(\"replaceState\");\r\nBxEventBus.Script.on(\"ui.header.rendered\", () => {\r\n  HeaderSection.getInstance().checkHeader();\r\n});\r\nBxEventBus.Stream.on(\"state.loading\", () => {\r\n  if (\r\n    window.location.pathname.includes(\"/launch/\") &&\r\n    STATES.currentStream.titleInfo\r\n  )\r\n    STATES.currentStream.titleSlug = productTitleToSlug(\r\n      STATES.currentStream.titleInfo.productInfo.title\r\n    );\r\n  else STATES.currentStream.titleSlug = \"remote-play\";\r\n});\r\ngetGlobalPref(\"loadingScreen.gameArt.show\") &&\r\n  BxEventBus.Script.on(\"titleInfo.ready\", LoadingScreen.setup);\r\nBxEventBus.Stream.on(\"state.starting\", () => {\r\n  LoadingScreen.hide();\r\n  {\r\n    let cursorHider = MouseCursorHider.getInstance();\r\n    if (cursorHider) cursorHider.start(), cursorHider.hide();\r\n  }\r\n});\r\nBxEventBus.Stream.on(\"state.playing\", (payload) => {\r\n  (window.BX_STREAM_SETTINGS = StreamSettings.settings),\r\n    StreamSettings.refreshAllSettings(),\r\n    (STATES.isPlaying = !0);\r\n  {\r\n    let gameBar = GameBar.getInstance();\r\n    if (gameBar) gameBar.reset(), gameBar.enable(), gameBar.showBar();\r\n    KeyboardShortcutHandler.getInstance().start();\r\n    let $video = payload.$video;\r\n    if (\r\n      (ScreenshotManager.getInstance().updateCanvasSize(\r\n        $video.videoWidth,\r\n        $video.videoHeight\r\n      ),\r\n      getStreamPref(\"localCoOp.enabled\"))\r\n    )\r\n      BxExposed.toggleLocalCoOp(!0), Toast.show(t(\"local-co-op\"), t(\"enabled\"));\r\n  }\r\n  updateVideoPlayer();\r\n});\r\nBxEventBus.Script.on(\"ui.error.rendered\", () => {\r\n  BxEventBus.Stream.emit(\"state.stopped\", {});\r\n});\r\nBxEventBus.Script.on(\"ui.guideHome.rendered\", () => {\r\n  let $root = document.querySelector(\r\n    \"#gamepass-dialog-root div[role=dialog] div[role=tabpanel] div[class*=HomeLandingPage]\"\r\n  );\r\n  $root && GuideMenu.getInstance().injectHome($root, STATES.isPlaying);\r\n});\r\nBxEventBus.Script.on(\"ui.guideAchievementProgress.rendered\", () => {\r\n  let $elm = document.querySelector(\r\n    \"#gamepass-dialog-root button[class*=AchievementsButton-module__progressBarContainer]\"\r\n  );\r\n  if ($elm) TrueAchievements.getInstance().injectAchievementsProgress($elm);\r\n});\r\nBxEventBus.Script.on(\"ui.guideAchievementDetail.rendered\", () => {\r\n  let $elm = document.querySelector(\r\n    \"#gamepass-dialog-root div[class^=AchievementDetailPage-module]\"\r\n  );\r\n  if ($elm) TrueAchievements.getInstance().injectAchievementDetailPage($elm);\r\n});\r\nBxEventBus.Stream.on(\"ui.streamMenu.rendered\", async () => {\r\n  await StreamUiHandler.handleStreamMenu();\r\n});\r\nBxEventBus.Stream.on(\"ui.streamHud.rendered\", async () => {\r\n  let $elm = document.querySelector(\"#StreamHud\");\r\n  $elm && StreamUiHandler.handleSystemMenu($elm);\r\n});\r\nwindow.addEventListener(BxEvent.XCLOUD_RENDERING_COMPONENT, (e) => {\r\n  if (e.component === \"product-detail\") ProductDetailsPage.injectButtons();\r\n});\r\nBxEventBus.Stream.on(\"dataChannelCreated\", (payload) => {\r\n  let { dataChannel } = payload;\r\n  if (dataChannel?.label !== \"message\") return;\r\n  dataChannel.addEventListener(\"message\", async (msg) => {\r\n    if (msg.origin === \"better-xcloud\" || typeof msg.data !== \"string\") return;\r\n    if (!msg.data.includes(\"/titleinfo\")) return;\r\n    let currentStream = STATES.currentStream,\r\n      json = JSON.parse(JSON.parse(msg.data).content),\r\n      currentId = currentStream.xboxTitleId ?? null,\r\n      newId = parseInt(json.titleid, 16);\r\n    if (STATES.remotePlay.isPlaying)\r\n      if (((currentStream.titleSlug = \"remote-play\"), json.focused)) {\r\n        let productTitle = await XboxApi.getProductTitle(newId);\r\n        if (productTitle)\r\n          currentStream.titleSlug = productTitleToSlug(productTitle);\r\n        else newId = -1;\r\n      } else newId = 0;\r\n    if (currentId !== newId)\r\n      (currentStream.xboxTitleId = newId),\r\n        BxEventBus.Stream.emit(\"xboxTitleId.changed\", { id: newId });\r\n  });\r\n});\r\nfunction unload() {\r\n  if (!STATES.isPlaying) return;\r\n  BxLogger.warning(\"Unloading\"),\r\n    KeyboardShortcutHandler.getInstance().stop(),\r\n    EmulatedMkbHandler.getInstance()?.destroy(),\r\n    NativeMkbHandler.getInstance()?.destroy(),\r\n    DeviceVibrationManager.getInstance()?.reset(),\r\n    STATES.currentStream.streamPlayerManager?.destroy(),\r\n    (STATES.isPlaying = !1),\r\n    (STATES.currentStream = {}),\r\n    (window.BX_EXPOSED.shouldShowSensorControls = !1),\r\n    (window.BX_EXPOSED.stopTakRendering = !1),\r\n    NavigationDialogManager.getInstance().hide(),\r\n    StreamStats.getInstance().destroy(),\r\n    StreamBadges.getInstance().destroy(),\r\n    MouseCursorHider.getInstance()?.stop(),\r\n    TouchController.reset(),\r\n    GameBar.getInstance()?.disable(),\r\n    BxEventBus.Stream.emit(\"xboxTitleId.changed\", { id: -1 });\r\n}\r\nBxEventBus.Stream.on(\"state.stopped\", unload);\r\nwindow.addEventListener(\"pagehide\", (e) => {\r\n  BxEventBus.Stream.emit(\"state.stopped\", {});\r\n});\r\nwindow.addEventListener(BxEvent.CAPTURE_SCREENSHOT, (e) => {\r\n  ScreenshotManager.getInstance().takeScreenshot();\r\n});\r\nfunction main() {\r\n  if (\r\n    (GhPagesUtils.fetchLatestCommit(),\r\n    getGlobalPref(\"nativeMkb.mode\") !== \"off\")\r\n  ) {\r\n    let customList = getGlobalPref(\"nativeMkb.forcedGames\");\r\n    BX_FLAGS.ForceNativeMkbTitles.push(...customList);\r\n  }\r\n  if (\r\n    (StreamSettings.setup(),\r\n    patchRtcPeerConnection(),\r\n    patchRtcCodecs(),\r\n    interceptHttpRequests(),\r\n    patchVideoApi(),\r\n    patchCanvasContext(),\r\n    AppInterface && patchPointerLockApi(),\r\n    getGlobalPref(\"audio.volume.booster.enabled\") && patchAudioContext(),\r\n    getGlobalPref(\"block.tracking\"))\r\n  )\r\n    patchMeControl(), disableAdobeAudienceManager();\r\n  if (\r\n    (addCss(),\r\n    StreamStatsCollector.setupEvents(),\r\n    StreamBadges.setupEvents(),\r\n    StreamStats.setupEvents(),\r\n    WebGPUPlayer.prepare(),\r\n    STATES.userAgent.capabilities.touch && TouchController.updateCustomList(),\r\n    DeviceVibrationManager.getInstance(),\r\n    BX_FLAGS.CheckForUpdate && checkForUpdate(),\r\n    Patcher.init(),\r\n    disablePwa(),\r\n    getGlobalPref(\"xhome.enabled\"))\r\n  )\r\n    RemotePlayManager.detect();\r\n  if (getGlobalPref(\"touchController.mode\") === \"all\") TouchController.setup();\r\n  if (\r\n    AppInterface &&\r\n    (getGlobalPref(\"mkb.enabled\") || getGlobalPref(\"nativeMkb.mode\") === \"on\")\r\n  )\r\n    (STATES.pointerServerPort = AppInterface.startPointerServer() || 9269),\r\n      BxLogger.info(\r\n        \"startPointerServer\",\r\n        \"Port\",\r\n        STATES.pointerServerPort.toString()\r\n      );\r\n  if (\r\n    (getGlobalPref(\"ui.gameCard.waitTime.show\") && GameTile.setup(),\r\n    EmulatedMkbHandler.setupEvents(),\r\n    getGlobalPref(\"ui.controllerStatus.show\"))\r\n  )\r\n    window.addEventListener(\"gamepadconnected\", (e) =>\r\n      showGamepadToast(e.gamepad)\r\n    ),\r\n      window.addEventListener(\"gamepaddisconnected\", (e) =>\r\n        showGamepadToast(e.gamepad)\r\n      );\r\n}\r\nmain();\r\n";
        
        // L'ajouter comme premier élément du head pour qu'il s'exécute avant tout le reste
        if (document.head && document.head.firstChild) {
          document.head.insertBefore(scriptElem, document.head.firstChild);
        } else if (document.head) {
          document.head.appendChild(scriptElem);
        } else if (document.documentElement) {
          document.documentElement.appendChild(scriptElem);
        }
        
        console.log('Script Better X Cloud injecté très tôt dans le cycle');
      }
    } catch (error) {
      console.error('Erreur lors de l\'injection de Better X Cloud:', error);
    }

    // Fonction pour injecter les paramètres BetterXcloud
function injectBetterXcloudSettings() {
  try {
    console.log("Injection des paramètres BetterXcloud");
    
    // Définir les paramètres principaux pour BetterXcloud
    const settings = {
      "ui.imageQuality": 10,
      "ui.gameCard.waitTime.show": true,
      "ui.layout": "default",
      "game.fortnite.forceConsole": false,
      "block.tracking": true,
      "xhome.enabled": false,
      "block.features": [],
      "ui.hideSections": [],
      "audio.volume.booster.enabled": false,
      "ui.feedbackDialog.disabled": true,
      "stream.video.combineAudio": false,
      "nativeMkb.mode": "default",
      "loadingScreen.gameArt.show": false,
      "nativeMkb.forcedGames": [],
      "stream.video.codecProfile": "low",
      "ui.splashVideo.skip": true,
      "ui.reduceAnimations": true,
      "ui.systemMenu.hideHandle": true,
      "ui.streamMenu.simplify": false,
      "ui.hideScrollbar": false,
      "version.current": "6.4.6",
      "version.lastCheck": 1742417945,
      "mkb.enabled": false,
      "ui.controllerStatus.show": true,
      "version.latest": "6.4.6",
      "bx.locale": "en-US",
      "ui.controllerFriendly": false,
      "stream.locale": "default",
      "server.ipv6.prefer": false,
      "screenshot.applyFilters": false,
      "audio.mic.onPlaying": false,
      "mkb.cursor.hideIdle": false,
      "gameBar.position": "off",
      "loadingScreen.waitTime.show": true,
      "loadingScreen.rocket": "hide",
      "userAgent.profile": "default",
      "ui.theme": "default"
    };

    // Définir les paramètres spécifiques pour BetterXcloud.Stream
    const streamSettings = {
      "controller.pollingRate": 4,
      "deviceVibration.mode": "off",
      "mkb.p1.preset.mappingId": -1,
      "keyboardShortcuts.preset.inGameId": -1,
      "audio.volume": 100,
      "video.player.type": "default",
      "video.maxFps": 10,
      "video.player.powerPreference": "default",
      "video.processing": "usm",
      "video.ratio": "16:9",
      "video.position": "center",
      "video.processing.sharpness": 0,
      "video.saturation": 100,
      "video.contrast": 100,
      "video.brightness": 100,
      "localCoOp.enabled": false,
      "deviceVibration.intensity": 50,
      "stats.showWhenPlaying": false,
      "stats.quickGlance.enabled": true,
      "stats.items": ["ping"],
      "stats.position": "top-left",
      "stats.textSize": "0.9rem",
      "stats.opacity.all": 60,
      "stats.opacity.background": 60,
      "stats.colors": false,
      "mkb.p1.slot": 1
    };

    // Sauvegarder les paramètres dans le localStorage
    localStorage.setItem("BetterXcloud", JSON.stringify(settings));
    localStorage.setItem("BetterXcloud.Stream", JSON.stringify(streamSettings));
    console.log("Paramètres injectés dans le localStorage:", settings);
  } catch (error) {
    console.error("Erreur lors de l'injection des paramètres BetterXcloud:", error);
  }
}

// Exécuter la fonction directement
injectBetterXcloudSettings();

});